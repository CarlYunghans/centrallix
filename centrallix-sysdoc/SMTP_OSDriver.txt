Title:	 SMTP ObjectSystem Driver
Author:	 Justin Southworth, Hazen Johnson
Date:	 July 31, 2014
-------------------------------------------------------------------------------

INTRODUCTION

    The SMTP OS Driver provides the capability for Centrallix to send emails
    using the Object System. An SMTP OS directory structure consists of a root
    node containing information universal to all sent emails and of multiple
    child objects, which are emails that can be sent by the driver.

USAGE

    In order to use the SMTP driver, the root node must first have appropriate
    attributes. "spool_dir" is one of the more important attributes as this
    defines where child email objects will be searched for/stored. All other
    attributes on the root node are currently inneffective because of how the
    SMTP driver currently uses sendmail.

    Email objects may be created as children of the root SMTP node and, when
    created, will contain this basic email header:

	Message-ID  (containing the message_id)
	User-Agent  (containing "Centrallix/0.9.1")
	Subject	    (blank)
	MIME-Version (containing "1.0")

    Further modification of the email object will be accomplished through the
    MIME driver.

    Before an email can be sent, the "env_from" attribute must be set.
    Otherwise, the sent email will be registered as from the user running
    Centrallix. As this is normally blocked by most email servers, this will
    cause the email to fail to send.

    Email recipients should be determined from the email message itself;
    however, additional recipients may be added by using the "env_to"
    attribute.

    When an email is ready to send, the "is_ready" attribute should be set to
    1. This will cause the SMTP driver to begin a sendmail process to send the
    email with the appropriate parameters.

INTERFACE AND IMPLEMENTATION

    The SMTP driver does not implement the entire OS driver interface. It's
    functionality in each of the standard interface functions is as follows.

    A. Initialization

	Aside from initializing globals, the SMTP driver registers itself for
	the system/smtp content type. This identifies the SMTP root node and
	is a system/structure type file.

	The globals initialized are mainly used for default attributes when
	constructing new root nodes or email objects. Currently, the global
	values are never deinitialized, so multiple initialization calls may
	cause a memory leak. This could be fixed with a magic number check or
	a simple flag to note that the globals have been initialized.

    B.  Opening and Closing Objects

	As far as it has been tested, the SMTP driver conforms to the
	standards required by the Object System for opening and closing. One
	of the opening flags will not function in the SMTP driver. The
	OBJ_O_TRUNC flag has not been implemented. Internally, the SMTP
	driver opens objects as follows:

	    1.  Determine if the object is a root node or a email object.
	    2.  Open the root node and initialize any other properties held in
		common between the root node and email objects using the
		smtp_internal_OpenGeneral() function:
		i.  Attempt to open the root node.
		ii. Create the root node if opening fails, the O_CREATE flag
		    is set, and the root node is the last element in the path.
		iii.Initialize the attribute arrays.
	    3.  Use the root node/email object specific internal open function
		to initialize the different attributes needed by the respective
		object types.
		* smtp_internal_OpenRoot
		i.  Does nothing, but is present in case extra functionality is
		needed.
		* smtp_internal_OpenEml
		i.  Attempt to open the email file.
		ii. Create the email object (a struct and a MIME file) with
		    default attributes.
		iii.Open the email struct file and fill out the attribute
		    array.

	The Close routine simply cleans up the structures used to store the
	SMTP object's attributes after opening as per normal ObjectSystem
	close.

    C.  Creating and Deleting Objects

	Both the root node and an email object for the SMTP driver may be
	created using smtpCreate. The root node is handled directly by an
	internal create function while emails are handled through smtpOpen.

	OBJ_O_AUTONAME is supported for email object creation. The name
	generated should be of the form "message###.eml". The numbers
	inserted are based on the time offset when the global values were
	initialized, so collisions should be unlikely, particularly in cases
	where the global values are not reinitialized. When a collision does
	occur, the driver goes into a loop, incrementing the number and
	searching for a filename that does not yet exist. This loop does check
	for excessive recursion.

	Deleting will fail on the root node of the SMTP directory because the
	root node is also the node object. Instead, the driver before
	the SMTP driver should be called upon to delete this object.

    D.  Reading and Writing Object Content

	SMTP root nodes are not writeable or readable; however, email objects
	are designed to be relatively transparent to the underlying file.
	Operations passed into smtpRead/smtpWrite are passed through to the
	fdRead/fdWrite functions as is. The file handle is opened when the
	email object is opened, and it points to the MIME message file so that
	the MIME driver can perform reads and writes appropriately.

	Encoding and decoding of emails is performed by the MIME driver.

    E.  Querying for Child Objects

	The only query-able SMTP object is the root node. The email objects
	may be query-able; however, this functionality will be provided by the
	MIME driver.

	When the root node is queried, it opens the spool directory. Each
	subsequent smtpQueryFetch returns the next email object in the spool
	directory. This means that if two root nodes share the same spool
	directory, they will share children emails. Any changes made to the
	children of on such root node will change the children of the other
	root node because the children are actually the same objects. (Though
	the OSML may create a second object because of the OSML pathname
	difference.)

    F.  Managing Object Attributes

	SMTP attributes are stored in a dynamic array so that new attributes
	may be easily integrated into SMTP objects as necessary. Default
	attributes are stored in the global data structure for the SMTP driver
	and/or are calculated on the fly when an object is created (e.g.
	Expire Date).

	While many attributes were specified in the Email_OSDriver.txt
	specifications, only a few attributes actually carry functional weight.
	Following is a list of the specified attributes and the state of
	their implementation:

	1.  NODE ATTRIUTES

	    send_method	    Not yet implemented. Specifies how emails are to
			    be sent. The SMTP driver currently supports only
			    the sendmail utility for sending emails. As a
			    result, this attribute is useless.

	    server	    Not yet implemented. The DNS name or IP address of
			    the server to use when sending via direct-to-MTA
			    SMTP. Not used by sendmail.

	    port	    Not yet implemented. The TCP port to use on the
			    remote server when sending via direct-to-MTA SMTP.
			    Not used by sendmail.

	    spool_dir	    The OSML spool directory that will be used for storing
			    messages that have not yet been sent. This should be a
			    location that supports the storage of arbitrary files.

	    log_dir	    Not yet implemented. The OSML directory in which
			    to place log messages about the success or failure of
			    transmitting email messages. This should be a location
			    that supports the log attributes listed below.

	    log_date_attr   Not yet implemented. The attribute name in which to place
			    the date that the log message was created.

	    log_msgid_attr  Not yet implemented. The attribute name in which to place
			    the Message-ID of the email message being referenced by
			    the log message.

	    log_info_attr   Not yet implemented. The attribute name in which to place
			    the content of the log message itself.

	    ratelimit_time  Not yet implemented. The minimum number of seconds between
			    each email sent. This can be a floating-point value and so
			    can be fractional (such as 0.5 to send at most two emails
			    per second). This defaults to 1 second (60 emails per
			    minute). Since it is not relevant to sendmail, it is
			    not functional.

	    domlimit_time   Not yet implemented. The minimum number of seconds between
			    each email sent to recipients at a given domain name. This
			    defaults to 5 seconds (20 emails per minute).

	2.  EMAIL ATTRIBUTES

	    name	    A unique identifier for this email. Generally is the
			    same as the Message-ID, but with ".eml" or ".msg" appended
			    to thei end, for clarity.

	    message_id	    The Message-ID of the email message being created.

	    env_from	    The envelope From address of the email (return-path).
			    Because of the way the SMTP driver currently uses
			    sendmail, this attribute determines the outgoing From
			    address received by the foreign email server. If this
			    is not set correctly, then the email will be from the
			    user currently running Centrallix. This will generally
			    be blocked by most email receiving servers.

	    env_to	    The envelope recipient (or recipient list) of the email.

	    status	    The status of the email: Draft, Pending, Sent, Error.
			    Status updates are not yet implemented in the SMTP
			    driver. This will be constantly set to Draft.

	    is_ready	    Either 0 (default) to indicate that the email is not
			    ready to be sent or set to 1 to indicate that the email is
			    ready for the SMTP driver to send. When this attribute
			    is set to 1, the SMTP driver immediately spawns a
			    sendmail process to send the email. Setting the
			    attribute to 1 gain will cause another process to be
			    sent. The current implementation is, as such, naive.

	    first_try_date  Not yet implemented. The date/time of the first attempt
			    to send this email.

	    try_until_date  Not yet implemented. The latest that the driver will
			    attempt to send this email.

	    try_count	    Not yet implemented. The number of times that the
			    system has attempted to transmit the message.

	    expire_date	    Not yet implemented. The latest date/time that this
			    driver will retain status information about this email
			    (after that, only the log messages in log_dir will
			    remain available). This defaults to 72 hours (3 days)
			    after the email either permanently failed or was
			    successfully sent. While this attribute is not yet
			    implemented, it is calculated based off of the
			    creation date.

	    last_try_date   Not yet implemented. The date/time of the most recent
			    attempt to send this email.

	    last_try_status Not yet implemented. The status of the last attempt to
			    send this email (None, TempFail, Fail).

	    last_try_msg    Not yet implemented. The message from the last attempt
			    to send; this could be the message the remote SMTP
			    server provided in response to the attempt to send this
			    email.

    G.  Managing Object Methods

	The SMTP driver does not support adding methods.

