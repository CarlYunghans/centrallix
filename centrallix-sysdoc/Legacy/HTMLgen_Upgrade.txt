Document:  DHTML Generator Upgrade Design Specifications
Author:    Greg Beeley (GRB)
Date:      March 10th, 2000
-------------------------------------------------------------------------------

OVERVIEW

    The DHTML Generator the the LightServer component responsible for producing
    DHTML output given a structured widget arrangement and widget definition
    from what is commonly an ".app" file.  In truth, the widget hierarchy need
    not be from a structure file but can be from any hierarchical source, even
    a flat database table as processed by a QueryTree or similar.

    The original DHTML generator was actually implemented as a simplification
    of its original design specification.  This HTMLgen upgrade is designed to
    put that original design back in place as well as adding several other 
    pieces of functionality to enhance the HTMLgen system, the ability for the
    end-user to customize the theme, and the ability for the system to support
    various kinds of browsers.

    The following list details the changes to be made in the HTMLgen system.

        1.  Moving from a two-phase generation model to a three-phase model.
	    This will allow more power and flexibility in the generation of
	    these pages, and it will also likely allow for a performance 
	    improvement in the long run

	2.  Setting up a theme registry.  This will allow for applications to
	    be written that can be easily customized by the end-user to suit
	    his/her tastes, by substitution of the various images in particular
	    that are used to build the widgets, borders, buttons, and 
	    backgrounds.

	3.  A browser-script-function registry that will allow for cross-
	    browser support without writing clumsy and inefficient script
	    functions.  The appropriate functions will be chosen for the 
	    browser being used.


THE THREE-PHASE MODEL

    The original HTML generator used a two-phase generation model.  In this
    model, the first phase was for the widget drivers to access the Object-
    System to read the application's widget structure and attributes, and 
    secondly for the HTML generator to take the generated DHTML components and
    piece them together into a single coherent web page.  While this model of
    DHTML generation was powerful and allowed for the widget drivers to create
    a well-structured web page in a simple environment, it lacked several
    important features that would be needed for long-term development.

    In the three-phase model (actually three-phase is slightly misleading; as
    will be explained, the number of "phases" in the generation of the page
    may not be that simple to calculate), the following basic sequence of 
    events will occur:

	1a. The DHTML generator will read the application hierarchy into an
	    internal structure.  The source will be the objectsystem, and the
	    destination will be a StructInf tree or similar.  All elements of
	    the structure will be flagged as "not analyzed".

	1b. Starting with the top element in the StructInf tree, the
	    appropriate widget driver's Analyze() routine will be called.  That
	    routine will examine the widget's element in the StructInf tree as
	    well as nodes below it, optionally storing driver-specific data in
	    connection with the StructInf element.  Upon such analysis, the
	    element will be marked "analyzed".  The widget driver can then
	    optionally add and delete elements from the StructInf tree; any 
	    new elements should be marked as "not analyzed".

	2.  Once all elements have been Analyzed, the HTMLgen module will call
	    the Render() routines on each driver to generate the HTML.  The
	    HTML will be built up in the htgen session structure just as it was
	    before.

	3.  The HTMLgen module will finally organize and write the HTML output
	    to the http connection.

    Another advantage of this model is that a driver or even a property sheet
    generator will be able to build an application on the fly (via a StructInf
    tree) and have it generated by the DHTML generation system.

-------------------------------------------------------------------------------
