LightServer ObjectSystem Specifications
Author: Greg Beeley
Date: October 26, 1998
-------------------------------------------------------------------------------


I   OBJECTSYSTEM INTERFACE

    This section of this documentation seeks to define the interface to the 
    ObjectSystem.  This is the interface that the Translation layer will use
    to access modules and is nearly identical to the interface that the 
    Translation layer presents to the application/presentation layers of the
    LightServer.

    1.  ObjectSystem Administrative Methods

	objOpenSession(current_dir) -- open a session with the objectsystem.
	The session tracks open objects, a current working directory, and so
	forth.  If current_dir is NULL, then the current dir will be set to
	the opening user's home directory.

	objCloseSession(session) -- close an already-open session with the
	objectsystem.  This will have the side effect of closing any open 
	objects that were opened with that session.

	objInitialize(root_dir) -- initialize the objectsystem with a given
	root directory.

    2.  Generic Object Access Methods

	objOpen(session,path,mode,permission_mask,type) -- open an existing
	object in the objectsystem or open and create a new object.  The 'path'
	param specifies the location of the object.  The 'mode' parameter 
	specifies how it is to be opened -- read, write, read/write, execute, 
	etc.  The 'permission_mask' parameter is normally NULL unless an object
	is being created, in which case it specifies the permissions to give
	the newly created object.  The permissions must be set in the Open 
	method instead of later to prevent race conditions on access to the
	object.  The 'type' parameter specifies the data type with which to
	open the object, such as "text/plain".

	objClose(objfd) -- close an open object.

	objCreate(session, path, permission_mask, type) -- create a new 
	object in the objectsystem with a given type.  The objectsystem
	driver may assign other types to the object, but the type given here
	is considered the most descriptive type or the "base type".

	objDelete(session, path) -- delete an existing objectsystem object.

    3.  Directory Object Access Methods

	objMultiQuery(session, query) -- starts a query that isn't based on
	a single open object but can include references to multiple objects
	and a join mechanism.

	objOpenQuery(objfd, query) -- starts a query on a directory object-
	system object.  The object must be opened with objOpen() first.  The
	query is given as LightServer SQL.  This routine returns an open
	query "descriptor".  The query in SQL may just include the WHERE
	clause, or may be NULL to return all objects in the directory.

	objQueryDelete(queryfd) -- deletes all objects returned in the query
	result set.  This must be called without first doing an objQueryFetch.

	objQueryFetch(queryfd,mode) -- returns one open object descriptor for
	the next object in the query.  The returned descriptor must be closed
	with objClose().  'mode' specifies the mode of open (read/write/etc).

	objQueryClose(queryfd) -- closes an open query.

    4.  Object Content Access Methods

	objRead(objfd, buffer, maxcnt, flags, offset) -- read from the object
	with a given max read count, flags, and optional seek offset.  Not
	all objects support seeking.  Whether to use the seek object or not
	is given as a flag in the 'flags' parameter.

	objWrite(objfd, buffer, cnt, flags, offset) -- write to the object
	with a given count, flags, and optional seek offset.  If the seek 
	offset is given, the seek is done on the object before the write is
	performed.  No ability to seek is provided outside of these read/
	write functions to avoid programmers mistakenly creating race 
	conditions.

    5.  Object Attributes Access Methods

	objGetAttrType(objfd, attrname) -- returns the type of the attribute
	requested.

	objGetAttrValue(objfd, attrname, val) -- sets 'val' to the contents 
	of the attribute.

	objGetFirstAttr(objfd) -- returns the name of the first attribute.

	objGetNextAttr(objfd) -- returns the name of the next attribute.  Use
	this in conjunction with objGetFirstAttr() to enumerate the 
	attributes of a given object.  One must be aware that the special
	object attribute names 'types' and 'name' will not be returned by
	this enumeration process.

	objSetAttrValue(objfd, attrname, val) -- sets the contents of the 
	attribute to 'value'.  Example -- to rename an object, just use
	this method.  Since the 'name' attribute always exists, we don't
	have to worry about it not existing.  Run the following command:
	objSetAttrValue(objfd, "name", "MyNewObjectName");

	objAddAttr(objfd, attrname, type, val) -- adds a new attribute and 
	sets its value.  This function not valid on objects that don't let
	the user define new attributes.  

	objOpenAttr(objfd, attrname, mode) -- open an attribute as if it were
	an object with content.  Instead of doing objSetAttrValue or 
	objGetAttrValue, the caller can then use objRead and objWrite to access
	the attribute's contents.

    6.  Object Method Execution

	objGetFirstMethod(objfd) -- returns the name of the first method on
	the object.

	objGetNextMethod(objfd) -- returns the name of the next method on
	the given object.  Use this in conjunction with objGetFirstMethod to
	enumerate the methods.

	objExecuteMethod(objfd, methodname, param) -- execute a method on an
	object, with an optional input or output parameter.


II  OBJECTSYSTEM DRIVERS

    The objectsystem will have a number of different drivers that handle a
    wide variety of datatypes.  The simplest driver will be the pass-through
    driver to the UNIX filesystem, a driver which will probably be implemented
    first.

    Most of the objectsystem routines will also be implemented by the various
    drivers, and the objectsystem will simply pass the method through to the
    underlying driver for the object type opened.  The exceptions to these
    routines would be the session routines -- none of them would be implemented
    by the objectsystem drivers, which are not concerned about a user's session
    but only about open objects and queries.

    Not all objectsystem drivers will implement intelligent query processing.
    When drivers don't implement such, the objectsystem layer will simply
    issue an unqualified query (no where clause) to the driver and then perform
    the needed filtering itself.  Other objectsystem drivers may implement
    intelligent query processing, especially if the physical network object
    being accessed supports such (as with a database system).

    Objectsystem drivers will not implement the objMultiQuery routine, which
    operates at a much higher level of abstraction.

    Objectsystem drivers will be required to register themselves with the
    objectsystem and provide a list of base content types that such an 
    objectsystem driver will handle at its top level.  That is, a driver for
    accessing a pop3 mailbox will handle objects of base type 'network/pop3'
    at the top level, but perhaps other object types at a lower level, such
    as 'message/rfc822'.  

    The Translation layer will have an objectsystem driver for its Translation
    object.

    The ObjectSystem will be internally aware of the Query and QueryTree object
    types.
