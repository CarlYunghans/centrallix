Document:  OSML open-as/is-a/rootnode upgrade
Author:    Greg Beeley (GRB)
Date:      November 18th, 1999
-------------------------------------------------------------------------------

INTRODUCTION

    This document describes the changes that will take place in the OSML as a
    part of the open-as/is-a/rootnode upgrade, which will allow for far more
    flexibility in the management of the OSML's objects and drivers, including
    translation drivers and the layering of functionality when opening objects.


BASIC CHANGES

    The basic changes in this upgrade are as follows:

        1.  When an objectsystem driver accesses its node object, it must go
	    through a pObject reference and use objRead() instead of opening
	    a plain file using pFile and fdRead().  This also means that, for
	    some node objects, seeking in the node object will fail and thus
	    the driver (and its utility routines) must read the node object as
	    a stream, and write it as a stream.  The open pObject will be
	    passed to the objectsystem driver's open() call.

	2.  The root of the objectsystem will not be automatically a UNIX
	    directory.  Instead, there will be a "rootnode" file referenced
	    when LightServer is started that will be used as a node object and
	    passed to an appropriate driver that will handle the root of the
	    objectsystem.  The rootnode file will be a plain UNIX file.  As a
	    result of this change, it is possible to root the objectsystem in
	    almost any object type, including a table, database, email folder,
	    and so forth.

	3.  Gone are the days of depending on filename extensions to determine
	    a node object's appropriate type (such as .struct == structure file
	    and .csv == CSV file).  Instead, a table of expressions will be 
	    used to determine the type.  These expressions will operate on the
	    name of the object in question.  Thus, it will be possible to 
	    determine an object type from other characteristics of its name,
	    such as "appJNetHelp" as an application if an application's 
	    qualifier expression is "substring(:name,1,3) == 'app'".  Of course
	    extensions may still be used, as in "right(:name,4) == '.app'".  
	    The presence of a .type object in the same directory will also be 
	    recognized.

	4.  An objectsystem driver need not "consume" all components of the 
	    pathname following the node object.  Instead, it should handle the
	    largest part of the pathname following the node object that is
	    possible for it to do, indicate "how far it got", and return that
	    open object.  If there were more elements unused in the path, then
	    the OSML will search for another driver to handle the remainder.

	    Example:

	        /datasources/OMSS_DB/Mailboxes/rows/1/18fe56-32c45

		^            ^                      ^
		|            |                      +-- message.rfc822
		|            |
		|            +-- system.database
		|
		+-- system.directory (rootnode)

	5.  Elements of the pathname can now include specifications to indicate
	    how the object in question should be opened.  For example, to
	    open OMSS_DB in the above example as a text data stream, the
	    following can be used:

	        /datasources/OMSS_DB{text.plain}/

	6.  The manner in which object and content typing is currently done 
	    will change.  Because of the possibility of having the drivers
	    "stacked" several layers deep in some cases, the "content_type" has
	    to reflect the type of the "topmost" item in the stack.  It may be
	    possible to setup the content_type attribute as a stringvec instead
	    of a string, and include all content-types as applicable, such as
	    "system/row","system/report","text/html".  In such a case, the OSML 
	    would need to call the os drivers in succession, and compile the
	    list of types.

	7.  Some object types must be considered "mandatory driver open" and
	    some "optional driver open".  Furthermore, this automatic vs 
	    optional behavior should be configurable on a per-user or per-
	    session basis.  For example, most people would intend to generate
	    a report when they open a system/report structure file, and thus
	    the report driver must be invoked automatically unless the open
	    pathname explicitly indicates that the open should stop at the
	    plain file or structure file level and not invoke the reporting
	    driver.  In other cases, a developer may always intend to open
	    a report as a plain file or structure file, not to generate the
	    actual report results.  In that case, the reporting driver should
	    not be automatically invoked.

	8.  If for some reason it should occur that a given object type is
	    encountered twice at the same path position during the object
	    opening process, there must be a mechanism for the end-user to
	    indicate which level to stop at.  Two mechanisms will be 
	    provided.  The first simply indicates which level to stop opening
	    at, and the second indicates which occurrence of a given type to
	    stop opening at:

	        /datasources/OMSS_DB{0}

		    -- or --

		/datasources/OMSS_DB{text.plain.0}

	9.  A difference will finally be made between a normal objectsystem
	    driver and a translation driver.  The basic differences are listed
	    below:

	        1.  A normal driver is usually automatically invoked.
		    A translation driver usually has to be specified by type.

		2.  A normal driver is typically uniquely able to handle the
		    specific type in question.
		    A translation driver may be one of many drivers able to do
		    something with a given type of object.

		3.  A normal driver typically handles only a narrow range, or
		    even one specific type of object.
		    A translation driver may be able to handle a diverse spread
		    of types of objects.

	10. It should be possible for a driver, especially translation drivers,
	    to specify an expression that, when evaulated on the content-type
	    in question, can indicate that the driver can handle that type. For
	    translation drivers, the expression would need to provide for both
	    the source and destination types.  Efficiency, however, needs to be
	    taken into consideration -- the current structure uses an efficient
	    hash lookup.  It may work to cache type-driver results of the 
	    expression evaluations, and keep, say, the most recent couple dozen 
	    evaluations.

	11. With the new chained-object open structuring, it will be possible
	    for a driver to pass-through calls to the next driver down the 
	    chain.  For example, an html app driver might pass object queries
	    on to the structure file driver, so the underlying structure of
	    the app can be made visible without specifically referencing the
	    structure file driver alone.


EXAMPLE OSML OPEN

    This section provides a description of the procedure the OSML will go 
    through to open a fairly complex pathname.  Given the following pathname:

        /datasources/OMSS_DB/MailBoxes/rows/1/1234-5678@om.org/1/

    This pathname contains the following object records:

        /				(rootnode, UXD)
	datasources/OMSS_DB/		(SYBD node object)
	OMSS_DB/Mailboxes/rows/1/	(MailFolder node object)
	1/1234-5678@om.org/		(Mail message node object)
	1234-5678@om.org/1/		(end: image/gif attachment)

    In this example, the objectsystem is rooted at /.  The information about
    this node is given in rootnode.uxd, which points to an appropriate
    directory on the server.  The OSML then calls the UXD driver with the 
    entire pathname.

    The UXD driver then starts stat()ing directories and files until it 
    determines that it can only process the open through OMSS_DB.  It notes
    such in the return from the open call.

    The OSML notes that the entire path has not been opened, and then attempts
    to determine the type of OMSS_DB.  First, it processes the name using the
    name-comparison expressions and extension data from types.cfg.  If it 
    cannot find a type match, it attempts to open "/datasources/.type".  If it
    succeeds, then the type is read from the .type file.  If the type is not
    found, the object is opened as a generic application/octet-stream.

    In any case, the OSML then caches the pathname-type information in a 
    directory type cache table, looks up the appropriate driver for that
    type, and then passes on the open call to that driver, in this case that
    driver would be the Sybase driver (SYBD).  The same process is then
    repeated.

    It is possible for a driver not to "consume" any part of the path, though
    this is not shown in this example.  In such a manner the OSML can progress
    through several layers of drivers before progressing forward in the path
    elements.


SPECIFIC CHANGES - PHASE 1

    1.  The configuration file types.cfg format will change to having one 
        additional field:  name-match expression, which will be the fourth
	column.  The fifth column will take on a new meaning, and will 
	represent the closest more generic object type that the listed type is
	related to.  For instance a "text/plain" -> "application/octet-stream".
	The types.cfg file will be located at:

	    /usr/local/etc/types.cfg

    2.  A rootnode file will be read.  A default one will be specified in the
        obj.h header file, but a new one should be eventually able to be given
	on the command line.  The default rootnode, and the file containing its
	type:

	    /usr/local/etc/rootnode
	    /usr/local/etc/rootnode.type

    3.  Some of the functionality in obj_object.c will need to be moved into
        objdrv_ux.c.  This functionality includes the logic to trace the path
	into the various directories and determine when a different node file
	has been reached that needs to be passed on to another driver via the
	OSML.

    4.  A mechanism must be provided to chain Object structures together so
        that there can be one per driver instance involved in the opening of
	the object.  The Object structure must have double-linkages so that 
	the chain can be followed both forward and backwards.  When a driver
	needs to use the node object to, for instance, read a config file,
	it will use the ->Prev pointer, and when the OSML needs to determine
	the next driver to call, it uses the ->Next pointer.  The SubPtr
	value will still be valid and will indicate the first component of the
	path the current driver is handling.  A new field will be added also
	to the Object structure to indicate the _number_ of path elements the
	driver "consumed".  This value is 1-based, so a value of 1 indicates
	that the driver used the element indicated by SubPtr and no more.

    5.  When a driver is to open an object, it will be handed an Object pointer
        just as was done previously.  The SubPtr value will already have been
	set by the OSML.  The driver will set SubCnt as indicated above.

    6.  The driver will have to use the ->Prev pointer to read object data 
        instead of getting that information via a pFile file descriptor or
	using fdOpen() on the pathname.

    7.  A driver should have some way of either 1) determining the types of
        its open object and subobjects, or 2) getting the name right so that
	the OSML can determine the types.

    8.  The OSML will need to not only look up names of objects in the filename
        extension table, but also through the type-expression mechanism, as 
	indicated by (1) above.  The DirectoryCache hash table will now store
	cached data about types so that a full expression evaluation need not
	be done on every path.  However, such type information will only be
	looked up via the directory cache table if not found first in the 
	extension table:

	    1.  If this is an intermediate-open, ask the previous-open driver
	        what the type is.  If given, don't cache but finished.
	    2.  Attempt to lookup the extensions in the extension table to get
	        the type of the object.  If found, don't cache but finished.
	    3.  If not found, check the pathname against the directory cache
	        information to find the type; if found there, finished.
	    4.  If _still_ not found, evaluate against all expressions in the
	        type-name-expression table until one works.  If it works, add
		the entry to the directory cache as in (2) above.
	    5.  If _still_ not found, check for a .type object in the same
	        directory as the given object.  If a .type object exists, read
		it to find the type for the object, and cache it as in (2)
		above.
	    6.  If still nothing, treat the object as application/octet-stream
	        and proceed from there.  Cache the object type as such.


SPECIFIC CHANGES - PHASE 2

    1.  Allow for per-path-element modifiers to control how the process of
        opening an object occurs.  These controls operate as follows:

	/path_element/		   - open the path element normally, with the
				     system default type specification 
				     mechanisms.
	/path_element?ls__type=x/  - open the path element with the given 
				     object type.  Note that if the content
				     type has a '/' in it, it will need to be
				     encoded using %xx.  For simplicity, a '.'
				     in the type will automatically be changed
				     to a '/'.
	/path_element?param=value/ - assign a parameter a value during the open
				     operation on the object.  Using ?=&= is
				     normal during HTTP opens, but lightserver
				     also allows ?=&= on path sub-elements as
				     well.

    2.  The open procedure when a ls__type is specified for a pathname element
        is as follows:

	    1.  After determining the type of the node in (8) in phase 1 above,
	        check to see if the ls__type has a direct is-a relationship to
		the determined type.  If so, use a DIFFERENT driver for doing
		the next intermediate open, according to the types.cfg file.
		Set the type of the object to the more general or more specific
		type, accordingly.  Then, finished.
	    2.  Do the open on the element normally, passing the ls__type 
	        information to the driver to handle the open.  Then, get the
		type as in section (8) in phase 1 above.  If it matches the
		ls__type, or if it has a direct is-a relationship to the 
		ls__type, set the type accordingly and finish the open.
	    3.  Otherwise, take the determined (source) type and the ls__type
	        (destination type), and search the type translation table in
		the OSML (OSYS structure) to find a driver that will perform 
		the translation to the destination type.  If found, do another
		intermediate open using the translating driver.
	    4.  If none found for source -> destination, attempt to match all
	        more generic is-a related types to source against the given
		destination, going from specific to generic types.  If one is
		found, proceed as in (3) above.

    3.  The open procedure when a param=value is specified in the pathname 
        element is as follows:

	    1.  Before the opens are performed, compile the ?=&= values into
	        structinf structures containing the parsed values.
	    2.  Perform the open as normally done, according to the above
	        rules.
	    3.  Drivers recognizing parameters in the open call should scan
	        the associated structinf structures for the parameter info.

-------------------------------------------------------------------------------
