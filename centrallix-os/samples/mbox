From MAILER-DAEMON Tue Nov  5 11:39:27 2002
Date: Tue, 5 Nov 2002 11:39:27 -0500 (EST)
From: Mail System Internal Data <MAILER-DAEMON@gabriel.css.tayloru.edu>
Subject: DON'T DELETE THIS MESSAGE -- FOLDER INTERNAL DATA
X-IMAP: 1014745345 0000001689
Status: RO

This text is part of the internal format of your mail folder, and is not
a real message.  It is created automatically by the mail system software.
If deleted, important folder data will be lost, and it will be re-created
with the data reset to initial values.

From Owner-HyperNews@gabriel.css.tayloru.edu  Tue Oct  1 08:06:01 2002
Return-Path: <Owner-HyperNews@gabriel.css.tayloru.edu>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (mary.css.tayloru.edu [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 9CA281A942; Tue,  1 Oct 2002 08:05:57 -0500 (EST)
Received: from gabriel.css.tayloru.edu (gabriel.css.tayloru.edu [192.195.249.26])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 6A3761A93B; Tue,  1 Oct 2002 08:05:54 -0500 (EST)
Received: (from nobody@localhost)
	by gabriel.css.tayloru.edu (8.9.3/8.9.3) id IAA15995;
	Tue, 1 Oct 2002 08:05:53 -0500
Date: Tue, 1 Oct 2002 08:05:53 -0500
X-Authentication-Warning: gabriel.css.tayloru.edu: nobody set sender to Owner-HyperNews using -f
To: HyperNews@gabriel.css.tayloru.edu
From: "Bill Toll - Admin" <btoll@css.tayloru.edu>
Content-Type: text/plain; charset=iso-8859-1
X-HN-Forum: COS 312 - Visualization and GIS
Subject: VisGIS Groups - final version
Message-ID: <"/forums/cos312/34"@www.css.tayloru.edu>
X-Mailer: HyperNews at www.css.tayloru.edu 1.9.7
X-Hn-Loop: http://www.css.tayloru.edu/HyperNews/get/forums/cos312/34.html
Precedence: list
Errors-To: Owner-HyperNews@gabriel.css.tayloru.edu
Newsgroups: http://www.css.tayloru.edu/HyperNews/get/forums/cos312.html
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: 
X-Keywords:
X-UID: 1615

Visit this HyperNews at www.css.tayloru.edu message (to reply or unsubscribe) at: 
http://www.css.tayloru.edu/HyperNews/get/forums/cos312/34.html

cos312f0201
jeeastbu
jefoote
nhepp

cos312f0202
bcarl
jchapman
jorupp

cos312f0203
csurguin
pveen
abottum

cos312f0204
kdufenda
espauldi
ansteven

cos312f0205
bhillesl
bjohnson
soverton

cos312f0206
adgriffi
bsmith
branfeld

cos312f0207
bchacko
deisinge
jrogers

cos312f0208
dataylor
nmaier
whobbs

cos312f0209
droeber
dstanley
swilliam

cos312f02010
jkragnes
jmange
ipelleri


-------------------------------------------------------------
Visit this HyperNews at www.css.tayloru.edu message (to reply or unsubscribe) at: 
http://www.css.tayloru.edu/HyperNews/get/forums/cos312/34.html

From dstanley@mark.css.tayloru.edu  Wed Oct  9 23:42:24 2002
Return-Path: <dstanley@mark.css.tayloru.edu>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (mary.css.tayloru.edu [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP id 4E2121A936
	for <jorupp@css.tayloru.edu>; Wed,  9 Oct 2002 23:42:23 -0500 (EST)
Received: from mark.css.tayloru.edu (mark.css.tayloru.edu [172.30.1.22])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP id A248F1A91A
	for <jorupp@css.tayloru.edu>; Wed,  9 Oct 2002 23:42:19 -0500 (EST)
Received: (from dstanley@localhost)
	by mark.css.tayloru.edu (8.11.6/8.11.6) id g9A4gJu22549
	for jorupp@css.tayloru.edu; Wed, 9 Oct 2002 23:42:19 -0500
Date: Wed, 9 Oct 2002 23:42:19 -0500
From: David Stanley <dstanley@mark.css.tayloru.edu>
To: jorupp@css.tayloru.edu
Subject: fractions
Message-ID: <20021009234219.A22546@mark.css.tayloru.edu>
Mime-Version: 1.0
Content-Type: multipart/mixed; boundary="82I3+IH0IqGh5yIs"
Content-Disposition: inline
User-Agent: Mutt/1.2.5.1i
X-Virus-Scanned: by AMaViS snapshot-20020300
Content-Length: 131769
Lines: 1724
Status: RO
X-Status: 
X-Keywords:
X-UID: 1629


--82I3+IH0IqGh5yIs
Content-Type: text/plain; charset=us-ascii
Content-Disposition: inline

here you go

--82I3+IH0IqGh5yIs
Content-Type: application/x-tar
Content-Disposition: attachment; filename="fractions.tar"
Content-Transfer-Encoding: quoted-printable

fractions/fraction_test_main.adb=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=000100644=000003325=000000144=0000000120324=0007550224266=0001714=
3=00 0=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00ustar  =00dstanley=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00users=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00-- Test program fo=
r fractions library=0D=0A-- %s/input/input/g=0D=0A-- %s/output/output/g=0D=
=0A=0D=0Awith =0D=0A	ada.text_io, =0D=0A	Ada.Integer_Text_IO,=0D=0A	Ada.Flo=
at_Text_IO,=0D=0A	fractions,=0D=0A	Ada.Exceptions,=0D=0A	Ada.Command_Line,=
=0D=0A	Ada.Strings.Unbounded,=0D=0A	Ada.Strings.Unbounded.Text_IO=0D=0A	;=
=0D=0Ause =0D=0A	ada.text_io, =0D=0A	Ada.Integer_Text_IO,=0D=0A	Ada.Float_T=
ext_IO,=0D=0A	fractions,=0D=0A	Ada.Exceptions,=0D=0A	Ada.Command_Line,=0D=
=0A	Ada.Strings.Unbounded,=0D=0A	Ada.Strings.Unbounded.Text_IO=0D=0A	; =0D=
=0A=0D=0A=0D=0Aprocedure fraction_test_main is =0D=0A	str:Unbounded_String;=
=0D=0A	str2:Unbounded_String;=0D=0A	test_name:Unbounded_String;=0D=0A	chang=
e_test_indicator:constant Unbounded_String :=3D To_Unbounded_String("=3D=3D=
=3D=3D");=0D=0A	debug: Integer :=3D 2;=0D=0A	Invalid_Operation:Exception;=
=0D=0A	No_Error:Exception;=0D=0A	type BinaryOpType is (plus,minus,multiply,=
divide,remainder);=0D=0A	type UnaryOpType is (plus,minus,absolute,inverse,n=
oop,frac2);=0D=0A	type UnaryIntOpType is (numerator,denominator,int);=0D=0A=
	type CustomIOType is (file,std);=0D=0A	type CompType is (eq,gt,lt,ge,le);=
=0D=0A	type TestRecord is record Line: Integer; Name: Unbounded_String; end=
 record;=0D=0A	PassedTests: array(1..300) of TestRecord;=0D=0A	FailedTests:=
 array(1..300) of TestRecord;=0D=0A	NumPassedTests:Integer:=3D0;=0D=0A	NumF=
ailedTests:Integer:=3D0;=0D=0A	input:File_Type;=0D=0A	output:File_Type;=0D=
=0A	test_line_number:Integer;=0D=0A	junk_var:Positive;=0D=0A	i1,i2,i3,i4,i5=
,i6:Integer;=0D=0A	f1,f2,f3:Fraction_Type;=0D=0A	flt1:Float;=0D=0A	file1:Un=
bounded_String;=0D=0A=0D=0A	function abv(f: in float) return float=0D=0A	is=
=0D=0A	begin=0D=0A		if f < 0.0 then=0D=0A			return -f;=0D=0A		else=0D=0A			=
return f;=0D=0A		end if;=0D=0A	end;=0D=0A=0D=0A	function=0D=0A	AlmostEqual(=
f1: in float; f2: in float) return boolean=0D=0A	is=0D=0A		f3:float;=0D=0A	=
begin=0D=0A		f3:=3Dabv(f1-f2);=0D=0A=0D=0A		-- return true if the differenc=
e is within 5 orders of magnitude of=0D=0A		--   either input or is 0.0=0D=
=0A		if (f3 < abv(f1)/1.0e5 and f3 < abv(f2)/1.0e5) or f3=3D0.0 then=0D=0A	=
		return true;=0D=0A		else=0D=0A			return false;=0D=0A		end if;=0D=0A	end;=
=0D=0A=0D=0A=0D=0A	function GetUnaryOp=0D=0A		(op: in UnaryOpType) return U=
nbounded_String=0D=0A	is=0D=0A	begin=0D=0A		case op is=0D=0A			when plus =
=3D>=0D=0A				return To_Unbounded_String("+");=0D=0A			when minus =3D>=0D=
=0A				return To_Unbounded_String("-");=0D=0A			when absolute =3D>=0D=0A			=
	return To_Unbounded_String("ABS");=0D=0A			when inverse =3D>=0D=0A				retu=
rn To_Unbounded_String("INVERSE");=0D=0A			when noop =3D>=0D=0A				return T=
o_Unbounded_String("NOOP");=0D=0A			when frac2 =3D>=0D=0A				return To_Unbo=
unded_String("NOOP");=0D=0A			when others =3D>=0D=0A				raise Invalid_Opera=
tion;=0D=0A		end case;=0D=0A	end;=0D=0A=0D=0A	function DoUnaryOp=0D=0A		(op=
: in UnaryOpType;=0D=0A		 f1: in Fraction_Type) return Fraction_Type=0D=0A	=
is=0D=0A	begin=0D=0A		case op is=0D=0A			when plus =3D>=0D=0A				return +f1=
;=0D=0A			when minus =3D>=0D=0A				return -f1;=0D=0A			when absolute =3D>=
=0D=0A				return ABS(f1);=0D=0A			when inverse =3D>=0D=0A				return INVERSE=
(f1);=0D=0A			when noop =3D>=0D=0A				return f1;=0D=0A			when frac2 =3D>=0D=
=0A				return f1;=0D=0A			when others =3D>=0D=0A				raise Invalid_Operation=
;=0D=0A		end case;=0D=0A	end;=0D=0A=0D=0A	function DoUnaryOp=0D=0A		(op: in=
 UnaryOpType;=0D=0A		 f1: in float) return float=0D=0A	is=0D=0A	begin=0D=0A=
		case op is=0D=0A			when plus =3D>=0D=0A				return +f1;=0D=0A			when minus=
 =3D>=0D=0A				return -f1;=0D=0A			when absolute =3D>=0D=0A				return ABS(f=
1);=0D=0A			when inverse =3D>=0D=0A				return float(1)/f1;=0D=0A			when noo=
p =3D>=0D=0A				return f1;=0D=0A			when frac2 =3D>=0D=0A				return f1;=0D=
=0A			when others =3D>=0D=0A				raise Invalid_Operation;=0D=0A		end case;=
=0D=0A	end;=0D=0A=0D=0A	function DoUnaryIntOp=0D=0A		(op: in UnaryIntOpType=
;=0D=0A		 f1: in Fraction_Type) return Integer=0D=0A	is=0D=0A	begin=0D=0A		=
case op is=0D=0A			when numerator =3D>=0D=0A				return NUMERATOR(f1);=0D=0A=
			when denominator =3D>=0D=0A				return DENOMINATOR(f1);=0D=0A			when int =
=3D>=0D=0A				return INT(f1);=0D=0A			when others =3D>=0D=0A				raise Inval=
id_Operation;=0D=0A		end case;=0D=0A	end;=0D=0A=0D=0A=0D=0A	function GetBin=
aryOp=0D=0A		(op:in BinaryOpType) return Unbounded_String is=0D=0A	begin=0D=
=0A		case op is=0D=0A			when plus =3D>=0D=0A				return To_Unbounded_String(=
"+");=0D=0A			when minus =3D>=0D=0A				return To_Unbounded_String("-");=0D=
=0A			when multiply =3D>=0D=0A				return To_Unbounded_String("*");=0D=0A			=
when divide =3D>=0D=0A				return To_Unbounded_String("/");=0D=0A			when rem=
ainder =3D>=0D=0A				return To_Unbounded_String("REM");=0D=0A			when others=
 =3D>=0D=0A				raise Invalid_Operation;=0D=0A		end case;=0D=0A	end;=0D=0A=
=0D=0A	function DoBinaryOp=0D=0A		(f1:in Fraction_Type;=0D=0A		 op:in Binar=
yOpType;=0D=0A		 f2:in Fraction_Type) return Fraction_Type is=0D=0A	begin=
=0D=0A		case op is=0D=0A			when plus =3D>=0D=0A				return f1+f2;=0D=0A			wh=
en minus =3D>=0D=0A				return f1-f2;=0D=0A			when multiply =3D>=0D=0A				re=
turn f1*f2;=0D=0A			when divide =3D>=0D=0A				return f1/f2;=0D=0A			when re=
mainder =3D>=0D=0A				return f1 REM f2;=0D=0A			when others =3D>=0D=0A				r=
aise Invalid_Operation;=0D=0A		end case;=0D=0A	end;=0D=0A=0D=0A	function Do=
BinaryOp=0D=0A		(f1:in float;=0D=0A		 op:in BinaryOpType;=0D=0A		 f2:in flo=
at) return float is=0D=0A	begin=0D=0A		case op is=0D=0A			when plus =3D>=0D=
=0A				return f1+f2;=0D=0A			when minus =3D>=0D=0A				return f1-f2;=0D=0A		=
	when multiply =3D>=0D=0A				return f1*f2;=0D=0A			when divide =3D>=0D=0A		=
		return f1/f2;=0D=0A			when remainder =3D>=0D=0A				return (f1/f2)-Float(I=
nteger(f1/f2));=0D=0A			when others =3D>=0D=0A				raise Invalid_Operation;=
=0D=0A		end case;=0D=0A	end;=0D=0A=0D=0A	function DoComp=0D=0A		(f1:in Frac=
tion_Type;=0D=0A		 op:in CompType;=0D=0A		 f2:in Fraction_Type) return Bool=
ean is=0D=0A	begin=0D=0A		case op is=0D=0A			when eq =3D>=0D=0A				return f=
1 =3D f2;=0D=0A			when gt =3D>=0D=0A				return f1 > f2;=0D=0A			when lt =3D=
>=0D=0A				return f1 < f2;=0D=0A			when ge =3D>=0D=0A				return f1 >=3D f2;=
=0D=0A			when le =3D>=0D=0A				return f1 <=3D f2;=0D=0A			when others =3D>=
=0D=0A				raise Invalid_Operation;=0D=0A		end case;=0D=0A	end;=0D=0A=0D=0A	=
function DoComp=0D=0A		(f1:in float;=0D=0A		 op:in CompType;=0D=0A		 f2:in =
float) return Boolean is=0D=0A	begin=0D=0A		case op is=0D=0A			when eq =3D>=
=0D=0A				return f1 =3D f2;=0D=0A			when gt =3D>=0D=0A				return f1 > f2;=
=0D=0A			when lt =3D>=0D=0A				return f1 < f2;=0D=0A			when ge =3D>=0D=0A		=
		return f1 >=3D f2;=0D=0A			when le =3D>=0D=0A				return f1 <=3D f2;=0D=0A=
			when others =3D>=0D=0A				raise Invalid_Operation;=0D=0A		end case;=0D=
=0A	end;=0D=0A=0D=0A	function GetComp=0D=0A		(op:in CompType) return Unboun=
ded_String is=0D=0A	begin=0D=0A		case op is=0D=0A			when eq =3D>=0D=0A				r=
eturn To_Unbounded_String("=3D");=0D=0A			when gt =3D>=0D=0A				return To_U=
nbounded_String(">");=0D=0A			when lt =3D>=0D=0A				return To_Unbounded_Str=
ing("<");=0D=0A			when ge =3D>=0D=0A				return To_Unbounded_String(">=3D");=
=0D=0A			when le =3D>=0D=0A				return To_Unbounded_String("<=3D");=0D=0A			=
when others =3D>=0D=0A				raise Invalid_Operation;=0D=0A		end case;=0D=0A	e=
nd;=0D=0A=0D=0A	procedure Dump=0D=0A	is=0D=0A	begin=0D=0A		put(output," ");=
=0D=0A		put(output,f1);=0D=0A		put(output," ");=0D=0A		put(output,f2);=0D=
=0A		put(output," ");=0D=0A		put(output,f3);=0D=0A		put(output," ");=0D=0A	=
	put(output,i1,4);=0D=0A		put(output," ");=0D=0A		put(output,i2,4);=0D=0A		=
put(output," ");=0D=0A		put(output,i3,4);=0D=0A		put(output," ");=0D=0A		pu=
t(output,i4,4);=0D=0A		put(output," ");=0D=0A		put(output,i5,4);=0D=0A		put=
(output," ");=0D=0A		put(output,i6,4);=0D=0A		put(output," ");=0D=0A		put(o=
utput,flt1);=0D=0A		put(output," ");=0D=0A	end;=0D=0A=0D=0A	procedure Check=
Test=0D=0A		(test_name: in Unbounded_String;=0D=0A		res: in boolean)=0D=0A	=
is=0D=0A	begin=0D=0A		if res then=0D=0A			NumPassedTests:=3DNumPassedTests+=
1;=0D=0A			PassedTests(NumPassedTests).Line:=3Dtest_line_number;=0D=0A			Pa=
ssedTests(NumPassedTests).Name:=3Dtest_name;=0D=0A			if debug > 0 then=0D=
=0A				put(output,test_line_number,4);=0D=0A				put(output,": ");=0D=0A				=
Dump;=0D=0A				put_line(output,"test passed -- " & test_name);=0D=0A			end =
if;=0D=0A		else=0D=0A			NumFailedTests:=3DNumFailedTests+1;=0D=0A			FailedT=
ests(NumFailedTests).Line:=3Dtest_line_number;=0D=0A			FailedTests(NumFaile=
dTests).Name:=3Dtest_name;=0D=0A			if debug > 0 then=0D=0A				put(output,te=
st_line_number,4);=0D=0A				put(output,": ");=0D=0A				Dump;=0D=0A				put_l=
ine(output,"test failed -- " & test_name);=0D=0A			end if;=0D=0A		end if;=
=0D=0A	end;=0D=0A=0D=0A	procedure Check_Error=0D=0A		(test_name: in Unbound=
ed_String;=0D=0A		E: in Exception_Occurrence;=0D=0A		expected_error: in Unb=
ounded_String)=0D=0A	is=0D=0A	begin=0D=0A		CheckTest(test_name,Ada.Exceptio=
ns.Exception_Name(E) =3D expected_error);=0D=0A		if Ada.Exceptions.Exceptio=
n_Name(E) /=3D expected_error and debug > 1=0D=0A		then=0D=0A			put(output,=
Ada.Exceptions.Exception_Name(E));=0D=0A			put(output," !=3D ");=0D=0A			pu=
t_line(output,expected_error);=0D=0A		end if;=0D=0A	end;=0D=0A=0D=0A	proced=
ure Test_Fraction=0D=0A		(name: in Unbounded_String)=0D=0A	is=0D=0A	begin=
=0D=0A		if debug>1 then put_line(output,"starting " & name); end if;=0D=0A	=
	loop=0D=0A			test_line_number:=3DInteger(LINE(input));=0D=0A			declare=0D=
=0A				-- i1,i3,i4:Integer;=0D=0A				-- f1,f2:Fraction_Type;=0D=0A			begin=
=0D=0A				test_name:=3DGet_Line(input);=0D=0A				Get(input,i1);=0D=0A				--=
 consume the newline and equal sign=0D=0A				str:=3DGet_Line(input);=0D=0A	=
			str:=3DGet_Line(input);=0D=0A				begin=0D=0A					Get(input,i3);=0D=0A			=
		Get(input,i4);=0D=0A					f1:=3DFRACTION(i1);=0D=0A					f2:=3Di3/i4;=0D=0A=
					CheckTest(test_name,f1 =3D f2);=0D=0A					-- consume the extra newline=
=0D=0A					str:=3DGet_Line(input);=0D=0A				-- a DATA_ERROR exception will =
be thrown if there wasn't a number to read (like an exception expected)=0D=
=0A				exception=0D=0A					when DATA_ERROR =3D>=0D=0A						-- Get the expec=
ted exception=0D=0A						str:=3DGet_Line(input);=0D=0A						begin=0D=0A				=
			f1:=3DFRACTION(i1);=0D=0A							raise No_Error;=0D=0A						exception=0D=
=0A							when E : others =3D>=0D=0A								Check_Error(test_name,E,str);=
=0D=0A						end;=0D=0A					when E : others =3D>=0D=0A						Check_Error(test=
_name,E,To_Unbounded_String("No_Error"));=0D=0A						while(str /=3D To_Unbo=
unded_String("")) loop=0D=0A							str:=3DGet_Line(input);=0D=0A						end l=
oop;=0D=0A				end;=0D=0A			exception=0D=0A				when DATA_ERROR =3D>=0D=0A			=
		put(output,"unable to read near line: ");=0D=0A					put(output,Integer(LI=
NE(input)));=0D=0A					new_line(output);=0D=0A			end;=0D=0A			-- grab the n=
ext line=0D=0A			str:=3DGet_Line(input);=0D=0A			-- check for the 'change_t=
est' indicator=0D=0A			if str =3D change_test_indicator then exit; end if;=
=0D=0A		end loop;=0D=0A		if debug>1 then put_line(output,"done with " & nam=
e); end if;=0D=0A	end;=0D=0A=0D=0A	procedure Test_IO=0D=0A		(iokind: in Fil=
e_Mode;=0D=0A		iotype: in CustomIOType;=0D=0A		name: in Unbounded_String)=
=0D=0A	is=0D=0A	begin=0D=0A		if debug>1 then put_line(output,"starting " & =
name); end if;=0D=0A		loop=0D=0A			test_line_number:=3DInteger(LINE(input))=
;=0D=0A			declare=0D=0A				-- i1,i2,i3,i4:Integer;=0D=0A				-- f1,f2:Fracti=
on_Type;=0D=0A				-- file1:Unbounded_String;=0D=0A				fileobj:File_Type;=0D=
=0A			begin=0D=0A				test_name:=3DGet_Line(input);=0D=0A				if(iokind=3DOut=
_File) then=0D=0A					get(input,i1);=0D=0A					get(input,i2);=0D=0A					str=
:=3DGet_Line(input);=0D=0A				end if;=0D=0A				file1:=3DGet_Line(input);=0D=
=0A				if(iokind=3DIn_File) then=0D=0A					begin=0D=0A						get(input,i1);=
=0D=0A						get(input,i2);=0D=0A					exception=0D=0A						when others =3D>=
=0D=0A							null;=0D=0A					end;=0D=0A					str:=3DGet_Line(input);=0D=0A		=
		end if;=0D=0A				begin=0D=0A					Open(fileobj,iokind,To_String(file1));=
=0D=0A				exception=0D=0A					when others =3D>=0D=0A						begin=0D=0A						=
	Create(fileobj,iokind,To_String(file1));=0D=0A						exception=0D=0A							=
when E : others =3D>=0D=0A								Check_Error(test_name,E,str);=0D=0A						=
		goto CONT;=0D=0A						end;=0D=0A				end;=0D=0A				if(iokind=3DIn_File) th=
en=0D=0A					begin=0D=0A						if(iotype=3Dstd) then=0D=0A							Set_Input(f=
ileobj);=0D=0A							Get(f1);=0D=0A							Set_Input(Standard_Input);=0D=0A	=
					else=0D=0A							Get(fileobj,f1);=0D=0A						end if;=0D=0A						CheckT=
est(test_name,f1=3DFRACTION(i1,i2));=0D=0A					exception=0D=0A						when E =
: others =3D>=0D=0A							Check_Error(test_name,E,str);=0D=0A					end;=0D=
=0A				else=0D=0A					begin=0D=0A						if(iotype=3Dstd) then=0D=0A							Se=
t_Output(fileobj);=0D=0A							Put(FRACTION(i1,i2));=0D=0A							Set_Output=
(Standard_Output);=0D=0A						else=0D=0A							Put(fileobj,FRACTION(i1,i2))=
;=0D=0A						end if;=0D=0A						CheckTest(test_name,true);=0D=0A					except=
ion=0D=0A						when E : others =3D>=0D=0A							Check_Error(test_name,E,str=
);=0D=0A					end;=0D=0A				end if;=0D=0A				Close(fileobj);=0D=0A			end;=0D=
=0A			<<CONT>>=0D=0A			-- grab the next line=0D=0A			str:=3DGet_Line(input)=
;=0D=0A			-- check for the 'change_test' indicator=0D=0A			if str =3D chang=
e_test_indicator then exit; end if;=0D=0A		end loop;=0D=0A		if debug>1 then=
 put_line(output,"done with " & name); end if;=0D=0A	end;=0D=0A=0D=0A	proce=
dure Test_UnaryOp=0D=0A		(op: in UnaryOpType;=0D=0A		name: in Unbounded_Str=
ing)=0D=0A	is=0D=0A	begin=0D=0A		if debug>1 then put_line(output,"starting =
" & name); end if;=0D=0A		loop=0D=0A			test_line_number:=3DInteger(LINE(inp=
ut));=0D=0A			declare=0D=0A				-- i1,i2,i3,i4:Integer;=0D=0A				-- f1,f2:Fr=
action_Type;=0D=0A			begin=0D=0A				test_name:=3DGet_Line(input);=0D=0A				=
Get(input,i1);=0D=0A				Get(input,i2);=0D=0A				-- consume the newline and =
equal sign=0D=0A				str:=3DGet_Line(input);=0D=0A				str:=3DGet_Line(input)=
;=0D=0A				begin=0D=0A					Get(input,i3);=0D=0A					Get(input,i4);=0D=0A			=
		case op is=0D=0A						when frac2 =3D>=0D=0A							f1:=3DFRACTION(i1,i2);=
=0D=0A						when others =3D>=0D=0A							f1:=3Di1/i2;=0D=0A					end case;=
=0D=0A					f1:=3DDoUnaryOp(op,f1);=0D=0A					f2:=3Di3/i4;=0D=0A					CheckTe=
st(test_name,f1 =3D f2);=0D=0A					-- consume the extra newline=0D=0A					s=
tr:=3DGet_Line(input);=0D=0A				-- a DATA_ERROR exception will be thrown if=
 there wasn't a number to read (like an exception expected)=0D=0A				except=
ion=0D=0A					when DATA_ERROR =3D>=0D=0A						-- Get the expected exception=
=0D=0A						str:=3DGet_Line(input);=0D=0A						begin=0D=0A							case op is=
=0D=0A								when frac2 =3D>=0D=0A									f1:=3DFRACTION(i1,i2);=0D=0A			=
					when others =3D>=0D=0A									f1:=3Di1/i2;=0D=0A							end case;=0D=
=0A							f1:=3DDoUnaryOp(op,f1);=0D=0A							raise No_Error;=0D=0A						ex=
ception=0D=0A							when E : others =3D>=0D=0A								Check_Error(test_name=
,E,str);=0D=0A						end;=0D=0A					when E : others =3D>=0D=0A						Check_Er=
ror(test_name,E,To_Unbounded_String("No_Error"));=0D=0A						while(str /=3D=
 To_Unbounded_String("")) loop=0D=0A							str:=3DGet_Line(input);=0D=0A			=
			end loop;=0D=0A				end;=0D=0A			exception=0D=0A				when DATA_ERROR =3D>=
=0D=0A					put(output,"unable to read near line: ");=0D=0A					put(output,I=
nteger(LINE(input)));=0D=0A					new_line(output);=0D=0A			end;=0D=0A			-- g=
rab the next line=0D=0A			str:=3DGet_Line(input);=0D=0A			-- check for the =
'change_test' indicator=0D=0A			if str =3D change_test_indicator then exit;=
 end if;=0D=0A		end loop;=0D=0A		if debug>1 then put_line(output,"done with=
 " & name); end if;=0D=0A	end;=0D=0A=0D=0A	procedure Test_UnaryIntOp=0D=0A	=
	(op: in UnaryIntOpType;=0D=0A		name: in Unbounded_String)=0D=0A	is=0D=0A	b=
egin=0D=0A		if debug>1 then put_line(output,"starting " & name); end if;=0D=
=0A		loop=0D=0A			test_line_number:=3DInteger(LINE(input));=0D=0A			declare=
=0D=0A				-- i1,i2,i3:Integer;=0D=0A				-- f1:Fraction_Type;=0D=0A			begin=
=0D=0A				test_name:=3DGet_Line(input);=0D=0A				Get(input,i1);=0D=0A				Ge=
t(input,i2);=0D=0A				-- consume the newline and equal sign=0D=0A				str:=
=3DGet_Line(input);=0D=0A				str:=3DGet_Line(input);=0D=0A				begin=0D=0A		=
			Get(input,i3);=0D=0A					f1:=3Di1/i2;=0D=0A					if debug > 4 then=0D=0A	=
					put(output,DoUnaryIntOp(op,f1));=0D=0A						new_line(output);=0D=0A			=
		end if;=0D=0A					CheckTest(test_name,DoUnaryIntOp(op,f1) =3D i3);=0D=0A	=
				-- consume the extra newline=0D=0A					str:=3DGet_Line(input);=0D=0A			=
	-- a DATA_ERROR exception will be thrown if there wasn't a number to read =
(like an exception expected)=0D=0A				exception=0D=0A					when DATA_ERROR =
=3D>=0D=0A						-- Get the expected exception=0D=0A						str:=3DGet_Line(in=
put);=0D=0A						begin=0D=0A							f1:=3Di1/i2;=0D=0A							i3:=3DDoUnaryIn=
tOp(op,f1);=0D=0A							raise No_Error;=0D=0A						exception=0D=0A							wh=
en E : others =3D>=0D=0A								Check_Error(test_name,E,str);=0D=0A						en=
d;=0D=0A					when E : others =3D>=0D=0A						Check_Error(test_name,E,To_Unb=
ounded_String("No_Error"));=0D=0A						while(str /=3D To_Unbounded_String("=
")) loop=0D=0A							str:=3DGet_Line(input);=0D=0A						end loop;=0D=0A				=
end;=0D=0A			exception=0D=0A				when DATA_ERROR =3D>=0D=0A					put(output,"=
unable to read near line: ");=0D=0A					put(output,Integer(LINE(input)));=
=0D=0A					new_line(output);=0D=0A			end;=0D=0A			-- grab the next line=0D=
=0A			str:=3DGet_Line(input);=0D=0A			if str =3D change_test_indicator then=
=0D=0A				exit;=0D=0A			end if;=0D=0A		end loop;=0D=0A		if debug>1 then put=
_line(output,"done with " & name); end if;=0D=0A	end;=0D=0A=0D=0A	procedure=
 Test_BinaryOp=0D=0A		(op: in BinaryOpType;=0D=0A		name: in Unbounded_Strin=
g)=0D=0A	is=0D=0A	begin=0D=0A		if debug>1 then put_line(output,"starting " =
& name); end if;=0D=0A		loop=0D=0A			test_line_number:=3DInteger(LINE(input=
));=0D=0A			declare=0D=0A				-- i1,i2,i3,i4,i5,i6:Integer;=0D=0A				-- f1,f=
2,f3:Fraction_Type;=0D=0A			begin=0D=0A				test_name:=3DGet_Line(input);=0D=
=0A				Get(input,i1);=0D=0A				Get(input,i2);=0D=0A				-- consume the newli=
ne and operation sign=0D=0A				str:=3DGet_Line(input);=0D=0A				str:=3DGet_=
Line(input);=0D=0A				Get(input,i3);=0D=0A				Get(input,i4);=0D=0A				-- co=
nsume the newline and equal sign=0D=0A				str:=3DGet_Line(input);=0D=0A				=
str:=3DGet_Line(input);=0D=0A				begin=0D=0A					Get(input,i5);=0D=0A					G=
et(input,i6);=0D=0A					f1:=3Di1/i2;=0D=0A					f2:=3Di3/i4;=0D=0A					f3:=
=3Di5/i6;=0D=0A					if debug > 4 then=0D=0A						put(output,DoBinaryOp(f1,o=
p,f2));=0D=0A						new_line(output);=0D=0A					end if;=0D=0A					CheckTest(=
test_name,DoBinaryOp(f1,op,f2) =3D f3);=0D=0A					-- consume the extra newl=
ine=0D=0A					str:=3DGet_Line(input);=0D=0A				-- a DATA_ERROR exception wi=
ll be thrown if there wasn't a number to read (like an exception expected)=
=0D=0A				exception=0D=0A					when DATA_ERROR =3D>=0D=0A						-- Get the ex=
pected exception=0D=0A						str:=3DGet_Line(input);=0D=0A						begin=0D=0A	=
						f1:=3Di1/i2;=0D=0A							f2:=3Di3/i4;=0D=0A							f3:=3Di5/i6;=0D=0A	=
						if debug > 4 then=0D=0A								put(output,DoBinaryOp(f1,op,f2));=0D=
=0A								new_line(output);=0D=0A							end if;=0D=0A							f3:=3DDoBinary=
Op(f1,op,f2);=0D=0A							raise No_Error;=0D=0A						exception=0D=0A							=
when E : others =3D>=0D=0A								Check_Error(test_name,E,str);=0D=0A						=
end;=0D=0A					when E : others =3D>=0D=0A						Check_Error(test_name,E,To_U=
nbounded_String("No_Error"));=0D=0A						while(str /=3D To_Unbounded_String=
("")) loop=0D=0A							str:=3DGet_Line(input);=0D=0A						end loop;=0D=0A		=
		end;=0D=0A			exception=0D=0A				when DATA_ERROR =3D>=0D=0A					put(output=
,"unable to read near line: ");=0D=0A					put(output,Integer(LINE(input)));=
=0D=0A					new_line(output);=0D=0A			end;=0D=0A			-- grab the next line=0D=
=0A			str:=3DGet_Line(input);=0D=0A			-- check for the 'change_test' indica=
tor=0D=0A			if str =3D change_test_indicator then exit; end if;=0D=0A		end =
loop;=0D=0A		if debug>1 then put_line(output,"done with " & name); end if;=
=0D=0A	end;=0D=0A=0D=0A=0D=0A	procedure Test_Comp=0D=0A		(op: in CompType;=
=0D=0A		name: in Unbounded_String)=0D=0A	is=0D=0A	begin=0D=0A		if debug>1 t=
hen put_line(output,"starting " & name); end if;=0D=0A		loop=0D=0A			test_l=
ine_number:=3DInteger(LINE(input));=0D=0A			declare=0D=0A				-- i1,i2,i3,i4=
,i5:Integer;=0D=0A				b1:Boolean;=0D=0A				-- f1,f2:Fraction_Type;=0D=0A			=
begin=0D=0A				test_name:=3DGet_Line(input);=0D=0A				Get(input,i1);=0D=0A	=
			Get(input,i2);=0D=0A				-- consume the newline and operation sign=0D=0A	=
			str:=3DGet_Line(input);=0D=0A				str:=3DGet_Line(input);=0D=0A				Get(in=
put,i3);=0D=0A				Get(input,i4);=0D=0A				-- consume the newline and equal =
sign=0D=0A				str:=3DGet_Line(input);=0D=0A				str:=3DGet_Line(input);=0D=
=0A				begin=0D=0A					Get(input,i5);=0D=0A					if i5 =3D 0 then=0D=0A					=
	b1:=3Dfalse;=0D=0A					else=0D=0A						b1:=3Dtrue;=0D=0A					end if;=0D=0A=
					f1:=3Di1/i2;=0D=0A					f2:=3Di3/i4;=0D=0A					CheckTest(test_name,DoCo=
mp(f1,op,f2) =3D b1);=0D=0A					-- consume the extra newline=0D=0A					str:=
=3DGet_Line(input);=0D=0A				-- a DATA_ERROR exception will be thrown if th=
ere wasn't a number to read (like an exception expected)=0D=0A				exception=
=0D=0A					when DATA_ERROR =3D>=0D=0A						-- Get the expected exception=0D=
=0A						str:=3DGet_Line(input);=0D=0A						begin=0D=0A							f1:=3Di1/i2;=
=0D=0A							f2:=3Di3/i4;=0D=0A							b1:=3DDoComp(f1,op,f2);=0D=0A							r=
aise No_Error;=0D=0A						exception=0D=0A							when E : others =3D>=0D=0A	=
							Check_Error(test_name,E,str);=0D=0A						end;=0D=0A					when E : oth=
ers =3D>=0D=0A						Check_Error(test_name,E,To_Unbounded_String("No_Error")=
);=0D=0A						while(str /=3D To_Unbounded_String("")) loop=0D=0A							str:=
=3DGet_Line(input);=0D=0A						end loop;=0D=0A				end;=0D=0A			exception=0D=
=0A				when DATA_ERROR =3D>=0D=0A					put(output,"unable to read near line:=
 ");=0D=0A					put(output,Integer(LINE(input)));=0D=0A					new_line(output)=
;=0D=0A			end;=0D=0A			-- grab the next line=0D=0A			str:=3DGet_Line(input)=
;=0D=0A			-- check for the 'change_test' indicator=0D=0A			if str =3D chang=
e_test_indicator then exit; end if;=0D=0A		end loop;=0D=0A		if debug>1 then=
 put_line(output,"done with " & name); end if;=0D=0A	end;=0D=0A=0D=0A=0D=0A=
	procedure Test_Flt is=0D=0A	begin=0D=0A		if debug>1 then put_line(output,"=
starting FLT"); end if;=0D=0A		loop=0D=0A			test_line_number:=3DInteger(LIN=
E(input));=0D=0A			declare=0D=0A				-- i1,i2:Integer;=0D=0A				-- flt1:Floa=
t;=0D=0A				-- f1:Fraction_Type;=0D=0A			begin=0D=0A				test_name:=3DGet_Li=
ne(input);=0D=0A				Get(input,i1);=0D=0A				Get(input,i2);=0D=0A				-- cons=
ume the newline and equal sign=0D=0A				str:=3DGet_Line(input);=0D=0A				st=
r:=3DGet_Line(input);=0D=0A				begin=0D=0A					Get(input,flt1);=0D=0A					f=
1:=3Di1/i2;=0D=0A					CheckTest(test_name,FLT(f1) - flt1 < 0.001);=0D=0A			=
		-- consume the extra newline=0D=0A					str:=3DGet_Line(input);=0D=0A				-=
- a DATA_ERROR exception will be thrown if there wasn't a number to read (l=
ike an exception expected)=0D=0A				exception=0D=0A					when DATA_ERROR =3D=
>=0D=0A						-- Get the expected exception=0D=0A						str:=3DGet_Line(input=
);=0D=0A						begin=0D=0A							f1:=3Di1/i2;=0D=0A							flt1:=3DFLT(f1);=
=0D=0A							raise No_Error;=0D=0A						exception=0D=0A							when E : othe=
rs =3D>=0D=0A								Check_Error(test_name,E,str);=0D=0A						end;=0D=0A			=
		when E : others =3D>=0D=0A						Check_Error(test_name,E,To_Unbounded_Stri=
ng("No_Error"));=0D=0A						while(str /=3D To_Unbounded_String("")) loop=0D=
=0A							str:=3DGet_Line(input);=0D=0A						end loop;=0D=0A				end;=0D=0A	=
		exception=0D=0A				when DATA_ERROR =3D>=0D=0A					put(output,"unable to r=
ead near line: ");=0D=0A					put(output,Integer(LINE(input)));=0D=0A					ne=
w_line(output);=0D=0A			end;=0D=0A			-- grab the next line=0D=0A			str:=3DG=
et_Line(input);=0D=0A			if str =3D change_test_indicator then=0D=0A				exit=
;=0D=0A			end if;=0D=0A		end loop;=0D=0A		if debug>1 then put_line(output,"=
done with FLT"); end if;=0D=0A	end;=0D=0A=0D=0A	procedure Test_Binary_Power=
=0D=0A		(name: in Unbounded_String)=0D=0A	is=0D=0A	begin=0D=0A		if debug>1 =
then put_line(output,"starting " & name); end if;=0D=0A		loop=0D=0A			test_=
line_number:=3DInteger(LINE(input));=0D=0A			declare=0D=0A				-- i1,i2,i3,i=
4,i5:Integer;=0D=0A				-- f1,f2:Fraction_Type;=0D=0A			begin=0D=0A				test_=
name:=3DGet_Line(input);=0D=0A				Get(input,i1);=0D=0A				Get(input,i2);=0D=
=0A				-- consume the newline and operation sign=0D=0A				str:=3DGet_Line(i=
nput);=0D=0A				str:=3DGet_Line(input);=0D=0A				Get(input,i3);=0D=0A				--=
 consume the newline and equal sign=0D=0A				str:=3DGet_Line(input);=0D=0A	=
			str:=3DGet_Line(input);=0D=0A				begin=0D=0A					Get(input,i4);=0D=0A			=
		Get(input,i5);=0D=0A					f1:=3Di1/i2;=0D=0A					f2:=3Di4/i5;=0D=0A					Ch=
eckTest(test_name,f1 ** i3 =3D f2);=0D=0A					-- consume the extra newline=
=0D=0A					str:=3DGet_Line(input);=0D=0A				-- a DATA_ERROR exception will =
be thrown if there wasn't a number to read (like an exception expected)=0D=
=0A				exception=0D=0A					when DATA_ERROR =3D>=0D=0A						-- Get the expec=
ted exception=0D=0A						str:=3DGet_Line(input);=0D=0A						begin=0D=0A				=
			f1:=3Di1/i2;=0D=0A							f2:=3Df1 ** i3;=0D=0A							raise No_Error;=0D=
=0A						exception=0D=0A							when E : others =3D>=0D=0A								Check_Erro=
r(test_name,E,str);=0D=0A						end;=0D=0A					when E : others =3D>=0D=0A			=
			Check_Error(test_name,E,To_Unbounded_String("No_Error"));=0D=0A						whi=
le(str /=3D To_Unbounded_String("")) loop=0D=0A							str:=3DGet_Line(input=
);=0D=0A						end loop;=0D=0A				end;=0D=0A			exception=0D=0A				when DATA_=
ERROR =3D>=0D=0A					put(output,"unable to read near line: ");=0D=0A					pu=
t(output,Integer(LINE(input)));=0D=0A					new_line(output);=0D=0A			end;=0D=
=0A			-- grab the next line=0D=0A			str:=3DGet_Line(input);=0D=0A			-- chec=
k for the 'change_test' indicator=0D=0A			if str =3D change_test_indicator =
then exit; end if;=0D=0A		end loop;=0D=0A		if debug>1 then put_line(output,=
"done with " & name); end if;=0D=0A	end;=0D=0A=0D=0A=0D=0A	procedure Test_B=
inary_Mod=0D=0A		(name: in Unbounded_String)=0D=0A	is=0D=0A	begin=0D=0A		if=
 debug>1 then put_line(output,"starting " & name); end if;=0D=0A		loop=0D=
=0A			test_line_number:=3DInteger(LINE(input));=0D=0A			declare=0D=0A				--=
 i1,i2,i3,i4,i5:Integer;=0D=0A				-- f1,f2:Fraction_Type;=0D=0A			begin=0D=
=0A				test_name:=3DGet_Line(input);=0D=0A				Get(input,i1);=0D=0A				Get(i=
nput,i2);=0D=0A				-- consume the newline and operation sign=0D=0A				str:=
=3DGet_Line(input);=0D=0A				str:=3DGet_Line(input);=0D=0A				Get(input,i3)=
;=0D=0A				Get(input,i4);=0D=0A				-- consume the newline and equal sign=0D=
=0A				str:=3DGet_Line(input);=0D=0A				str:=3DGet_Line(input);=0D=0A				be=
gin=0D=0A					Get(input,i5);=0D=0A					f1:=3Di1/i2;=0D=0A					f2:=3Di3/i4;=
=0D=0A					if debug > 4 then=0D=0A						put(output,f1 MOD f2);=0D=0A						n=
ew_line(output);=0D=0A					end if;=0D=0A					CheckTest(test_name,f1 MOD f2 =
=3D i5);=0D=0A					-- consume the extra newline=0D=0A					str:=3DGet_Line(i=
nput);=0D=0A				-- a DATA_ERROR exception will be thrown if there wasn't a =
number to read (like an exception expected)=0D=0A				exception=0D=0A					wh=
en DATA_ERROR =3D>=0D=0A						-- Get the expected exception=0D=0A						str:=
=3DGet_Line(input);=0D=0A						begin=0D=0A							f1:=3Di1/i2;=0D=0A							f=
2:=3Di3/i4;=0D=0A							i5:=3Df1 MOD f2;=0D=0A							raise No_Error;=0D=0A	=
					exception=0D=0A							when E : others =3D>=0D=0A								Check_Error(te=
st_name,E,str);=0D=0A						end;=0D=0A					when E : others =3D>=0D=0A						C=
heck_Error(test_name,E,To_Unbounded_String("No_Error"));=0D=0A						while(s=
tr /=3D To_Unbounded_String("")) loop=0D=0A							str:=3DGet_Line(input);=
=0D=0A						end loop;=0D=0A				end;=0D=0A			exception=0D=0A				when DATA_ER=
ROR =3D>=0D=0A					put(output,"unable to read near line: ");=0D=0A					put(=
output,Integer(LINE(input)));=0D=0A					new_line(output);=0D=0A			end;=0D=
=0A			-- grab the next line=0D=0A			str:=3DGet_Line(input);=0D=0A			-- chec=
k for the 'change_test' indicator=0D=0A			if str =3D change_test_indicator =
then exit; end if;=0D=0A		end loop;=0D=0A		if debug>1 then put_line(output,=
"done with " & name); end if;=0D=0A	end;=0D=0A=0D=0Abegin=0D=0A	if(Argument=
_Count >=3D 1) then=0D=0A		Open(input,In_File,Argument(1));=0D=0A	else=0D=
=0A		Open(input,In_File,"input.txt");=0D=0A	end if;=0D=0A	if(Argument_Count=
 >=3D 2) then=0D=0A		Open(output,Out_File,Argument(2));=0D=0A	else=0D=0A		O=
pen(output,Out_File,"output.txt");=0D=0A	end if;=0D=0A	if(Argument_Count >=
=3D 3) then=0D=0A		Get(Argument(3),debug,junk_var);=0D=0A	end if;=0D=0A=0D=
=0A	loop=0D=0A		declare=0D=0A			str:Unbounded_String;=0D=0A			flag:boolean:=
=3Dtrue;=0D=0A		begin=0D=0A			begin=0D=0A				str:=3DGet_Line(input);=0D=0A	=
		exception=0D=0A				when END_ERROR =3D>=0D=0A					flag:=3Dfalse;=0D=0A				=
	raise;=0D=0A			end;=0D=0A			if str =3D "integer/integer" then=0D=0A				Tes=
t_UnaryOp(noop,str);=0D=0A			elsif str =3D "FRACTION" then=0D=0A				Test_Fr=
action(str);=0D=0A			elsif str =3D "FRACTION2" then=0D=0A				Test_UnaryOp(f=
rac2,str);=0D=0A			elsif str =3D "NUMERATOR" then=0D=0A				Test_UnaryIntOp(=
numerator,str);=0D=0A			elsif str =3D "DENOMINATOR" then=0D=0A				Test_Unar=
yIntOp(denominator,str);=0D=0A			elsif str =3D "INT" then=0D=0A				Test_Una=
ryIntOp(int,str);=0D=0A			elsif str =3D "FLT" then=0D=0A				Test_Flt;=0D=0A=
			elsif str =3D "UNARY+" then=0D=0A				Test_UnaryOp(plus,str);=0D=0A			els=
if str =3D "UNARY-" then=0D=0A				Test_UnaryOp(minus,str);=0D=0A			elsif st=
r =3D "ABS" then=0D=0A				Test_UnaryOp(absolute,str);=0D=0A			elsif str =3D=
 "INVERSE" then=0D=0A				Test_UnaryOp(inverse,str);=0D=0A			elsif str =3D "=
BINARY+" then=0D=0A				Test_BinaryOp(plus,str);=0D=0A			elsif str =3D "BINA=
RY-" then=0D=0A				Test_BinaryOp(minus,str);=0D=0A			elsif str =3D "BINARY*=
" then=0D=0A				Test_BinaryOp(multiply,str);=0D=0A			elsif str =3D "BINARY/=
" then=0D=0A				Test_BinaryOp(divide,str);=0D=0A			elsif str =3D "BINARY**"=
 then=0D=0A				Test_Binary_Power(str);=0D=0A			elsif str =3D "MOD" then=0D=
=0A				Test_Binary_Mod(str);=0D=0A			elsif str =3D "REM" then=0D=0A				Test=
_BinaryOp(remainder,str);=0D=0A			elsif str =3D ">" then=0D=0A				Test_Comp=
(gt,str);=0D=0A			elsif str =3D ">=3D" then=0D=0A				Test_Comp(ge,str);=0D=
=0A			elsif str =3D "<" then=0D=0A				Test_Comp(lt,str);=0D=0A			elsif str =
=3D "<=3D" then=0D=0A				Test_Comp(le,str);=0D=0A			elsif str =3D "=3D" the=
n=0D=0A				Test_Comp(eq,str);=0D=0A			elsif str =3D "GETFILE" then=0D=0A			=
	Test_IO(In_File,file,str);=0D=0A			elsif str =3D "GETSTD" then=0D=0A				Te=
st_IO(In_File,std,str);=0D=0A			elsif str =3D "PUTFILE" then=0D=0A				Test_=
IO(Out_File,file,str);=0D=0A			elsif str =3D "PUTSTD" then=0D=0A				Test_IO=
(Out_File,std,str);=0D=0A			else=0D=0A				put_line(output,"unknown test typ=
e =3D> " & str);=0D=0A			end if;=0D=0A		exception=0D=0A			when END_ERROR =
=3D>=0D=0A				if flag then=0D=0A					put_line(output,"end of file reached")=
;=0D=0A				end if;=0D=0A				declare=0D=0A					i:Integer:=3D0;=0D=0A				begi=
n=0D=0A					new_line(output);=0D=0A					put_line(output,"|=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|");=0D=0A					put_line(output,"|=
    Passed tests   |");=0D=0A					put_line(output,"|=3D=3D=3D=3D=3D=3D=3D=
=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|");=0D=0A					for i in 1..NumPassedTes=
ts loop=0D=0A						put(output,PassedTests(i).Line,4);=0D=0A						put(output=
,": ");=0D=0A						put_line(output,PassedTests(i).Name);=0D=0A					end loop=
;=0D=0A					if NumPassedTests =3D 0 then=0D=0A						put_line(output," -- no=
 tests passed");=0D=0A					end if;=0D=0A=0D=0A					new_line(output);=0D=0A	=
				put_line(output,"|=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=
=3D=3D|");=0D=0A					put_line(output,"|    Failed tests   |");=0D=0A					pu=
t_line(output,"|=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D=3D|"=
);=0D=0A					for i in 1..NumFailedTests loop=0D=0A						put(output,FailedTe=
sts(i).Line,4);=0D=0A						put(output,": ");=0D=0A						put_line(output,Fai=
ledTests(i).Name);=0D=0A					end loop;=0D=0A					if NumFailedTests =3D 0 th=
en=0D=0A						put_line(output," -- no tests failed");=0D=0A					end if;=0D=
=0A=0D=0A					new_line(output);=0D=0A					put(output,"# of tests run:   ");=
=0D=0A					put(output,NumPassedTests + NumFailedTests);=0D=0A					new_line(=
output);=0D=0A					put(output,"# of tests passed:");=0D=0A					put(output,N=
umPassedTests);=0D=0A					new_line(output);=0D=0A					put(output,"# of test=
s failed:");=0D=0A					put(output,NumFailedTests);=0D=0A					new_line(outpu=
t);=0D=0A				end;=0D=0A				exit;=0D=0A		end;=0D=0A	end loop;=0D=0A=0D=0A	de=
clare=0D=0A		test_num:File_Type;=0D=0A		num_test_nums:Integer;=0D=0A	begin=
=0D=0A		new_line(output);=0D=0A		new_line(output);=0D=0A		put_line(output,"=
starting exhaustive tests");=0D=0A		new_line(output);=0D=0A		put_line(outpu=
t,"failed tests:");=0D=0A		if(Argument_Count >=3D 4) then=0D=0A			Open(test=
_num,In_File,Argument(4));=0D=0A		else=0D=0A			Open(test_num,In_File,"test_=
num.txt");=0D=0A		end if;=0D=0A		Get(test_num,num_test_nums);=0D=0A		declar=
e=0D=0A			type test_index_type is new Integer RANGE 1..num_test_nums;=0D=0A=
			test_nums:array(test_index_type) of Integer;=0D=0A			--i1,i2,i3,i4:Integ=
er;=0D=0A			fr1,fr2,fr3:Fraction_Type;=0D=0A			fl1,fl2,fl3:Float;=0D=0A			f=
rb,flb:Boolean;=0D=0A		begin=0D=0A			for i in test_nums'range loop=0D=0A			=
	Get(test_num,test_nums(i));=0D=0A			end loop;=0D=0A=0D=0A			-- Test all Bi=
nary Operator Types=0D=0A			for op in BinaryOpType'range loop=0D=0A				for =
i1 in test_nums'range loop=0D=0A					for i2 in test_nums'range loop=0D=0A		=
				for i3 in test_nums'range loop=0D=0A							for i4 in test_nums'range lo=
op=0D=0A								declare=0D=0A									NoError_String:Unbounded_String:=3DTO=
_Unbounded_String("No Error");=0D=0A									flError:Unbounded_String:=3DNo=
Error_String;=0D=0A									frError:Unbounded_String:=3DNoError_String;=0D=
=0A								begin=0D=0A									begin=0D=0A										fl1:=3DFloat(test_nums(=
i1))/Float(test_nums(i2));=0D=0A										fl2:=3DFloat(test_nums(i3))/Float=
(test_nums(i4));=0D=0A										fl3:=3DDoBinaryOp(fl1,op,fl2);=0D=0A							=
		exception=0D=0A										when E : others =3D> =0D=0A											flError:=
=3DTo_Unbounded_String(Ada.Exceptions.Exception_Name(E));=0D=0A									end=
;=0D=0A									begin=0D=0A										begin=0D=0A											fr1:=3DFRACTION(=
test_nums(i1),test_nums(i2));=0D=0A											fr2:=3DFRACTION(test_nums(i3)=
,test_nums(i4));=0D=0A										exception=0D=0A											when others =3D>=
=0D=0A												goto NEXT_LOOP_BINARY;=0D=0A										end;=0D=0A									=
	fr3:=3DDoBinaryOp(fr1,op,fr2);=0D=0A									exception=0D=0A										when=
 E : others =3D> =0D=0A											frError:=3DTo_Unbounded_String(Ada.Except=
ions.Exception_Name(E));=0D=0A									end;=0D=0A=0D=0A									-- expect d=
ivide by zero if the top of the second fraction is 0=0D=0A									if flErr=
or =3D NoError_String and (op =3D divide or op=3Dremainder) and test_nums(i=
3)=3D0 then=0D=0A										flError:=3DTo_Unbounded_String("CONSTRAINT_ERROR=
");=0D=0A									end if;=0D=0A=0D=0A									-- expect overflow if the flo=
ating point answer is larger than the largest integer=0D=0A									if flEr=
ror =3D NoError_String and (Float(Integer'Last)<fl3 or Float(Integer'First)=
>fl3) then=0D=0A										flError:=3DTo_Unbounded_String("CONSTRAINT_ERROR"=
);=0D=0A									end if;=0D=0A									=0D=0A									if flError /=3D frErr=
or then=0D=0A									--if frError =3D NoError_String then=0D=0A									if=
 not AlmostEqual(fl3,FLT(fr3)) then=0D=0A										put(output,test_nums(i1)=
);=0D=0A										put(output," / ");=0D=0A										put(output,test_nums(i2=
));=0D=0A										put(output," ");=0D=0A										put(output,GetBinaryOp(o=
p));=0D=0A										put(output," ");=0D=0A										put(output,test_nums(i3=
));=0D=0A										put(output," / ");=0D=0A										put(output,test_nums(i=
4));=0D=0A										put(output," =3D ");=0D=0A										if flError /=3D frE=
rror then=0D=0A											put(output,frError);=0D=0A											if frError =
=3D NoError_String then=0D=0A												put(output," (");=0D=0A											=
	put(output,FLT(fr3));=0D=0A												put(output,")");=0D=0A											en=
d if;=0D=0A											put(output," !=3D ");=0D=0A											put(output,flEr=
ror);=0D=0A											--if flError =3D NoError_String then=0D=0A											=
	put(output," (");=0D=0A												put(output,fl3);=0D=0A												put(o=
utput,")");=0D=0A											--end if;=0D=0A										else=0D=0A											p=
ut(output,fr3);=0D=0A											put(output," (");=0D=0A											put(outpu=
t,FLT(fr3));=0D=0A											put(output,") !=3D ");=0D=0A											put(out=
put,fl3);=0D=0A										end if;=0D=0A										new_line(output);=0D=0A				=
					end if;=0D=0A									end if;=0D=0A									=0D=0A									if flError =
=3D NoError_String then=0D=0A										if frError =3D NoError_String then=
=0D=0A											null;=0D=0A										else=0D=0A											null;=0D=0A					=
					end if;=0D=0A									else=0D=0A										if frError =3D NoError_Strin=
g then=0D=0A											null;=0D=0A										else=0D=0A											null;=0D=
=0A										end if;=0D=0A									end if;=0D=0A								end;=0D=0A								<=
<NEXT_LOOP_BINARY>>=0D=0A								null;=0D=0A							end loop;=0D=0A						end=
 loop;=0D=0A					end loop;=0D=0A				end loop;=0D=0A			end loop;=0D=0A=0D=0A=
=0D=0A			-- Test Binary Power Operator=0D=0A			for i1 in test_nums'range lo=
op=0D=0A				for i2 in test_nums'range loop=0D=0A					for i3 in test_nums'ra=
nge loop=0D=0A						declare=0D=0A							NoError_String:Unbounded_String:=3D=
TO_Unbounded_String("No Error");=0D=0A							flError:Unbounded_String:=3DNo=
Error_String;=0D=0A							frError:Unbounded_String:=3DNoError_String;=0D=0A=
						begin=0D=0A							begin=0D=0A								fl1:=3DFloat(test_nums(i1))/Floa=
t(test_nums(i2));=0D=0A								fl3:=3Dfl1**test_nums(i3);=0D=0A							excep=
tion=0D=0A								when E : others =3D> =0D=0A									flError:=3DTo_Unbound=
ed_String(Ada.Exceptions.Exception_Name(E));=0D=0A							end;=0D=0A							b=
egin=0D=0A								begin=0D=0A									fr1:=3DFRACTION(test_nums(i1),test_nu=
ms(i2));=0D=0A								exception=0D=0A									when others =3D>=0D=0A							=
			goto NEXT_LOOP_BINARY_POWER;=0D=0A								end;=0D=0A								fr3:=3Dfr1**=
test_nums(i3);=0D=0A							exception=0D=0A								when E : others =3D> =0D=
=0A									frError:=3DTo_Unbounded_String(Ada.Exceptions.Exception_Name(E)=
);=0D=0A							end;=0D=0A=0D=0A							-- expect overflow if the floating po=
int answer is larger than the largest integer=0D=0A							if flError =3D No=
Error_String and (Float(Integer'Last)<fl3 or Float(Integer'First)>fl3) then=
=0D=0A								flError:=3DTo_Unbounded_String("CONSTRAINT_ERROR");=0D=0A				=
			end if;=0D=0A							=0D=0A							if flError /=3D frError then=0D=0A					=
		--if frError =3D NoError_String then=0D=0A							if not AlmostEqual(fl3,F=
LT(fr3)) then=0D=0A								put(output,test_nums(i1));=0D=0A								put(outp=
ut," / ");=0D=0A								put(output,test_nums(i2));=0D=0A								put(output,=
" ");=0D=0A								put(output,"**");=0D=0A								put(output," ");=0D=0A			=
					put(output,test_nums(i3));=0D=0A								put(output," =3D ");=0D=0A				=
				if flError /=3D frError then=0D=0A									put(output,frError);=0D=0A		=
							if frError =3D NoError_String then=0D=0A										put(output," (");=
=0D=0A										put(output,FLT(fr3));=0D=0A										put(output,")");=0D=0A=
									end if;=0D=0A									put(output," !=3D ");=0D=0A									put(outp=
ut,flError);=0D=0A									--if flError =3D NoError_String then=0D=0A						=
				put(output," (");=0D=0A										put(output,fl3);=0D=0A										put(ou=
tput,")");=0D=0A									--end if;=0D=0A								else=0D=0A									put(outp=
ut,fr3);=0D=0A									put(output," (");=0D=0A									put(output,FLT(fr3))=
;=0D=0A									put(output,") !=3D ");=0D=0A									put(output,fl3);=0D=0A=
								end if;=0D=0A								new_line(output);=0D=0A							end if;=0D=0A			=
				end if;=0D=0A							=0D=0A						end;=0D=0A						<<NEXT_LOOP_BINARY_POWE=
R>>=0D=0A						null;=0D=0A					end loop;=0D=0A				end loop;=0D=0A			end loo=
p;=0D=0A=0D=0A=0D=0A			-- Test the Binary MOD Operator=0D=0A			for i1 in te=
st_nums'range loop=0D=0A				for i2 in test_nums'range loop=0D=0A					for i3=
 in test_nums'range loop=0D=0A						for i4 in test_nums'range loop=0D=0A			=
				declare=0D=0A								NoError_String:Unbounded_String:=3DTO_Unbounded_St=
ring("No Error");=0D=0A								flError:Unbounded_String:=3DNoError_String;=
=0D=0A								frError:Unbounded_String:=3DNoError_String;=0D=0A							begin=
=0D=0A								begin=0D=0A									fl1:=3DFloat(test_nums(i1))/Float(test_nu=
ms(i2));=0D=0A									fl2:=3DFloat(test_nums(i3))/Float(test_nums(i4));=0D=
=0A									fl3:=3DFloat(Integer(fl1/fl2));=0D=0A								exception=0D=0A			=
						when E : others =3D> =0D=0A										flError:=3DTo_Unbounded_String(A=
da.Exceptions.Exception_Name(E));=0D=0A								end;=0D=0A								begin=0D=
=0A									begin=0D=0A										fr1:=3DFRACTION(test_nums(i1),test_nums(i2=
));=0D=0A										fr2:=3DFRACTION(test_nums(i3),test_nums(i4));=0D=0A					=
				exception=0D=0A										when others =3D>=0D=0A											goto NEXT_LOO=
P_BINARY_MOD;=0D=0A									end;=0D=0A									fr3:=3DFRACTION(fr1 MOD fr2)=
;=0D=0A								exception=0D=0A									when E : others =3D> =0D=0A									=
	frError:=3DTo_Unbounded_String(Ada.Exceptions.Exception_Name(E));=0D=0A			=
					end;=0D=0A=0D=0A								-- expect divide by zero if the top of the sec=
ond fraction is 0=0D=0A								if flError =3D NoError_String and test_nums(=
i3)=3D0 then=0D=0A									flError:=3DTo_Unbounded_String("CONSTRAINT_ERROR=
");=0D=0A								end if;=0D=0A								=0D=0A								if flError /=3D frError=
 then=0D=0A								--if frError =3D NoError_String then=0D=0A								if not=
 AlmostEqual(fl3,FLT(fr3)) then=0D=0A									put(output,test_nums(i1));=0D=
=0A									put(output," / ");=0D=0A									put(output,test_nums(i2));=0D=
=0A									put(output," MOD ");=0D=0A									put(output,test_nums(i3));=
=0D=0A									put(output," / ");=0D=0A									put(output,test_nums(i4));=
=0D=0A									put(output," =3D ");=0D=0A									if flError /=3D frError t=
hen=0D=0A										put(output,frError);=0D=0A										if frError =3D NoErr=
or_String then=0D=0A											put(output," (");=0D=0A											put(output=
,FLT(fr3));=0D=0A											put(output,")");=0D=0A										end if;=0D=0A		=
								put(output," !=3D ");=0D=0A										put(output,flError);=0D=0A				=
						--if flError =3D NoError_String then=0D=0A											put(output," (")=
;=0D=0A											put(output,fl3);=0D=0A											put(output,")");=0D=0A		=
								--end if;=0D=0A									else=0D=0A										put(output,fr3);=0D=0A	=
									put(output," (");=0D=0A										put(output,FLT(fr3));=0D=0A						=
				put(output,") !=3D ");=0D=0A										put(output,fl3);=0D=0A									en=
d if;=0D=0A									new_line(output);=0D=0A								end if;=0D=0A								end=
 if;=0D=0A								=0D=0A							end;=0D=0A							<<NEXT_LOOP_BINARY_MOD>>=0D=
=0A							null;=0D=0A						end loop;=0D=0A					end loop;=0D=0A				end loop;=
=0D=0A			end loop;=0D=0A=0D=0A=0D=0A			-- Test all Unary Operator Types=0D=
=0A			for op in UnaryOpType'range loop=0D=0A				for i1 in test_nums'range l=
oop=0D=0A					for i2 in test_nums'range loop=0D=0A						declare=0D=0A						=
	NoError_String:Unbounded_String:=3DTO_Unbounded_String("No Error");=0D=0A	=
						flError:Unbounded_String:=3DNoError_String;=0D=0A							frError:Unbou=
nded_String:=3DNoError_String;=0D=0A						begin=0D=0A							begin=0D=0A				=
				fl1:=3DFloat(test_nums(i1))/Float(test_nums(i2));=0D=0A								fl3:=3DD=
oUnaryOp(op,fl1);=0D=0A							exception=0D=0A								when E : others =3D> =
=0D=0A									flError:=3DTo_Unbounded_String(Ada.Exceptions.Exception_Name=
(E));=0D=0A							end;=0D=0A							begin=0D=0A								begin=0D=0A									f=
r1:=3DFRACTION(test_nums(i1),test_nums(i2));=0D=0A								exception=0D=0A		=
							when others =3D>=0D=0A										goto NEXT_LOOP_UNARY;=0D=0A								e=
nd;=0D=0A								fr3:=3DDoUnaryOp(op,fr1);=0D=0A							exception=0D=0A					=
			when E : others =3D> =0D=0A									frError:=3DTo_Unbounded_String(Ada.E=
xceptions.Exception_Name(E));=0D=0A							end;=0D=0A=0D=0A							-- expect =
overflow if the floating point answer is larger than the largest integer=0D=
=0A							if flError =3D NoError_String and (Float(Integer'Last)<fl3 or Flo=
at(Integer'First)>fl3) then=0D=0A								flError:=3DTo_Unbounded_String("CO=
NSTRAINT_ERROR");=0D=0A							end if;=0D=0A							=0D=0A							if flError /=
=3D frError then=0D=0A							--if frError =3D NoError_String then=0D=0A				=
			if not AlmostEqual(fl3,FLT(fr3)) then=0D=0A								put(output,GetUnaryOp=
(op));=0D=0A								put(output," ");=0D=0A								put(output,test_nums(i1))=
;=0D=0A								put(output," / ");=0D=0A								put(output,test_nums(i2));=
=0D=0A								put(output," =3D ");=0D=0A								if flError /=3D frError the=
n=0D=0A									put(output,frError);=0D=0A									if frError =3D NoError_S=
tring then=0D=0A										put(output," (");=0D=0A										put(output,FLT(f=
r3));=0D=0A										put(output,")");=0D=0A									end if;=0D=0A									p=
ut(output," !=3D ");=0D=0A									put(output,flError);=0D=0A									--if =
flError =3D NoError_String then=0D=0A										put(output," (");=0D=0A					=
					put(output,fl3);=0D=0A										put(output,")");=0D=0A									--end i=
f;=0D=0A								else=0D=0A									put(output,fr3);=0D=0A									put(outpu=
t," (");=0D=0A									put(output,FLT(fr3));=0D=0A									put(output,") !=
=3D ");=0D=0A									put(output,fl3);=0D=0A								end if;=0D=0A								ne=
w_line(output);=0D=0A							end if;=0D=0A							end if;=0D=0A							=0D=0A	=
					end;=0D=0A						<<NEXT_LOOP_UNARY>>=0D=0A						null;=0D=0A					end loo=
p;=0D=0A				end loop;=0D=0A			end loop;=0D=0A=0D=0A=0D=0A=0D=0A			-- Test a=
ll Comparison Operators=0D=0A			for op in CompType'range loop=0D=0A				for =
i1 in test_nums'range loop=0D=0A					for i2 in test_nums'range loop=0D=0A		=
				for i3 in test_nums'range loop=0D=0A							for i4 in test_nums'range lo=
op=0D=0A								declare=0D=0A									NoError_String:Unbounded_String:=3DTO=
_Unbounded_String("No Error");=0D=0A									flError:Unbounded_String:=3DNo=
Error_String;=0D=0A									frError:Unbounded_String:=3DNoError_String;=0D=
=0A								begin=0D=0A									begin=0D=0A										fl1:=3DFloat(test_nums(=
i1))/Float(test_nums(i2));=0D=0A										fl2:=3DFloat(test_nums(i3))/Float=
(test_nums(i4));=0D=0A										flb:=3DDoComp(fl1,op,fl2);=0D=0A									ex=
ception=0D=0A										when E : others =3D> =0D=0A											flError:=3DTo_=
Unbounded_String(Ada.Exceptions.Exception_Name(E));=0D=0A									end;=0D=
=0A									begin=0D=0A										begin=0D=0A											fr1:=3DFRACTION(test=
_nums(i1),test_nums(i2));=0D=0A											fr2:=3DFRACTION(test_nums(i3),tes=
t_nums(i4));=0D=0A										exception=0D=0A											when others =3D>=0D=
=0A												goto NEXT_LOOP_COMP;=0D=0A										end;=0D=0A										frb:=
=3DDoComp(fl1,op,fl2);=0D=0A									exception=0D=0A										when E : othe=
rs =3D> =0D=0A											frError:=3DTo_Unbounded_String(Ada.Exceptions.Exce=
ption_Name(E));=0D=0A									end;=0D=0A=0D=0A									if flError /=3D frEr=
ror then=0D=0A									--if frError =3D NoError_String then=0D=0A									i=
f flb /=3D frb then=0D=0A										put(output,test_nums(i1));=0D=0A								=
		put(output," / ");=0D=0A										put(output,test_nums(i2));=0D=0A							=
			put(output," ");=0D=0A										put(output,GetComp(op));=0D=0A										=
put(output," ");=0D=0A										put(output,test_nums(i3));=0D=0A										p=
ut(output," / ");=0D=0A										put(output,test_nums(i4));=0D=0A										=
put(output," =3D ");=0D=0A										if flError /=3D frError then=0D=0A					=
						put(output,frError);=0D=0A											if frError =3D NoError_String th=
en=0D=0A												put(output," (");=0D=0A												if frb then=0D=0A			=
										put(output,"true");=0D=0A												else=0D=0A													put(o=
utput,"false");=0D=0A												end if;=0D=0A												put(output,")");=
=0D=0A											end if;=0D=0A											put(output," !=3D ");=0D=0A							=
				put(output,flError);=0D=0A											--if flError =3D NoError_String th=
en=0D=0A												put(output," (");=0D=0A												if flb then=0D=0A			=
										put(output,"true");=0D=0A												else=0D=0A													put(o=
utput,"false");=0D=0A												end if;=0D=0A												put(output,")");=
=0D=0A											--end if;=0D=0A										end if;=0D=0A										new_line(o=
utput);=0D=0A									end if;=0D=0A									end if;=0D=0A								end;=0D=0A=
								<<NEXT_LOOP_COMP>>=0D=0A								null;=0D=0A							end loop;=0D=0A		=
				end loop;=0D=0A					end loop;=0D=0A				end loop;=0D=0A			end loop;=0D=
=0A=0D=0A=0D=0A=0D=0A		end;=0D=0A		=0D=0A		=0D=0A	end;=0D=0Aend fraction_te=
st_main;=0D=0A=0D=0A=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00fractions/fractions.adb=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=000100644=000003325=000000=
144=0000000025547=0007551202173=00015270=00 0=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00ustar  =00dstanley=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00users=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00------------------------------------------------------=
---------------------=0D=0A--                                              =
                         -- =0D=0A--                                       =
       Brian Turner             --=0D=0A--                                 =
             Project Management       --=0D=0A--                           =
                   Ada Program #2           --=0D=0A--                     =
                         Dr. Art White            --=0D=0A--               =
                               September 28, 1988       --=0D=0A--         =
                                                              --=0D=0A-----=
----------------------------------------------------------------------=0D=
=0A--   PROGRAM DESCRIPTION                                                =
 --=0D=0A--                                                                =
       --=0D=0A--      This package allows the user to use fractions in a p=
rogram.      --=0D=0A--      The following functions and procedures are all=
owed for the       --=0D=0A--      fractional types.  All functions return =
fractional_type unless   --=0D=0A--      otherwise specified.  All fraction=
s are always stored with the   --=0D=0A--      fractions reduced to simples=
t terms.                             --=0D=0A--                            =
                                           --=0D=0A--      All of the funct=
ions in the specifications sections will not be  --=0D=0A--      repeated h=
ere.  Please refer to them for descriptions.           --=0D=0A--          =
                                                             -- =0D=0A--   =
   Reduce (frac) returns the fraction in its simplest terms.        --=0D=
=0A--      ex.  reduce (6/8) would return 3/4.                             =
 --=0D=0A--                                                                =
       --=0D=0A------------------------------------------------------------=
---------------=0D=0A=0D=0A   WITH Text_IO, IO_Exceptions;=0D=0A   Use Text=
_IO;=0D=0A   PACKAGE BODY Fractions IS=0D=0A   PACKAGE Integer_Text_IO IS N=
EW TEXT_IO.Integer_IO(integer);=0D=0A   USE Integer_Text_IO;=0D=0A=0D=0A   =
   =0D=0A      FUNCTION Reduce=0D=0A         (Frac  : IN  Fraction_Type ) R=
ETURN Fraction_Type IS=0D=0A         Result : Fraction_Type;=0D=0A         =
T : Integer;=0D=0A         A : Integer :=3D ABS (Frac.Numerator);=0D=0A    =
     B : Integer :=3D ABS (Frac.Denominator);=0D=0A         BEGIN          =
           =0D=0A            WHILE A /=3D 0 LOOP                        -- =
Find greatest common =0D=0A               T :=3D B;                        =
       --    denominator=0D=0A               B :=3D A;=0D=0A               =
A :=3D T MOD A;=0D=0A            END LOOP;=0D=0A            Result.Numerato=
r :=3D Frac.Numerator / B;       -- Put fractions in =0D=0A            Resu=
lt.Denominator :=3D Frac.Denominator / B;   --    simplest form=0D=0A      =
      IF Result.Denominator < 0                     -- Sign in numerator=0D=
=0A                 THEN Result.Denominator :=3D -Result.Denominator;=0D=0A=
                      Result.Numerator :=3D -Result.Numerator;=0D=0A       =
          END IF;=0D=0A            IF Result.Denominator =3D 0             =
   -- If numerator =3D 0 then=0D=0A                 THEN RAISE Numeric_Erro=
r;           --    raise numeric error=0D=0A                 END IF;=0D=0A =
           RETURN Result;=0D=0A         END Reduce;=0D=0A=0D=0A =0D=0A=0D=
=0A      FUNCTION "/"=0D=0A         (Top    : IN  Integer;=0D=0A          B=
ottom : IN  Integer ) RETURN Fraction_Type IS=0D=0A         Result  : Fract=
ion_Type;=0D=0A         BEGIN =0D=0A            Result.Numerator :=3D Top;=
=0D=0A            Result.Denominator :=3D Bottom;=0D=0A            RETURN R=
educe(Result);=0D=0A         END "/";=0D=0A=0D=0A      FUNCTION Fraction=0D=
=0A         (Numerator   : IN  Integer;=0D=0A          Denominator : IN  In=
teger :=3D 1 ) RETURN Fraction_Type IS=0D=0A         BEGIN=0D=0A           =
 RETURN Numerator / Denominator;=0D=0A         END Fraction;=0D=0A=0D=0A   =
   FUNCTION Numerator=0D=0A         (Frac  : IN  Fraction_Type ) RETURN Int=
eger IS=0D=0A         BEGIN=0D=0A            RETURN Frac.Numerator;=0D=0A  =
       END Numerator;=0D=0A=0D=0A      FUNCTION Denominator=0D=0A         (=
Frac  : IN  Fraction_Type ) RETURN Integer IS=0D=0A         BEGIN=0D=0A    =
        RETURN Frac.Denominator;=0D=0A         END Denominator;=0D=0A=0D=0A=
      FUNCTION Flt=0D=0A         (Frac  : IN  Fraction_Type ) RETURN Float =
IS=0D=0A         BEGIN=0D=0A            RETURN Float(Frac.Numerator) / Floa=
t(Frac.Denominator);=0D=0A         END Flt;=0D=0A=0D=0A      FUNCTION Int=
=0D=0A         (Frac  : IN  Fraction_Type ) RETURN Integer IS=0D=0A        =
 BEGIN=0D=0A		 	If Frac.Numerator =3D 0=0D=0A			Then	RETURN 0;=0D=0A			End =
If;=0D=0A            RETURN Integer (Flt (Frac) -0.5);=0D=0A         END In=
t;=0D=0A=0D=0A      FUNCTION "+" =0D=0A         (Frac  : IN  Fraction_Type =
) RETURN Fraction_Type IS=0D=0A         BEGIN=0D=0A            RETURN Frac;=
=0D=0A         END "+";=0D=0A=0D=0A      FUNCTION "-" =0D=0A         (Frac =
 : IN  Fraction_Type ) RETURN Fraction_Type IS=0D=0A         Result : Fract=
ion_Type :=3D Frac;=0D=0A         BEGIN=0D=0A            Result.Numerator :=
=3D -Result.Numerator;=0D=0A            RETURN Result;=0D=0A         END "-=
";=0D=0A=0D=0A=0D=0A =0D=0A      FUNCTION "ABS" =0D=0A         (Frac  : IN =
 Fraction_Type ) RETURN Fraction_Type IS=0D=0A         BEGIN=0D=0A         =
   IF Frac < Fraction(0) =0D=0A                 THEN RETURN -Frac;=0D=0A   =
              ELSE RETURN Frac;=0D=0A                 END IF; =0D=0A       =
  END "ABS";=0D=0A=0D=0A      FUNCTION Inverse=0D=0A         (Frac  : IN  F=
raction_Type ) RETURN Fraction_Type IS=0D=0A         Result : Fraction_Type=
;=0D=0A         BEGIN=0D=0A            Result.Numerator :=3D Frac.Denominat=
or;=0D=0A            Result.Denominator :=3D Frac.Numerator;=0D=0A         =
   RETURN Reduce(Result);=0D=0A         END Inverse;=0D=0A=0D=0A       FUNC=
TION "+" =0D=0A         (Frac1 : IN  Fraction_Type;=0D=0A          Frac2 : =
IN  Fraction_Type ) RETURN Fraction_Type IS=0D=0A         Result : Fraction=
_Type;=0D=0A         BEGIN=0D=0A            Result.Numerator :=3D Frac1.Num=
erator * Frac2.Denominator +=0D=0A                                Frac2.Num=
erator * Frac1.Denominator;=0D=0A            Result.Denominator :=3D Frac1.=
Denominator * Frac2.Denominator;=0D=0A            RETURN Reduce(Result);=0D=
=0A         END "+";=0D=0A=0D=0A      FUNCTION "-" =0D=0A         (Frac1 : =
IN  Fraction_Type;=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Fracti=
on_Type IS=0D=0A         BEGIN=0D=0A            RETURN (-Frac2) + Frac1; =
=0D=0A         END "-";=0D=0A=0D=0A      FUNCTION "*" =0D=0A         (Frac1=
 : IN  Fraction_Type;=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Fra=
ction_Type IS=0D=0A         Result : Fraction_Type;=0D=0A         BEGIN=0D=
=0A            Result.Numerator :=3D Frac1.Numerator * Frac2.Numerator;=0D=
=0A            Result.Denominator :=3D Frac1.Denominator * Frac2.Denominato=
r;=0D=0A            RETURN Reduce(Result);=0D=0A         END "*";=0D=0A=0D=
=0A      FUNCTION "/" =0D=0A         (Frac1 : IN  Fraction_Type;=0D=0A     =
     Frac2 : IN  Fraction_Type ) RETURN Fraction_Type IS=0D=0A         BEGI=
N=0D=0A            RETURN Frac1 * Inverse (Frac2);=0D=0A         END "/";=
=0D=0A=0D=0A=0D=0A =0D=0A      FUNCTION "**" =0D=0A         (Frac  : IN  Fr=
action_Type;=0D=0A          Int   : IN  Integer        ) RETURN Fraction_Ty=
pe IS=0D=0A         Result : Fraction_Type;=0D=0A		 tempNum : Integer;=0D=
=0A		 tempDen : Integer;=0D=0A		 tempInt : Integer;=0D=0A         BEGIN=0D=
=0A=0D=0A		 	tempNum :=3D Frac.Numerator;=0D=0A			tempDen :=3D Frac.Denomin=
ator;=0D=0A			tempInt :=3D Int;=0D=0A            if Int < 0=0D=0A			THEN=0D=
=0A			BEGIN=0D=0A				tempDen :=3D Frac.Numerator;=0D=0A				tempNum :=3D Fra=
c.Denominator;=0D=0A				tempInt :=3D -tempInt;=0D=0A			END;=0D=0A			End If;=
=0D=0A				=0D=0A			Result.Numerator :=3D tempNum ** tempInt;=0D=0A         =
   Result.Denominator :=3D tempDen ** tempInt;=0D=0A            RETURN Redu=
ce(Result);=0D=0A         END "**";=0D=0A=0D=0A      FUNCTION "MOD" =0D=0A =
        (Frac1 : IN  Fraction_Type;=0D=0A          Frac2 : IN  Fraction_Typ=
e ) RETURN Integer IS=0D=0A         BEGIN=0D=0A		 	If ((Frac1 * Frac2) < 0/=
1)=0D=0A			Then=0D=0A				RETURN -(Int(ABS(Frac1)/ABS(Frac2)));=0D=0A			End =
If;=0D=0A            RETURN Int (Frac1 / Frac2);=0D=0A         END "MOD";=
=0D=0A=0D=0A      FUNCTION "REM" =0D=0A         (Frac1 : IN  Fraction_Type;=
=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Fraction_Type IS=0D=0A  =
       BEGIN=0D=0A          	  Return ((Frac1 / Frac2) - ((Frac1 MOD Frac2)=
/1));=0D=0A         END "REM";=0D=0A=0D=0A     FUNCTION ">" =0D=0A         =
(Frac1 : IN  Fraction_Type;=0D=0A          Frac2 : IN  Fraction_Type ) RETU=
RN Boolean IS=0D=0A          Int1, Int2 : Integer;=0D=0A         BEGIN=0D=
=0A            Int1 :=3D Frac1.Numerator * Frac2.Denominator;=0D=0A        =
    Int2 :=3D Frac2.Numerator * Frac1.Denominator;=0D=0A            RETURN =
Int1 > Int2;=0D=0A         END ">";=0D=0A=0D=0A      FUNCTION ">=3D" =0D=0A=
         (Frac1 : IN  Fraction_Type;=0D=0A          Frac2 : IN  Fraction_Ty=
pe ) RETURN Boolean IS=0D=0A         BEGIN=0D=0A            RETURN (Frac1 >=
 Frac2) OR (Frac1 =3D Frac2);=0D=0A         END ">=3D";=0D=0A=0D=0A      FU=
NCTION "<" =0D=0A         (Frac1 : IN  Fraction_Type;=0D=0A          Frac2 =
: IN  Fraction_Type ) RETURN Boolean IS=0D=0A         BEGIN=0D=0A          =
  RETURN NOT (Frac1 >=3D Frac2);=0D=0A         END "<";=0D=0A=0D=0A      FU=
NCTION "<=3D" =0D=0A         (Frac1 : IN  Fraction_Type;=0D=0A          Fra=
c2 : IN  Fraction_Type ) RETURN Boolean IS=0D=0A         BEGIN=0D=0A       =
     RETURN NOT (Frac1 > Frac2);=0D=0A         END "<=3D";=0D=0A=0D=0A=0D=
=0A =0D=0A      PROCEDURE Get =0D=0A         (Frac  : OUT Fraction_Type) IS=
=0D=0A         Line   : String (1..80);=0D=0A         Length : Integer;=0D=
=0A         I      : Integer; =0D=0A         BEGIN=0D=0A            Text_IO=
.Get_Line (Line, Length);        -- Get string input=0D=0A            I :=
=3D 1;=0D=0A            LOOP=0D=0A               EXIT WHEN Line(I) =3D '/';=
             -- Find location of '/'=0D=0A               IF I =3D Length =
=0D=0A                   THEN I :=3D 0;=0D=0A                        EXIT;=
=0D=0A                   END IF;=0D=0A               I :=3D I + 1;=0D=0A   =
         END LOOP; =0D=0A            IF I =3D 0                            =
    -- Create new fraction =0D=0A                THEN Frac :=3D (Fraction (=
Integer'Value (Line(1..Length))));=0D=0A                ELSE Frac :=3D (Int=
eger'Value (Line(1..(I-1)))) /=0D=0A                                       =
(Integer'Value (Line((I+1)..Length)));=0D=0A                END IF;=0D=0A  =
       END Get;=0D=0A=0D=0A      PROCEDURE Get =0D=0A         (File  : IN  =
File_Type;=0D=0A          Frac  : OUT Fraction_Type) IS=0D=0A         Line =
  : String (1..80);=0D=0A         Length : Integer;=0D=0A         I      : =
Integer; =0D=0A         BEGIN=0D=0A            Text_IO.Get_Line (File, Line=
, Length);  -- Get string input=0D=0A            I :=3D 1;=0D=0A           =
 LOOP=0D=0A               EXIT WHEN Line(I) =3D '/';             -- Find lo=
cation of '/'=0D=0A               IF I =3D Length =0D=0A                   =
THEN I :=3D 0;=0D=0A                        EXIT;=0D=0A                   E=
ND IF;=0D=0A               I :=3D I + 1;=0D=0A            END LOOP; =0D=0A =
           IF I =3D 0                                -- Create new fraction=
=0D=0A                THEN Frac :=3D (Fraction (Integer'Value (Line(1..Leng=
th))));=0D=0A                ELSE Frac :=3D (Integer'Value (Line(1..(I-1)))=
) /=0D=0A                                       (Integer'Value (Line((I+1).=
.Length)));=0D=0A                END IF;=0D=0A         END Get;=0D=0A=0D=0A=
      PROCEDURE Put=0D=0A         (Frac  : IN  Fraction_Type) IS=0D=0A     =
     =0D=0A         BEGIN=0D=0A            Integer_Text_IO.Put (Frac.Numera=
tor, Width=3D>0);=0D=0A            Text_IO.Put ('/');=0D=0A            Inte=
ger_Text_IO.Put (Frac.Denominator, Width=3D>0);=0D=0A         END Put;=0D=
=0A=0D=0A=0D=0A =0D=0A      PROCEDURE Put=0D=0A         (File  : IN  File_T=
ype;=0D=0A          Frac  : IN  Fraction_Type) IS=0D=0A           =0D=0A   =
      BEGIN=0D=0A            Integer_Text_IO.Put (File, Frac.Numerator, Wid=
th=3D>0);=0D=0A            Text_IO.Put (File, '/');=0D=0A            Intege=
r_Text_IO.Put (File, Frac.Denominator, Width=3D>0);=0D=0A         END Put;=
=0D=0A=0D=0A   END Fractions;=0D=0A=0D=0A=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00fractions/fractions.ads=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=000100644=000003325=000000144=0000000046114=0007551202176=00015305=00 0=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
ustar  =00dstanley=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00users=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00------------------------=
---------------------------------------------------=0D=0A--                =
                             Brian Turner              --=0D=0A--          =
                                   Project Management        --=0D=0A--    =
                                         Ada Program #2            --=0D=0A=
--                                             Dr. Art White             --=
=0D=0A--                                             September 28, 1988    =
    --=0D=0A---------------------------------------------------------------=
------------=0D=0A--   PROGRAM DESCRIPTION                                 =
                --=0D=0A--                                                 =
                      --=0D=0A--      This package allows the user to use f=
ractions in a program.      --=0D=0A--      The following functions and pro=
cedures are allowed for the       --=0D=0A--      fractional types.  All fu=
nctions return fractional_type unless   --=0D=0A--      otherwise specified=
.  All fractions are always stored with the   --=0D=0A--      fractions red=
uced to simplest terms.                             --=0D=0A--      (frac s=
tands for fractional_type.)                               --=0D=0A---------=
------------------------------------------------------------------=0D=0A-- =
     Type converting functions:                                       --=0D=
=0A--                                                                      =
 --=0D=0A--         integer "/" integer              Converts integers into=
 frac  --=0D=0A--                                          the first number=
 is the      --=0D=0A--                                          numerator,=
 the second is     --=0D=0A--                                          the =
denominator.             --=0D=0A--                                        =
                               --=0D=0A--         FRACTION (integer [, inte=
ger])   Another form of '/'.  The    --=0D=0A--                            =
              second integer is optional.  --=0D=0A--                      =
                                                 --=0D=0A--         NUMERAT=
OR (frac)             RETURNS Integer                  --=0D=0A--          =
                                Returns the numerator of the --=0D=0A--    =
                                      fraction.                    --=0D=0A=
--                                                                       --=
=0D=0A--         DENOMINATOR (frac)           RETURNS Integer              =
    --=0D=0A--                                          Returns the denomin=
ator of   --=0D=0A--                                          the fraction.=
                --=0D=0A--                                                 =
                      --=0D=0A--         INT (frac)                   RETUR=
NS Integer                  --=0D=0A--                                     =
     Returns the largest integer  --=0D=0A--                               =
           equal to or small than the   --=0D=0A--                         =
                 fraction.                    --=0D=0A--                   =
                                                    --=0D=0A--         FLT =
(frac)                   RETURNS Float                    --=0D=0A--       =
                                   Returns a floating point     --=0D=0A-- =
                                         approximation of fraction    --=0D=
=0A------------------------------------------------------------------------=
---=0D=0A--      Unary functions                                           =
       --=0D=0A--                                                          =
             --=0D=0A--         "+" frac                         Returns th=
e original         --=0D=0A--                                          frac=
tion.                    --=0D=0A--                                        =
                               --=0D=0A--         "-" frac                 =
        Returns the negative of the  --=0D=0A--                            =
              fraction.                    --=0D=0A--                      =
                                                 --=0D=0A--         ABS (fr=
ac)                       Returns the absolute value   --=0D=0A--          =
                                of the fraction.             --=0D=0A--    =
                                                                   --=0D=0A=
--         INVERSE (frac)                   Returns the value of one     --=
=0D=0A--                                          divided by the fraction. =
    --=0D=0A--                                          ( 1/frac )         =
          --=0D=0A---------------------------------------------------------=
------------------=0D=0A---------------------------------------------------=
------------------------=0D=0A--     Binary functions                      =
                            --=0D=0A--                                     =
                                  --=0D=0A--         frac "+" frac         =
           Adds the two fractions and   --=0D=0A--                         =
                 returns the result.          --=0D=0A--                   =
                                                    --=0D=0A--         frac=
 "-" frac                    Subtracts the second frac    --=0D=0A--       =
                                   from the first, returning    --=0D=0A-- =
                                         the result.                  --=0D=
=0A--                                                                      =
 --=0D=0A--         frac "*" frac                    Multiplies the fractio=
ns     --=0D=0A--                                          and returns the =
result.      --=0D=0A--                                                    =
                   --=0D=0A--         frac "/" frac                    Divi=
des the first fraction   --=0D=0A--                                        =
  by the second, returning     --=0D=0A--                                  =
        the result.                  --=0D=0A--                            =
                                           --=0D=0A--         frac "**" int=
eger                Raises the fractions to the  --=0D=0A--                =
                          integer power, and returns   --=0D=0A--          =
                                the result.                  --=0D=0A--    =
                                                                   --=0D=0A=
--         frac MOD frac                RETURNS integer                  --=
=0D=0A--                                          Returns the integer porti=
on  --=0D=0A--                                          of frac / frac.    =
          --=0D=0A--                                                       =
                --=0D=0A--         frac REM frac                    Returns=
 the fractional part  --=0D=0A--                                          o=
f frac / frac.  The value   --=0D=0A--                                     =
     will always be less than the --=0D=0A--                               =
           second fraction.             --=0D=0A--                         =
                                              --=0D=0A---------------------=
------------------------------------------------------=0D=0A--     Boolean =
functions (returning boolean)                             --=0D=0A--       =
                                                                --=0D=0A-- =
        frac ">" frac                    Returns TRUE if first frac   --=0D=
=0A--                                          is larger than the second.  =
 --=0D=0A--                                                                =
       --=0D=0A--         frac ">=3D" frac                   Returns FALSE =
is first frac  --=0D=0A--                                          is small=
er than the second.  --=0D=0A--                                            =
                           --=0D=0A--         frac "<" frac                =
    Returns TRUE if first frac   --=0D=0A--                                =
          is smaller than the second.  --=0D=0A--                          =
                                             --=0D=0A--         frac "<=3D"=
 frac                   Returns FALSE if first frac  --=0D=0A--            =
                              is larger than the second.   --=0D=0A--------=
-------------------------------------------------------------------=0D=0A--=
     Input / Output procedures                                         --=
=0D=0A--                                                                   =
    --=0D=0A--         Get ([FILE, ] frac)              Allows the user to =
enter     --=0D=0A--                                          a fraction (o=
ptionally from  --=0D=0A--                                          a file)=
 in the form          --=0D=0A--                                          "=
int/int". (ex. 1/2 34/1)    --=0D=0A--                                     =
                                  --=0D=0A--         Put ([FILE, ] frac [,B=
ASE =3D> integer])                        --=0D=0A--                       =
                   Displays the fraction to     --=0D=0A--                 =
                         the screen or an optional    --=0D=0A--           =
                               file.                        --=0D=0A--     =
                                                                  --=0D=0A-=
--------------------------------------------------------------------------=
=0D=0A =0D=0A   WITH Text_IO ;=0D=0A   USE  text_IO ;=0D=0A=0D=0A   PACKAGE=
 Fractions IS=0D=0A      TYPE Fraction_Type IS PRIVATE;=0D=0A=0D=0A   PACKA=
GE My_Int IS NEW TEXT_IO.Integer_IO(integer);=0D=0A   USE My_Int;=0D=0A=0D=
=0A-----------------------------------=0D=0A---  TYPE CONVERSION FUNCTIONS =
 ---=0D=0A---                             ---------------------------------=
----------=0D=0A---    These functions handle the various type conversions =
needed by    ---=0D=0A---    the user.                                     =
                   ---=0D=0A-----------------------------------------------=
----------------------------=0D=0A                                         =
                               ---=0D=0A      FUNCTION "/"                 =
                                     ---=0D=0A         (Top    : IN  Intege=
r;                                         ---=0D=0A          Bottom : IN  =
Integer ) RETURN Fraction_Type;                  ---=0D=0A                 =
                                                       ---=0D=0A      FUNCT=
ION Fraction                                                 ---=0D=0A     =
    (Numerator   : IN Integer;                                     ---=0D=
=0A          Denominator : IN Integer :=3D 1 ) RETURN Fraction_Type;       =
  ---=0D=0A                                                                =
        ---=0D=0A      FUNCTION Numerator                                  =
              ---=0D=0A         (Frac  : IN  Fraction_Type ) RETURN Integer=
;                   ---=0D=0A                                              =
                          ---=0D=0A      FUNCTION Denominator              =
                                ---=0D=0A         (Frac  : IN  Fraction_Typ=
e ) RETURN Integer;                   ---=0D=0A                            =
                                            ---=0D=0A      FUNCTION Flt    =
                                                  ---=0D=0A         (Frac  =
: IN  Fraction_Type ) RETURN Float;                     ---=0D=0A          =
                                                              ---=0D=0A    =
  FUNCTION Int                                                      ---=0D=
=0A         (Frac  : IN  Fraction_Type ) RETURN Integer;                   =
---=0D=0A                                                                  =
      ---=0D=0A------------------------------------------------------------=
---------------=0D=0A=0D=0A--------------------------=0D=0A---  UNARY FUNCT=
IONS   ---=0D=0A---                    ------------------------------------=
----------------=0D=0A---    These functions need only one parameter to be =
provided.  The     ---=0D=0A---    header comments gives a description of e=
ach function.            ---=0D=0A-----------------------------------------=
----------------------------------=0D=0A                                   =
                                     ---=0D=0A      FUNCTION "+"           =
                                           ---=0D=0A         (Frac  : IN  F=
raction_Type ) RETURN Fraction_Type;             ---=0D=0A                 =
                                                       ---=0D=0A      FUNCT=
ION "-"                                                      ---=0D=0A     =
    (Frac  : IN  Fraction_Type ) RETURN Fraction_Type;             ---=0D=
=0A                                                                        =
---=0D=0A      FUNCTION "ABS"                                              =
      ---=0D=0A         (Frac  : IN  Fraction_Type ) RETURN Fraction_Type; =
            ---=0D=0A                                                      =
                  ---=0D=0A      FUNCTION Inverse                          =
                        ---=0D=0A         (Frac  : IN  Fraction_Type ) RETU=
RN Fraction_Type;             ---=0D=0A                                    =
                                    ---=0D=0A------------------------------=
--------------------------------------------=0D=0A =0D=0A------------------=
--------=0D=0A---  BINARY FUNCTIONS  ---=0D=0A---                    ------=
----------------------------------------------=0D=0A---    These functions =
define comparison operations.  They return a     ---=0D=0A---    boolean.  =
'=3D' and '/=3D' are predefined for private types.         ---=0D=0A-------=
--------------------------------------------------------------------=0D=0A =
                                                                       ---=
=0D=0A      FUNCTION "+"                                                   =
   ---=0D=0A         (Frac1 : IN  Fraction_Type;                           =
         ---=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Fraction_Typ=
e;             ---=0D=0A                                                   =
                     ---=0D=0A      FUNCTION "-"                           =
                           ---=0D=0A         (Frac1 : IN  Fraction_Type;   =
                                 ---=0D=0A          Frac2 : IN  Fraction_Ty=
pe ) RETURN Fraction_Type;             ---=0D=0A                           =
                                             ---=0D=0A      FUNCTION "*"   =
                                                   ---=0D=0A         (Frac1=
 : IN  Fraction_Type;                                    ---=0D=0A         =
 Frac2 : IN  Fraction_Type ) RETURN Fraction_Type;             ---=0D=0A   =
                                                                     ---=0D=
=0A      FUNCTION "/"                                                      =
---=0D=0A         (Frac1 : IN  Fraction_Type;                              =
      ---=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Fraction_Type; =
            ---=0D=0A                                                      =
                  ---=0D=0A      FUNCTION "**"                             =
                        ---=0D=0A         (Frac  : IN  Fraction_Type;      =
                              ---=0D=0A          Int   : IN  Integer       =
) RETURN Fraction_Type;             ---=0D=0A                              =
                                          ---=0D=0A      FUNCTION "MOD"    =
                                                ---=0D=0A         (Frac1 : =
IN  Fraction_Type;                                    ---=0D=0A          Fr=
ac2 : IN  Fraction_Type ) RETURN Integer;                   ---=0D=0A      =
                                                                  ---=0D=0A=
      FUNCTION "REM"                                                    ---=
=0D=0A         (Frac1 : IN  Fraction_Type;                                 =
   ---=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Fraction_Type;    =
         ---=0D=0A                                                         =
               ---=0D=0A---------------------------------------------------=
------------------------=0D=0A---  BOOLEAN FUNCTIONS  ---=0D=0A---         =
            ---------------------------------------------------=0D=0A---   =
 These functions define comparison operations.  They return a     ---=0D=0A=
---    boolean.  '=3D' and '/=3D' are predefined for private types.        =
 ---=0D=0A-----------------------------------------------------------------=
----------=0D=0A                                                           =
             ---=0D=0A      FUNCTION ">"                                   =
                   ---=0D=0A         (Frac1 : IN  Fraction_Type;           =
                         ---=0D=0A          Frac2 : IN  Fraction_Type ) RET=
URN Boolean;                   ---=0D=0A                                   =
                                     ---=0D=0A      FUNCTION ">=3D"        =
                                             ---=0D=0A         (Frac1 : IN =
 Fraction_Type;                                    ---=0D=0A          Frac2=
 : IN  Fraction_Type ) RETURN Boolean;                   ---=0D=0A         =
                                                               ---=0D=0A   =
   FUNCTION "<"                                                      ---=0D=
=0A         (Frac1 : IN  Fraction_Type;                                    =
---=0D=0A          Frac2 : IN  Fraction_Type ) RETURN Boolean;             =
      ---=0D=0A                                                            =
            ---=0D=0A      FUNCTION "<=3D"                                 =
                    ---=0D=0A         (Frac1 : IN  Fraction_Type;          =
                          ---=0D=0A          Frac2 : IN  Fraction_Type ) RE=
TURN Boolean;                   ---=0D=0A----------------------------------=
-----------------------------------------=0D=0A =0D=0A---------------------=
---=0D=0A---  INPUT / OUTPUT  ---=0D=0A---                  ---------------=
---------------------------------------=0D=0A---    'Get' and 'Put' are def=
ined for Fraction_Type.  These may be     ---=0D=0A---    used with an opti=
onal file, and 'Put' with an optional base.     ---=0D=0A------------------=
---------------------------------------------------------=0D=0A            =
                                                            ---=0D=0A      =
PROCEDURE Get                                                     ---=0D=0A=
         (Frac  : OUT Fraction_Type );                                  ---=
=0D=0A                                                                     =
   ---=0D=0A      PROCEDURE Get                                            =
         ---=0D=0A         (File  : IN  File_Type;                         =
               ---=0D=0A          Frac  : OUT Fraction_Type );             =
                     ---=0D=0A                                             =
                           ---=0D=0A      PROCEDURE Put                    =
                                 ---=0D=0A         (Frac  : IN  Fraction_Ty=
pe);                                   ---                        									=
			---=0D=0A                                                               =
         ---=0D=0A      PROCEDURE Put                                      =
               ---=0D=0A         (File  : IN  File_Type;                   =
                     ---=0D=0A          Frac  : IN  Fraction_Type);        =
                           ---=0D=0A          										      ---          =
        												---=0D=0A                                              =
                          ---=0D=0A----------------------------------------=
-----------------------------------=0D=0A=0D=0A=0D=0A----------------------=
------------------=0D=0A---   Declaration of private types   ---=0D=0A-----=
----------------------------------------------------------------------=0D=
=0A                                                                        =
---=0D=0A   PRIVATE                                                        =
      ---=0D=0A      TYPE Fraction_Type IS                                 =
            ---=0D=0A         RECORD                                       =
                  ---=0D=0A            Numerator   : Integer;              =
                        ---=0D=0A            Denominator : Integer;        =
                              ---=0D=0A         END RECORD;                =
                                    ---=0D=0A                              =
                                          ---=0D=0A------------------------=
---------------------------------------------------=0D=0A   END Fractions;=
=0D=0A=0D=0A=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00fractions/testfile.txt=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=000100644=000003325=000000144=0000000013123=0007551202201=00015163=00 0=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00ust=
ar  =00dstanley=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00users=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00integer/integer=0A0/1 =3D 0=
/1=0A0=0A1=0A=3D=0A0=0A1=0A=0A3/4 =3D 3/4=0A3=0A4=0A=3D=0A3=0A4=0A=0A0/1 =
=3D Not A Number=0A1=0A0=0A=3D=0ACONSTRAINT_ERROR=0A=0A3/4 =3D 3/4=0A3=0A4=
=0A=3D=0A3=0A4=0A=0A2/4 =3D 1/2=0A2=0A4=0A=3D=0A1=0A2=0A=0A32/6 =3D 16/3=0A=
32=0A6=0A=3D=0A16=0A3=0A=0A-15/3 =3D -5/1=0A-15=0A3=0A=3D=0A-5=0A1=0A=0A15/=
-3 =3D 5/-1=0A15=0A-3=0A=3D=0A5=0A-1=0A=0A0/0 =3D 0/0=0A0=0A0=0A=3D=0ACONST=
RAINT_ERROR=0A=0A-0/1 =3D 0/1=0A-0=0A1=0A=3D=0A0=0A1=0A=3D=3D=3D=3D=0AFRACT=
ION=0A5 =3D 5/1=0A5=0A=3D=0A5=0A1=0A=0A-3 =3D -3/1=0A-3=0A=3D=0A-3=0A1=0A=
=0A0 =3D 0/1=0A0=0A=3D=0A0=0A1=0A=3D=3D=3D=3D=0AFRACTION2=0A0,1 =3D 0/1=0A0=
=0A1=0A=3D=0A0=0A1=0A=0A3,4 =3D 3/4=0A3=0A4=0A=3D=0A3=0A4=0A=0A0,1 =3D Not =
A Number=0A1=0A0=0A=3D=0ACONSTRAINT_ERROR=0A=0A3,4 =3D 3/4=0A3=0A4=0A=3D=0A=
3=0A4=0A=0A2,4 =3D 1/2=0A2=0A4=0A=3D=0A1=0A2=0A=0A32,6 =3D 16/3=0A32=0A6=0A=
=3D=0A16=0A3=0A=0A-15,3 =3D -5/1=0A-15=0A3=0A=3D=0A-5=0A1=0A=0A15,-3 =3D 5/=
-1=0A15=0A-3=0A=3D=0A5=0A-1=0A=0A0,0 =3D 0/0=0A0=0A0=0A=3D=0ACONSTRAINT_ERR=
OR=0A=0A-0,1 =3D 0/1=0A-0=0A1=0A=3D=0A0=0A1=0A=3D=3D=3D=3D=0ANUMERATOR=0A0/=
1 =3D 0=0A0=0A1=0A=3D=0A0=0A=0A3/4 =3D 3=0A3=0A4=0A=3D=0A3=0A=0A256/8 =3D 3=
2=0A256=0A8=0A=3D=0A32=0A=0A-300/45 =3D -20=0A-300=0A45=0A=3D=0A-20=0A=3D=
=3D=3D=3D=0ADENOMINATOR=0A0/1 =3D 1=0A0=0A1=0A=3D=0A1=0A=0A3/4 =3D 4=0A3=0A=
4=0A=3D=0A4=0A=0A8/3 =3D 3=0A8=0A3=0A=3D=0A3=0A=0A-300/45 =3D 3=0A-300=0A45=
=0A=3D=0A3=0A=3D=3D=3D=3D=0AINT=0A3/4 =3D 0=0A3=0A4=0A=3D=0A0=0A=0A0/1 =3D =
0 (result: -1)=0A0=0A1=0A=3D=0A0=0A=0A0/5 =3D 0 (result: -1)=0A0=0A5=0A=3D=
=0A0=0A=0A8/3 =3D 2=0A8=0A3=0A=3D=0A2=0A=0A10/2 =3D 5=0A10=0A2=0A=3D=0A5=0A=
=0A-16/3 =3D -6=0A-16=0A3=0A=3D=0A-6=0A=3D=3D=3D=3D=0AFLT=0A3/4 =3D 0.75=0A=
3=0A4=0A=3D=0A.75=0A=0A0/1 =3D 0.0=0A0 =0A1=0A=3D=0A0.0=0A=0A25/4 =3D 6.25=
=0A25=0A4=0A=3D=0A6.25=0A=0A-227/7 =3D -32.4287=0A-227=0A7=0A=3D=0A-32.4287=
=0A=3D=3D=3D=3D=0AUNARY+=0A+3/4 =3D 3/4=0A3=0A4=0A=3D=0A3=0A4=0A=0A+(-3/4) =
=3D -3/4=0A-3=0A4=0A=3D=0A-3=0A4=0A=0A+0/1 =3D 0/1=0A0=0A1=0A=3D=0A0=0A1=0A=
=0A-10/-8 =3D 5/4=0A-10=0A-8=0A=3D=0A5=0A4=0A=3D=3D=3D=3D=0AUNARY-=0A-3/4 =
=3D -3/4=0A3=0A4=0A=3D=0A-3=0A4=0A=0A-(-3/4) =3D 3/4=0A-3=0A4=0A=3D=0A3=0A4=
=0A=0A-0/1 =3D 0/1=0A0=0A1=0A=3D=0A0=0A1=0A=0A-(-40/-32) =3D -5/4=0A-40=0A-=
32=0A=3D=0A-5=0A4=0A=3D=3D=3D=3D=0AABS=0A-3/4 =3D 3/4=0A-3=0A4=0A=3D=0A3=0A=
4=0A=0A3/4 =3D 3/4=0A3=0A4=0A=3D=0A3=0A4=0A=0A0/1 =3D 0/1=0A0=0A1=0A=3D=0A0=
=0A1=0A=3D=3D=3D=3D=0AINVERSE=0A-3/4 =3D -4/3=0A-3=0A4=0A=3D=0A-4=0A3=0A=0A=
3/4 =3D 4/3=0A3=0A4=0A=3D=0A4=0A3=0A=0A0/1 =3D ERROR=0A0=0A1=0A=3D=0ACONSTR=
AINT_ERROR=0A=0A12/4 =3D 1/3=0A12=0A4=0A=3D=0A1=0A3=0A=3D=3D=3D=3D=0ABINARY=
+=0A12/8 + 16/5 =3D 47/10=0A12=0A8=0A+=0A16=0A5=0A=3D=0A47=0A10=0A=0A17/9 +=
 0/1 =3D 17/9=0A17=0A9=0A+=0A0=0A1=0A=3D=0A17=0A9=0A=0A0/1 + 0/1 =3D 0/1=0A=
0=0A1=0A+=0A0=0A1=0A=3D=0A0=0A1=0A=0A-99/100 + -1/1000 =3D -991/1000=0A-99=
=0A100=0A+=0A-1=0A1000=0A=3D=0A-991=0A1000=0A=0A-39/40 + 57/30 =3D 37\40=0A=
-39=0A40=0A+=0A57=0A30=0A=3D=0A37=0A40=0A=0A8/1689357 + 7/1584359 =3D 35000=
53/382363995309 (CONSTRAINT_ERROR)=0A8=0A1689357=0A+=0A7=0A1584359=0A=3D=0A=
CONSTRAINT_ERROR=0A=3D=3D=3D=3D=0ABINARY-=0A15/7 - 8/1 =3D -41/7=0A15=0A7=
=0A-=0A8=0A1=0A=3D=0A-41=0A7=0A=0A10/3 - 0/1 =3D 10/3=0A10=0A3=0A-=0A0=0A1=
=0A=3D=0A10=0A3=0A=0A0/1 - 0/1 =3D 0/1=0A0=0A1=0A-=0A0=0A1=0A=3D=0A0=0A1=0A=
=0A-25/14 - -14/7=3D 3/14=0A-25=0A14=0A-=0A-14=0A7=0A=3D=0A3=0A14=0A=0A8/16=
89357 - 7/1584359 =3D 121339/382363995309 (CONSTRAINT_ERROR)=0A8=0A1689357=
=0A-=0A7=0A1584359=0A=3D=0ACONSTRAINT_ERROR=0A=3D=3D=3D=3D=0ABINARY*=0A3/4 =
* 3/4 =3D 9/16=0A3=0A4=0A*=0A3=0A4=0A=3D=0A9=0A16=0A=0A-65/879 * 2386/75421=
3694 =3D -77545/331476914118 (CONSTRAINT)=0A-65=0A879=0A*=0A2386=0A75421369=
4=0A=3D=0ACONSTRAINT_ERROR=0A=0A-25/89 * -44/90 =3D 110/801=0A-25=0A89=0A*=
=0A-44=0A90=0A=3D=0A110=0A801=0A=3D=3D=3D=3D=0ABINARY/=0A3/4 / 3/4 =3D 1/1=
=0A3=0A4=0A/=0A3=0A4=0A=3D=0A1=0A1=0A=0A12/3 / 5/6 =3D 24/5=0A12=0A3=0A/=0A=
5=0A6=0A=3D=0A24=0A5=0A=0A-65/879 / 2386/754213694 =3D -24511945055 (CONSTR=
AINT_ERROR)=0A-65=0A879=0A/=0A2386=0A754213694=0A=3D=0ACONSTRAINT_ERROR=0A=
=3D=3D=3D=3D=0ABINARY**=0A5/12 ** 2 =3D 25/144=0A5=0A12=0A**=0A2=0A=3D=0A25=
=0A144=0A=0A-5/12 ** 2 =3D 25/144=0A-5=0A12=0A**=0A2=0A=3D=0A25=0A144=0A=0A=
5/12 ** -2 =3D 144/25 (raising to a negative power)=0A5=0A12=0A**=0A-2=0A=
=3D=0A144=0A25=0A=0A5/33 ** 0 =3D 1/1=0A5=0A33=0A**=0A0=0A=3D=0A1=0A1=0A=0A=
75/25 ** -1 =3D 1/3 (raising to a negative power)=0A75=0A25=0A**=0A-1=0A=3D=
=0A1=0A3=0A=0A1/186974 ** 2 =3D 1/34959276676 (CONSTRAINT_ERROR)=0A1=0A1869=
74=0A**=0A2=0A=3D=0ACONSTRAINT_ERROR=0A=3D=3D=3D=3D=0AMOD=0A5/1 MOD 2/1 =3D=
 2=0A5=0A1=0AMOD=0A2=0A1=0A=3D=0A2=0A=0A1/2 MOD 3/4 =3D 0=0A1=0A2=0AMOD=0A3=
=0A4=0A=3D=0A0=0A=0A-65/879 MOD 2386/754213694 =3D -23374 (result: 1199)=0A=
-65=0A879=0AMOD=0A2386=0A754213694=0A=3D=0A-23374=0A=0A-10/6 MOD -3/7 =3D 3=
=0A-10=0A6=0AMOD=0A-3=0A7=0A=3D=0A3=0A=0A-8/3 MOD 30/16 =3D -1 (result: -2)=
=0A-8=0A3=0AMOD=0A30=0A16=0A=3D=0A-1=0A=3D=3D=3D=3D=0AREM=0A5/1 REM 2/1 =3D=
 1/2 (result: 1/1)=0A5=0A1=0AREM=0A2=0A1=0A=3D=0A1=0A2=0A=0A1/2 REM 3/4 =3D=
 2/3 (result: 1/2)=0A1=0A2=0AREM=0A3=0A4=0A=3D=0A2=0A3=0A=0A-65/879 REM 238=
6/754213694 =3D -4/5 (result: 530968/764436721)=0A-65=0A879=0AREM=0A2386=0A=
754213694=0A=3D=0A-4=0A5=0A=0A-10/6 REM -3/7 =3D 16/18 (-8/21)=0A-10=0A6=0A=
REM=0A-3=0A7=0A=3D=0A16=0A18=0A=0A-8/3 REM  30/16 =3D -19/45 (result: 13/12=
)=0A-8=0A3=0AREM=0A30=0A16=0A=3D=0A-19=0A45=0A=3D=3D=3D=3D=0A>=0A3/4 > 3/4 =
=3D FALSE=0A3=0A4=0A>=0A3=0A4=0A=3D=0A0=0A=0A-3/4 > -3/4 =3D FALSE=0A-3=0A4=
=0A>=0A-3=0A4=0A=3D=0A0=0A=0A-5/4 > -1/2 =3D FALSE=0A-5=0A4=0A>=0A-1=0A2=0A=
=3D=0A0=0A=0A-3/5 > -50/10 =3D TRUE=0A-3=0A5=0A>=0A-50=0A10=0A=3D=0A1=0A=0A=
1687543391/1687543394 > 1687543390/1687543394 =3D TRUE=0A1687543391=0A16875=
43394 =0A>=0A1687543390=0A1687543394 =0A=3D=0A1=0A=0A6/18 > 20/10 =3D FALSE=
=0A6=0A18=0A>=0A20=0A10=0A=3D=0A0=0A=0A6/4 > 5/4 =3D TRUE=0A6=0A4=0A>=0A5=
=0A4=0A=3D=0A1=0A=0A-30/6 > 20/5 =3D FALSE=0A-30=0A6=0A>=0A20=0A5=0A=3D=0A0=
=0A=3D=3D=3D=3D=0A>=3D=0A3/4 >=3D 3/4 =3D TRUE=0A3=0A4=0A>=0A3=0A4=0A=3D=0A=
1=0A=0A-3/4 >=3D -3/4 =3D TRUE=0A-3=0A4=0A>=0A-3=0A4=0A=3D=0A1=0A=0A-5/4 >=
=3D -1/2 =3D FALSE=0A-5=0A4=0A>=3D=0A-1=0A2=0A=3D=0A0=0A=0A-3/5 >=3D -50/10=
 =3D TRUE=0A-3=0A5=0A>=3D=0A-50=0A10=0A=3D=0A1=0A=0A1687543390/1687543394 >=
=3D 1687543391/1687543394 =3D FALSE=0A1687543390=0A687543394 =0A>=3D=0A1687=
543391=0A687543394 =0A=3D=0A0=0A=0A6/18 >=3D 20/10 =3D FALSE=0A6=0A18=0A>=
=3D=0A20=0A10=0A=3D=0A0=0A=0A6/4 >=3D 5/4 =3D TRUE=0A6=0A4=0A>=3D=0A5=0A4=
=0A=3D=0A1=0A=0A-30/6 >=3D 20/5 =3D FALSE=0A-30=0A6=0A>=3D=0A20=0A5=0A=3D=
=0A0=0A=3D=3D=3D=3D=0A<=0A3/4 < 3/4 =3D FALSE=0A3=0A4=0A<=0A3=0A4=0A=3D=0A0=
=0A=0A-3/4 < -3/4 =3D FALSE=0A-3=0A4=0A<=0A-3=0A4=0A=3D=0A0=0A=0A-5/4 < -1/=
2 =3D TRUE=0A-5=0A4=0A<=0A-1=0A2=0A=3D=0A1=0A=0A-3/5 < -50/10 =3D FALSE=0A-=
3=0A5=0A<=0A-50=0A10=0A=3D=0A0=0A=0A1687543390/1687543394 < 1687543391/1687=
543394 =3D TRUE=0A1687543390=0A687543394 =0A<=0A1687543391=0A687543394 =0A=
=3D=0A1=0A=0A6/18 < 20/10 =3D TRUE=0A6=0A18=0A<=0A20=0A10=0A=3D=0A1=0A=0A6/=
4 < 5/4 =3D FALSE=0A6=0A4=0A<=0A5=0A4=0A=3D=0A0=0A=0A-30/6 < 20/5 =3D TRUE=
=0A-30=0A6=0A<=0A20=0A5=0A=3D=0A1=0A=3D=3D=3D=3D=0A<=3D=0A3/4 <=3D 3/4 =3D =
TRUE=0A3=0A4=0A<=3D=0A3=0A4=0A=3D=0A1=0A=0A-3/4 <=3D -3/4 =3D TRUE=0A-3=0A4=
=0A<=3D=0A-3=0A4=0A=3D=0A1=0A=0A-5/4 <=3D -1/2 =3D TRUE=0A-5=0A4=0A<=3D=0A-=
1=0A2=0A=3D=0A1=0A=0A-3/5 <=3D -50/10 =3D FALSE=0A-3=0A5=0A<=3D=0A-50=0A10=
=0A=3D=0A0=0A=0A1687543391/1687543394 <=3D 1687543390/1687543394 =3D FALSE=
=0A1687543391=0A687543394 =0A<=3D=0A1687543390=0A687543394 =0A=3D=0A0=0A=0A=
6/18 <=3D 20/10 =3D TRUE=0A6=0A18=0A<=3D=0A20=0A10=0A=3D=0A1=0A=0A6/4 <=3D =
5/4 =3D FALSE=0A6=0A4=0A<=3D=0A5=0A4=0A=3D=0A0=0A=0A-30/6 <=3D 20/5 =3D TRU=
E=0A-30=0A6=0A<=3D=0A20=0A5=0A=3D=0A1=0A=3D=3D=3D=3D=0APUTSTD=0Awrite 1/4 t=
o tempfile1.out (redirected output stream)=0A1=0A4=0Atempfile1.out=0A=0Awri=
te -1/6 to tempfile2.out (redirected output stream)=0A-1=0A6=0Atempfile2.ou=
t=0A=3D=3D=3D=3D=0AGETFILE=0Aread from a blank file=0Afilethatdoesntexist=
=0AADA.IO_EXCEPTIONS.END_ERROR=0A=0Atry to read from a file that doesn't ha=
ve numbers=0Atestfile.txt=0AADA.IO_EXCEPTIONS.USE_ERROR=0A=0Aread 1/4 from =
a normal file=0Atempfile1.out=0A1=0A4=0A=0Aread -1/6 from a normal file=0At=
empfile2.out=0A-1=0A6=0A=3D=3D=3D=3D=0APUTFILE=0Awrite 1/4 to tempfile3.out=
 =0A1=0A4=0Atempfile3.out=0A=0Awrite -1/6 to tempfile4.out=0A-1=0A6=0Atempf=
ile4.out=0A=3D=3D=3D=3D=0AGETSTD=0Aread from a blank file (redirected input=
 stream)=0Afilethatdoesntexist=0AADA.IO_EXCEPTIONS.END_ERROR=0A=0Aread 1/4 =
from a normal file (redirected input stream)=0Atempfile3.out=0A1=0A4=0A=0Ar=
ead -1/6 from a normal file (redirected input stream)=0Atempfile4.out=0A-1=
=0A6=0A=3D=3D=3D=3D=0A=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00fractions/Makefile=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
0100644=000003325=000000144=0000000001541=0007550177602=00014263=00 0=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00ustar =
 =00dstanley=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00users=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00.PHONY: test strip=0A=0Atest2:=
 fraction_test_main=0A	./fraction_test_main testfile.txt testout.txt 0=0A=
=0Atest: fraction_test_main=0A	./fraction_test_main testfile.txt testout.tx=
t 0 && cat testout.txt=0A=0Adebug: fraction_test_main=0A	./fraction_test_ma=
in testfile.txt testout.txt 5 && cat testout.txt=0A=0Afraction_test_main: f=
raction_test_main.adb fractions.adb fractions.ads testout.txt=0A	gnatmake -=
gnatEfo fraction_test_main=0A=0Atestout.txt:=0A	touch testout.txt=0A=0AFILE=
S:=3D fraction_test_main.adb fractions.adb fractions.ads testfile.txt Makef=
ile writeup.txt test_num.txt=0Afractions.tar: ${FILES} fraction_test_main=
=0A	cd ..; tar -cvf fractions/fractions.tar ${patsubst %,fractions/%,${FILE=
S}}=0A=0Astrip: fraction_test_main=0A	strip fraction_test_main=0A=0Asenddst=
an: fractions.tar=0A	mutt dstanley@css.tayloru.edu -a fractions.tar=0A=0Ase=
ndjorupp: fractions.tar=0A	mutt jorupp@css.tayloru.edu -a fractions.tar=0A=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00fractions/writeup.txt=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=000100644=0000033=
25=000000144=0000000002715=0007544235206=00015065=00 0=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00ustar  =00dstanley=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00users=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00Writeup on Brian's fraction package.=0A=0AOve=
rall:=0A   There should be a statement somewhere explicitly stating the bou=
nds of=0A   validity for this package, as well as informing the user that a=
ll fractions=0A   with be automatically reduced internally=0A=0AI/O routine=
s:=0A   Everything worked OK.  The only oddity we could find was with the e=
xception=0A   that was raised when attempting to read when there was no fra=
ction.  Instead=0A   of throwing DATA_ERROR like a normal GET(), it raised =
USE_ERROR.=0A=0AType conversion functions:=0A   INT(0/1) returns -1. (0 ove=
r any number returns -1)=0A=0AUnary functions:=0A   No problems.=0A=0ABinar=
y functions:=0A   1. overflow.  When an operation is performed that would c=
ause the =0A      internal representation to overflow (for instance, throug=
h base =0A      conversion), instead of raising an exception that could be =
handled =0A      by the caller, an incorrect answer is returned.  This is a=
 _very_ =0A      serious problem.=0A   2. ** (power operator) raises a CONS=
TRAINT_ERROR when attempting to =0A      raise to a negative number, which =
is not noted in the definition =0A      (and should be able to be calculate=
d)=0A   3. MOD is defined to be INT(frac/frac), which is _not_ what modulus=
 is.=0A   4. REM is defined to be what modulus should be --=0A			(frac1/fra=
c2)-(INT(frac1/frac2)/1)=0A   using the given definitions however,=0A   5. =
MOD is wrong for negative numbers=0A   6. REM is wrong for any values we co=
uld come up with=0A=0ABoolean functions:=0ANo problems.=0A=0A=0ADave Stanle=
y=0AJonathan Rupp=0A=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00fractions/test_num.txt=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=000100644=000003325=
=000000144=0000000000066=0007550133254=00015216=00 0=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00ustar  =00dstanley=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00users=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=009=0A0=0A1=0A-1=0A11=0A-11=0A612041=0A-612041=
=0A2147483647=0A-2147483648=0A=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=
=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00=00
--82I3+IH0IqGh5yIs--

From Owner-HyperNews@gabriel.css.tayloru.edu  Thu Oct 10 15:48:39 2002
Return-Path: <Owner-HyperNews@gabriel.css.tayloru.edu>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (mary.css.tayloru.edu [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 931621A946; Thu, 10 Oct 2002 15:48:35 -0500 (EST)
Received: from gabriel.css.tayloru.edu (gabriel.css.tayloru.edu [192.195.249.26])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id ADBB61A755; Thu, 10 Oct 2002 15:48:28 -0500 (EST)
Received: (from nobody@localhost)
	by gabriel.css.tayloru.edu (8.9.3/8.9.3) id PAA06805;
	Thu, 10 Oct 2002 15:48:28 -0500
Date: Thu, 10 Oct 2002 15:48:28 -0500
X-Authentication-Warning: gabriel.css.tayloru.edu: nobody set sender to Owner-HyperNews using -f
To: HyperNews@gabriel.css.tayloru.edu
From: "Bill Toll - Admin" <btoll@css.tayloru.edu>
Content-Type: text/plain; charset=iso-8859-1
X-HN-Forum: COS 312 - Visualization and GIS
Subject: Mapping Group User Space
Message-ID: <"/forums/cos312/36"@www.css.tayloru.edu>
X-Mailer: HyperNews at www.css.tayloru.edu 1.9.7
X-Hn-Loop: http://www.css.tayloru.edu/HyperNews/get/forums/cos312/36.html
Precedence: list
Errors-To: Owner-HyperNews@gabriel.css.tayloru.edu
Newsgroups: http://www.css.tayloru.edu/HyperNews/get/forums/cos312.html
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: 
X-Keywords:
X-UID: 1630

Visit this HyperNews at www.css.tayloru.edu message (to reply or unsubscribe) at: 
http://www.css.tayloru.edu/HyperNews/get/forums/cos312/36.html

You may mount your group user space on the XP machines by:

\\cos312\cos312f02XX

where XX is your group number.

Note that this mapping will not work from the dorms.

Also, the \\cos312\public space mentioned on the syllabus is not
implemented this semester.


-------------------------------------------------------------
Visit this HyperNews at www.css.tayloru.edu message (to reply or unsubscribe) at: 
http://www.css.tayloru.edu/HyperNews/get/forums/cos312/36.html

From centrallix-devel-admin@lists.sourceforge.net  Fri Oct 11 17:23:07 2002
Return-Path: <centrallix-devel-admin@lists.sourceforge.net>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (unknown [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id B30361A93C; Fri, 11 Oct 2002 17:23:06 -0500 (EST)
Received: from usw-sf-list2.sourceforge.net (usw-sf-fw2.sourceforge.net [216.136.171.252])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id A427F1A917; Fri, 11 Oct 2002 17:23:04 -0500 (EST)
Received: from usw-sf-list1-b.sourceforge.net ([10.3.1.13] helo=usw-sf-list1.sourceforge.net)
	by usw-sf-list2.sourceforge.net with esmtp (Exim 3.31-VA-mm2 #1 (Debian))
	id 1808BW-0006RR-00; Fri, 11 Oct 2002 15:23:06 -0700
Received: from 97.op-mobil.lightyearcom.com ([65.215.64.97] helo=LightSys.org)
	by usw-sf-list1.sourceforge.net with esmtp (Exim 3.31-VA-mm2 #1 (Debian))
	id 1808Ab-0004jU-00
	for <centrallix-devel@lists.sourceforge.net>; Fri, 11 Oct 2002 15:22:09 -0700
Received: from glaptop.lightsys.org (gbeeley-client.vpn.lightsys.org [10.254.7.210])
	by LightSys.org (8.11.6/8.11.6) with ESMTP id g9BMJIm01191
	for <centrallix-devel@lists.sourceforge.net>; Fri, 11 Oct 2002 18:19:18 -0400
Received: from LightSys.org (localhost.localdomain [127.0.0.1])
	by glaptop.lightsys.org (8.9.3/8.8.7) with ESMTP id RAA04039
	for <centrallix-devel@lists.sourceforge.net>; Fri, 11 Oct 2002 17:55:20 -0400
Message-ID: <3DA748C7.5D1EC4D9@LightSys.org>
From: Greg Beeley <Greg.Beeley@LightSys.org>
X-Mailer: Mozilla 4.77 [en] (X11; U; Linux 2.2.16-3 i586)
X-Accept-Language: en
MIME-Version: 1.0
To: centrallix-devel@lists.sourceforge.net
Subject: Re: [Centrallix-devel] Multi-Browser Support
References: <3D80D78E.1000503@css.tayloru.edu>
Content-Type: text/plain; charset=us-ascii
Content-Transfer-Encoding: 7bit
Sender: centrallix-devel-admin@lists.sourceforge.net
Errors-To: centrallix-devel-admin@lists.sourceforge.net
X-BeenThere: centrallix-devel@lists.sourceforge.net
X-Mailman-Version: 2.0.9-sf.net
Precedence: bulk
Reply-To: centrallix-devel@lists.sourceforge.net
X-Reply-To: Greg.Beeley@LightSys.org
List-Help: <mailto:centrallix-devel-request@lists.sourceforge.net?subject=help>
List-Post: <mailto:centrallix-devel@lists.sourceforge.net>
List-Subscribe: <https://lists.sourceforge.net/lists/listinfo/centrallix-devel>,
	<mailto:centrallix-devel-request@lists.sourceforge.net?subject=subscribe>
List-Id: Centrallix System Developers List <centrallix-devel.lists.sourceforge.net>
List-Unsubscribe: <https://lists.sourceforge.net/lists/listinfo/centrallix-devel>,
	<mailto:centrallix-devel-request@lists.sourceforge.net?subject=unsubscribe>
List-Archive: <http://sourceforge.net/mailarchives/forum.php?forum=centrallix-devel>
X-Original-Date: Fri, 11 Oct 2002 17:55:19 -0400
Date: Fri, 11 Oct 2002 17:55:19 -0400
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: A
X-Keywords:
X-UID: 1633

Hey y'all,

My apologies for the lengthy delay in giving an (expected) answer to these
things :)  I've been trying to catch up on some network admin related
stuff here at OMUSA, and haven't put a lot of time into Centrallix 
lately.  But....

> We had an informal meeting here at Taylor to discuss the problem of
> supporting multiple browsers.  We discussed the issue and came up with a
> proposal that we believe to be the best solution.

Cool!

> 1.  Have completely different widgets for each browser type that is
> [snip]
>  It would be a nightmare to maintain and to keep the widgets in sync
> with each other.

Yep...

> 2.  Have one set of widgets for all browsers, but build a compatibility
> [snip]
> each browser that we support.  The BIG downfall of this method is that
> it will have severe performance issues on the client side.  Another

Performance impact - yes.  Severe - I doubt it (see below).  Most of the
performance impact on the client side comes from when the page layout
is somehow modified (such as adding layers, etc.) afaik.  The code itself
*should* be pretty fast, all things considered ;)

> downfall is that we cannot do browser-specific tweaks (like using tables
> instead of layers in IE/Mozilla in some cases).

I think you still could.  But it would make for a fairly complicated 
widget driver.

> 3.  A hybrid between the two, using some form of inheritence.  If a
> global widget exists, and no client-specific widget exists, use the
> global one, otherwise a client-specific implementation would override
> the global widget.

Not a bad idea either...

> First off, there would be the client types.  We have concluded that IE6
> and Mozilla can be grouped together as W3C-DOM.  For the sake of this
> proposal, I'm going to use three client types (although there could be
> as many as needed).  They are NS4x, W3C-DOM, and XUL.

Probably a good idea to merge moz and ie if possible; has research been
done to determine how similar they really are?  I know there are differences
but much less than, for example, NS4 and IE.

> First, there can be global widgets that can be overridden if necessary
> for a specific client.  For instance, the form and objectsource widgets
> should be able to be used in all three client types because they are
> non-visual.  With a few modifications, I believe that could work.
> However, in the future it may be necessary for one client type to
> override the global widget.  This is possible.  If a client-specific
> widget exists, it will always override the global widget.

I guess my only hesitation here is that we probably should be focusing
on global widgets "almost" exclusively at first - that way we aren't
fighting the widget sync battle early on and can get functionality
in the system before high-performance in customized widgets.  Also, that
way we can get the design for the widgets nailed down before we end up
with multiple versions of each one ;) since the change cost goes up 
with multiple versions.

> We will extend the XML documentation in centrallix-doc to have a lot
> more descriptive information about each widget.  This information will
> [snip]

I would really like that... and the guys over on Bojangles.sf.net would
I'm sure be thrilled :)

> to the other widgets (in theory).  NOTE:  This is the biggest problem
> with this proposal.  If you have better ideas, please share!!  NOTE
> ALSO:  Keeping more detailed documentation about the widgets will allow
> Bojangles to be more powerful.  ;)

The thing I would like to avoid would be app files coming out with 
disclaimers on them that "this app works only on the moz widget set on
centrallix" or whatever.  If we're going to support multiple browsers
we'll need a way of sticking to that.  It would be OK to have a certain
nonessential feature be only available on a certain user agent, but
it should be something that that app wouldn't be impacted by it being
missing (like visual effects and such).

We're also going to need a base of knowledge regarding the different
browsers we're supporting, and the ability to test that as well.  Keeping
widgets in sync is something that would require a lot of discipline on
the widget author's part, too.

Anyhow, those are my thoughts on the issue....

Blessings,

Greg.

------------------------------------------------------------------------
Greg.Beeley@LightSys.org        LightSys - Redeeming Technology...
http://www.LightSys.org                    For God's Kingdom.
------------------------------------------------------------------------


-------------------------------------------------------
This sf.net email is sponsored by:ThinkGeek
Welcome to geek heaven.
http://thinkgeek.com/sf
_______________________________________________
Centrallix-devel mailing list
Centrallix-devel@lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/centrallix-devel

From centrallix-devel-admin@lists.sourceforge.net  Sun Oct 13 19:19:20 2002
Return-Path: <centrallix-devel-admin@lists.sourceforge.net>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (unknown [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id AD2381A942; Sun, 13 Oct 2002 19:19:19 -0500 (EST)
Received: from usw-sf-list2.sourceforge.net (usw-sf-fw2.sourceforge.net [216.136.171.252])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 9392A1A941; Sun, 13 Oct 2002 19:19:17 -0500 (EST)
Received: from usw-sf-list1-b.sourceforge.net ([10.3.1.13] helo=usw-sf-list1.sourceforge.net)
	by usw-sf-list2.sourceforge.net with esmtp (Exim 3.31-VA-mm2 #1 (Debian))
	id 180sx5-0007Zr-00; Sun, 13 Oct 2002 17:19:19 -0700
Received: from mail.powersupply.net ([216.91.156.9] helo=server4.powersupply.net)
	by usw-sf-list1.sourceforge.net with esmtp (Exim 3.31-VA-mm2 #1 (Debian))
	id 180swf-0002PN-00
	for <centrallix-devel@lists.sourceforge.net>; Sun, 13 Oct 2002 17:18:53 -0700
Received: from digitalenforcer (tu2-141-045.tayloru.edu [199.8.141.45]) by server4.powersupply.net
 (Rockliffe SMTPRA 4.5.6) with ESMTP id <B0012516714@server4.powersupply.net> for <centrallix-devel@lists.sourceforge.net>;
 Sun, 13 Oct 2002 20:18:50 -0400
From: "Jonathan Rupp" <jorupp@css.tayloru.edu>
To: <centrallix-devel@lists.sourceforge.net>
Subject: RE: [Centrallix-devel] Multi-Browser Support
Message-ID: <NDBBLDGMCLGHEANLOHAPGEOCCLAA.jorupp@css.tayloru.edu>
MIME-Version: 1.0
Content-Type: text/plain;
	charset="us-ascii"
Content-Transfer-Encoding: 7bit
X-Priority: 3 (Normal)
X-MSMail-Priority: Normal
X-Mailer: Microsoft Outlook IMO, Build 9.0.2416 (9.0.2910.0)
X-MimeOLE: Produced By Microsoft MimeOLE V6.00.2600.0000
In-Reply-To: <3DA748C7.5D1EC4D9@LightSys.org>
Importance: Normal
Sender: centrallix-devel-admin@lists.sourceforge.net
Errors-To: centrallix-devel-admin@lists.sourceforge.net
X-BeenThere: centrallix-devel@lists.sourceforge.net
X-Mailman-Version: 2.0.9-sf.net
Precedence: bulk
Reply-To: centrallix-devel@lists.sourceforge.net
List-Help: <mailto:centrallix-devel-request@lists.sourceforge.net?subject=help>
List-Post: <mailto:centrallix-devel@lists.sourceforge.net>
List-Subscribe: <https://lists.sourceforge.net/lists/listinfo/centrallix-devel>,
	<mailto:centrallix-devel-request@lists.sourceforge.net?subject=subscribe>
List-Id: Centrallix System Developers List <centrallix-devel.lists.sourceforge.net>
List-Unsubscribe: <https://lists.sourceforge.net/lists/listinfo/centrallix-devel>,
	<mailto:centrallix-devel-request@lists.sourceforge.net?subject=unsubscribe>
List-Archive: <http://sourceforge.net/mailarchives/forum.php?forum=centrallix-devel>
X-Original-Date: Sun, 13 Oct 2002 19:18:46 -0500
Date: Sun, 13 Oct 2002 19:18:46 -0500
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: 
X-Keywords:
X-UID: 1634

Hi all,

Just thought I'd respond to a couple of Greg's points...


> My apologies for the lengthy delay in giving an (expected) answer to these
> things :)  I've been trying to catch up on some network admin related
> stuff here at OMUSA, and haven't put a lot of time into Centrallix
> lately.  But....

I think we've all been a little busy lately....

> > 2.  Have one set of widgets for all browsers, but build a compatibility
> > [snip]
> > each browser that we support.  The BIG downfall of this method is that
> > it will have severe performance issues on the client side.  Another
>
> Performance impact - yes.  Severe - I doubt it (see below).  Most of the
> performance impact on the client side comes from when the page layout
> is somehow modified (such as adding layers, etc.) afaik.  The code itself
> *should* be pretty fast, all things considered ;)

I think the slowdown Luke was referring to here was the inability to
optimize for the browser that it's being rendered in.  For example, a
dynamic table with 5 rows and 5 columns has more than 30 layers (with the
current design), whereas for Mozilla/IE (which can manipulate an HTML table
dynamically), we can just use a standard HTML table and modify it's
attributes.  I would imagine (though I haven't tested), that one
dynamically-modifed table is _considerably_ faster than 30+ layers :)

>
> > downfall is that we cannot do browser-specific tweaks (like using tables
> > instead of layers in IE/Mozilla in some cases).
>
> I think you still could.  But it would make for a fairly complicated
> widget driver.

/me doesn't want to try to sort that one out :)


> > First off, there would be the client types.  We have concluded that IE6
> > and Mozilla can be grouped together as W3C-DOM.  For the sake of this
> > proposal, I'm going to use three client types (although there could be
> > as many as needed).  They are NS4x, W3C-DOM, and XUL.
>
> Probably a good idea to merge moz and ie if possible; has research been
> done to determine how similar they really are?  I know there are
> differences
> but much less than, for example, NS4 and IE.

I did a bit of tinkering trying to get the basics of the checkbox working in
Mozilla, and everything but the events worked in IE 6.0 as well (the W3C DOM
API worked just fine).  NS4 vs. IE or Moz is a pretty considerable
difference, and in HTML elements _and_ javascript calls.  I would imagine
that IE 7.0 will impliment the W3C DOM Event API, and then Moz/IE would be
almost the same (from a js W3C DOM API perspective).

> > First, there can be global widgets that can be overridden if necessary
> > for a specific client.  For instance, the form and objectsource widgets
> > should be able to be used in all three client types because they are
> > non-visual.  With a few modifications, I believe that could work.
> > However, in the future it may be necessary for one client type to
> > override the global widget.  This is possible.  If a client-specific
> > widget exists, it will always override the global widget.
>
> I guess my only hesitation here is that we probably should be focusing
> on global widgets "almost" exclusively at first - that way we aren't
> fighting the widget sync battle early on and can get functionality
> in the system before high-performance in customized widgets.  Also, that
> way we can get the design for the widgets nailed down before we end up
> with multiple versions of each one ;) since the change cost goes up
> with multiple versions.

Just a note, in order for the 'default' widgets to work well cross-browser,
we're going to have to impliment a number of wrapper functions, both for
javascript calls, and for outputing HTML (ie. DIV vs. IFRAME).


Just wanted to keep the discussion going,

Jonathan



-------------------------------------------------------
This sf.net email is sponsored by:ThinkGeek
Welcome to geek heaven.
http://thinkgeek.com/sf
_______________________________________________
Centrallix-devel mailing list
Centrallix-devel@lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/centrallix-devel

From dwhittin@css.tayloru.edu  Mon Oct 14 16:57:57 2002
Return-Path: <dwhittin@css.tayloru.edu>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (unknown [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 38D181A915; Mon, 14 Oct 2002 16:57:56 -0500 (EST)
Received: from oswald.spcom.net (unknown [10.5.228.126])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 386521A755; Mon, 14 Oct 2002 16:57:54 -0500 (EST)
Received: from css.tayloru.edu (IDENT:1000@localhost [127.0.0.1])
	by oswald.spcom.net (8.12.4/8.12.4) with ESMTP id g9ELtJ45021955;
	Mon, 14 Oct 2002 16:55:19 -0500
Message-ID: <3DAB3D47.3000002@css.tayloru.edu>
Date: Mon, 14 Oct 2002 16:55:19 -0500
From: David Whittington <dwhittin@css.tayloru.edu>
User-Agent: Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.1) Gecko/20020826
X-Accept-Language: en-us, en
MIME-Version: 1.0
To: Daniel Sorenson <dsorense@css.tayloru.edu>,
	Donnie Shilling <dshillin@css.tayloru.edu>,
	John Whittington <john.whittington@osfhealthcare.org>,
	Jonathan Geisler <jgeisler@css.tayloru.edu>,
	Jonathan Rupp <jorupp@css.tayloru.edu>,
	Justin Weaver <jweaver@css.tayloru.edu>,
	Luke Ehresman <lehresma@css.tayloru.edu>,
	Michael Anderson <manderso@css.tayloru.edu>,
	Ruth Whittington <ruth@1marthaave.com>,
	Stefan Brandle <sbrandle@css.tayloru.edu>,
	Stephen Williams <swilliam@css.tayloru.edu>
Subject: Meeting Tonight
Content-Type: text/plain; charset=ISO-8859-1; format=flowed
Content-Transfer-Encoding: 7bit
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: 
X-Keywords:
X-UID: 1635

Hey COS clubers,

Just a quick reminder that we do indeed have a meeting tonight at 9pm. 
 As usual there will be free food and an interesting presentation.  See 
you there.

Spartacus

From centrallix-cvsinfo-admin@lists.sourceforge.net  Thu Oct 17 13:41:47 2002
Return-Path: <centrallix-cvsinfo-admin@lists.sourceforge.net>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (unknown [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id B9A2D1A90C; Thu, 17 Oct 2002 13:41:46 -0500 (EST)
Received: from usw-sf-list2.sourceforge.net (usw-sf-fw2.sourceforge.net [216.136.171.252])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id 4583A1A894; Thu, 17 Oct 2002 13:41:44 -0500 (EST)
Received: from usw-sf-list1-b.sourceforge.net ([10.3.1.13] helo=usw-sf-list1.sourceforge.net)
	by usw-sf-list2.sourceforge.net with esmtp (Exim 3.31-VA-mm2 #1 (Debian))
	id 182Fad-0004sB-00; Thu, 17 Oct 2002 11:41:47 -0700
Received: from usw-sf-sshgate.sourceforge.net ([216.136.171.253] helo=usw-sf-netmisc.sourceforge.net)
	by usw-sf-list1.sourceforge.net with esmtp 
	(Cipher TLSv1:DES-CBC3-SHA:168) (Exim 3.31-VA-mm2 #1 (Debian))
	id 182FZN-0006P9-00
	for <centrallix-cvsinfo@lists.sourceforge.net>; Thu, 17 Oct 2002 11:40:29 -0700
Received: from usw-pr-cvs1-b.sourceforge.net ([10.5.1.7] helo=usw-pr-cvs1.sourceforge.net)
	by usw-sf-netmisc.sourceforge.net with esmtp (Exim 3.22 #1 (Debian))
	id 182FZN-0005NY-00
	for <centrallix-cvsinfo@lists.sourceforge.net>; Thu, 17 Oct 2002 11:40:29 -0700
Received: from localhost ([127.0.0.1] helo=cvsserver)
	by usw-pr-cvs1.sourceforge.net with smtp (Exim 3.22 #1 (Debian))
	id 182FZN-0006gn-00
	for <centrallix-cvsinfo@lists.sourceforge.net>; Thu, 17 Oct 2002 11:40:29 -0700
To: centrallix-cvsinfo@lists.sourceforge.net
Message-ID: <cvsgbeeley1034880029@cvsserver>
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="gbeeley1034880029"
From: centrallix-cvsinfo-admin@lists.sourceforge.net
Subject: [Centrallix-cvsinfo] cvs: centrallix / Makefile.in  /sfeditor sfedit.c smtpguard-config.domain.xpm smtpguard-config.domaincontrol.xpm smtpguard-config.ip.xpm smtpguard-config.ipcontrol.xpm system.smtpguard-config.xpm x-unknown.unknown.xpm
Sender: centrallix-cvsinfo-admin@lists.sourceforge.net
Errors-To: centrallix-cvsinfo-admin@lists.sourceforge.net
X-BeenThere: centrallix-cvsinfo@lists.sourceforge.net
X-Mailman-Version: 2.0.9-sf.net
Precedence: bulk
Reply-To: centrallix-devel@lists.sourceforge.net
X-Reply-To: centrallix-cvsinfo@lists.sourceforge.net
List-Help: <mailto:centrallix-cvsinfo-request@lists.sourceforge.net?subject=help>
List-Post: <mailto:centrallix-cvsinfo@lists.sourceforge.net>
List-Subscribe: <https://lists.sourceforge.net/lists/listinfo/centrallix-cvsinfo>,
	<mailto:centrallix-cvsinfo-request@lists.sourceforge.net?subject=subscribe>
List-Id: CVS Auto-Updates Mailing list <centrallix-cvsinfo.lists.sourceforge.net>
List-Unsubscribe: <https://lists.sourceforge.net/lists/listinfo/centrallix-cvsinfo>,
	<mailto:centrallix-cvsinfo-request@lists.sourceforge.net?subject=unsubscribe>
List-Archive: <http://sourceforge.net/mailarchive/forum.php?forum=centrallix-cvsinfo>
X-Original-Date: Thu, 17 Oct 2002 18:40:29 -0000
Date: Thu, 17 Oct 2002 18:40:29 -0000
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: 
X-Keywords:
X-UID: 1644

This is a MIME encoded message

--gbeeley1034880029
Content-Type: text/plain

gbeeley		Thu Oct 17 11:40:29 2002 EDT

  Added files:                 
    /centrallix/sfeditor	sfedit.c smtpguard-config.domain.xpm 
                        	smtpguard-config.domaincontrol.xpm 
                        	smtpguard-config.ip.xpm 
                        	smtpguard-config.ipcontrol.xpm 
                        	system.smtpguard-config.xpm 
                        	x-unknown.unknown.xpm 

  Modified files:              
    /centrallix	Makefile.in 
  Log:
  Adding Structure File Editor.  Program only loads structure files (both v1
  and v2) currently, does not allow modification or saving yet.  We'll
  probably wait on adding save functionality until stparse.c will preserve
  comments and possibly formatting style when rewriting a structure file.
  
  This program isn't intended as a substitute or replacement for bojangles.
  It isn't designed for GUI work... just for people who have a phobia of
  editing text files ;)
  
  Hrmph... this program looks hideously like regedit...
  
  Usage:
  
       $ make sfedit
       $ sfedit /usr/local/etc/centrallix.conf
  
  
  
--gbeeley1034880029
Content-Type: text/plain
Content-Disposition: attachment; filename="gbeeley-20021017114029.txt"

Index: centrallix/Makefile.in
diff -u centrallix/Makefile.in:1.33 centrallix/Makefile.in:1.34
--- centrallix/Makefile.in:1.33	Tue Sep 24 02:23:35 2002
+++ centrallix/Makefile.in	Thu Oct 17 11:40:28 2002
@@ -274,6 +274,13 @@
 rhinit_install: config
 	$(INSTALL) -m 744 etc/centrallix.init /etc/rc.d/init.d/centrallix
 
+sfeditor/sfedit.o: sfeditor/sfedit.c sfeditor/*.xpm
+	$(CC) $(CFLAGS) `gtk-config --cflags` $< -c -o $@
+
+sfedit: sfeditor/sfedit.o $(LSOBJS)
+	$(CC) sfeditor/sfedit.o centrallix.o $(LSOBJS) $(LIBDIRS) $(PROFILE) -o sfedit $(LIBS) `gtk-config --libs`
+	
+
 .c.so:	$<
 	$(CC) $(CFLAGS) -DMODULE -Wno-unused -shared -fPIC $< -o $@
 
@@ -311,7 +318,7 @@
 clean:
 	@rm -f */*.o
 	@rm -f */*.so
-	@rm -f centrallix test_obj lsclient
+	@rm -f centrallix test_obj lsclient sfedit
 	@rm -f *.o
 	@rm -f etc/centrallix.conf etc/rootnode
 	@rm -f etc/centrallix.init

Index: centrallix/sfeditor/sfedit.c
+++ centrallix/sfeditor/sfedit.c
#include <string.h>
#include <stdio.h>
#include <unistd.h>
#include <fcntl.h>
#include <stdlib.h>
#include <gtk/gtk.h>
#include "mtask.h"
#include "mtlexer.h"
#include "stparse.h"


/*** icon table.  <grunt> move this to a file or something dynamic!! ***/
#include "x-unknown.unknown.xpm"
#include "system.smtpguard-config.xpm"
#include "smtpguard-config.ipcontrol.xpm"
#include "smtpguard-config.ip.xpm"
#include "smtpguard-config.domaincontrol.xpm"
#include "smtpguard-config.domain.xpm"
static struct
    {
    char**	XPM;
    char*	Type;
    GdkPixmap*	Pixmap;
    GdkBitmap*	Mask;
    }
  icon_table[] =
    {
	{ x_unknown_unknown_xpm , "x-unknown/unknown", NULL, NULL },
	{ system_smtpguard_config_xpm, "system/smtpguard-config", NULL, NULL },
	{ smtpguard_config_ipcontrol_xpm, "smtpguard-config/ipcontrol", NULL, NULL },
	{ smtpguard_config_ip_xpm, "smtpguard-config/ip", NULL, NULL },
	{ smtpguard_config_domaincontrol_xpm, "smtpguard-config/domaincontrol", NULL, NULL },
	{ smtpguard_config_domain_xpm, "smtpguard-config/domain", NULL, NULL },
    };

#define SFE_DEFAULT_ICON	0


/*** application globals ***/
struct
    {
    GtkWidget	*OpenDialog;
    GtkWidget	*Window;
    GtkWidget	*TreeView;
    GtkWidget	*NameEdit;
    GtkWidget	*TypeCombo;
    GtkWidget	*AnnotText;
    GtkWidget	*AttrsCList;
    GtkWidget	*AttrEditWindow;
    pStructInf	Data;
    char	Filename[256];
    int		ArgC;
    char**	ArgV;
    int		Modified:1;
    int		HideColTitles:1;
    }
    SFE_Globals;


/*** sfeSetTitle - set the window title, given a particular filename
 ***/
int
sfeSetTitle(GtkWindow *window, char* filename)
    {
    gchar* newtitle;
	
	/** Set the title **/
	newtitle = (gchar*)g_malloc(strlen(filename) + strlen("Centrallix Structure File Editor - ") + 1);
	sprintf(newtitle, "Centrallix Structure File Editor - %s", filename);
	gtk_window_set_title(window, newtitle);
	g_free(newtitle);

    return 0;
    }


/*** sfeBuildTreeItemWithImage - create a new treeview item which contains
 *** the appropriate image for the given node type as well as a label with
 *** the node's name.
 ***/
GtkWidget*
sfeBuildTreeItemWithImage(pStructInf data_item)
    {
    GtkWidget *hbox, *label, *pixmap, *treeitem, *hiddenlabel;
    int i, n_icons, found;
    GtkStyle *style;
    gchar hiddenlabel_text[32];

	/** Figure out which pixmap file to use. **/
	found = SFE_DEFAULT_ICON;
	n_icons = sizeof(icon_table) / sizeof(icon_table[0]);
	for (i=0;i<n_icons;i++) 
	    if (!strcasecmp(data_item->UsrType, icon_table[i].Type))
		found = i;

	/** build the gdk pixmap structure if needed **/
	if (!icon_table[found].Pixmap)
	    {
	    style = gtk_widget_get_style(SFE_Globals.TreeView);
	    icon_table[found].Pixmap = gdk_pixmap_create_from_xpm_d(SFE_Globals.Window->window, 
		    &(icon_table[found].Mask), &style->bg[GTK_STATE_NORMAL], 
		    (gchar**) icon_table[found].XPM);
	    }

	/** Create the hbox, label, and pixmap **/
	hbox = gtk_hbox_new(FALSE,1);
	pixmap = gtk_pixmap_new(icon_table[found].Pixmap, icon_table[found].Mask);
	gtk_box_pack_start(GTK_BOX(hbox), pixmap, FALSE, FALSE, 0);
	gtk_widget_show(pixmap);
	label = gtk_label_new(data_item->Name);
	gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);
	gtk_widget_show(label);
	gtk_widget_show(hbox);

	/** We need a hidden label to reference the structure **/
	snprintf(hiddenlabel_text, 32, "%16.16lx", (unsigned long)(data_item));
	hiddenlabel = gtk_label_new(hiddenlabel_text);
	gtk_box_pack_start(GTK_BOX(hbox), hiddenlabel, FALSE, FALSE, 0);
	
	/** Create the tree item and plop the hbox in it **/
	treeitem = gtk_tree_item_new();
	gtk_container_add(GTK_CONTAINER(treeitem), hbox);

    return treeitem;
    }


/*** sfeRebuildUI_r - recursively build the new treeview display of the
 *** parsed structure file representation.
 ***/
int
sfeRebuildUI_r(pStructInf data, GtkTreeItem *subitem)
    {
    int i;
    pStructInf subinf;
    GtkWidget *subtreeitem, *subsubtree;
    GtkWidget *subtree = NULL;

	/** Loop through the subinfs, and add items/subtrees for each. **/
	for(i=0;i<data->nSubInf;i++) if (stStructType(data->SubInf[i]) == ST_T_SUBGROUP)
	    {
	    subinf = data->SubInf[i];

	    /** Only add the subtree once, and only if we need a subtree.  This
	     ** is why we do this in here instead of outside the loop.
	     **/
	    if (!subtree)
		{
		subtree = gtk_tree_new();
		gtk_tree_item_set_subtree(GTK_TREE_ITEM(subitem), subtree);
		gtk_tree_set_view_mode(GTK_TREE(subtree), GTK_TREE_VIEW_ITEM);
		}

	    /** Add the item to the subtree **/
	    subtreeitem = sfeBuildTreeItemWithImage(subinf);
	    gtk_tree_append(GTK_TREE(subtree), subtreeitem);
	    gtk_widget_show(subtreeitem);
	    sfeRebuildUI_r(subinf, GTK_TREE_ITEM(subtreeitem));
	    }
    
    return 0;
    }


/*** sfeRebuildUI - take the structure file data and completely rebuild the
 *** user interface representation, including the treeview navigation.
 ***/
int
sfeRebuildUI(pStructInf new_data, GtkTree *treeview)
    {
    GtkWidget *treeitem, *subtree;
	
	/** Clear any existing treeview content. **/
	gtk_tree_clear_items(treeview, 0, 9999);

	/** Add a root item **/
	treeitem = sfeBuildTreeItemWithImage(new_data);
	gtk_tree_prepend(treeview, treeitem);
	gtk_widget_show(treeitem);

	/** Build the tree, recursively. **/
	sfeRebuildUI_r(new_data, GTK_TREE_ITEM(treeitem));

	/** Expand the root node **/
	gtk_tree_item_expand(GTK_TREE_ITEM(treeitem));

    return 0;
    }


/*** sfeLoadFile - loads a new file into the program.
 ***/
int
sfeLoadFile(char* filename)
    {
    pFile fd;
    pStructInf new_filedata;

	/** open the file. **/
	if (strlen(filename) > 255) return -1;
	fd = fdOpen(filename, O_RDONLY, 0600);
	if (!fd) return -1;

	/** Try to parse it **/
	new_filedata = stParseMsg(fd, 0);
	fdClose(fd,0);
	if (!new_filedata) return -1;
	if (SFE_Globals.Data) stFreeInf(SFE_Globals.Data);
	SFE_Globals.Data = new_filedata;
	SFE_Globals.Modified = 0;

	/** Set the filename and title **/
	strcpy(SFE_Globals.Filename, filename);
	sfeSetTitle(GTK_WINDOW(SFE_Globals.Window), SFE_Globals.Filename);

	/** Rebuild the ui **/
	sfeRebuildUI(SFE_Globals.Data, GTK_TREE(SFE_Globals.TreeView));

    return 0;
    }


void
sfe_ui_FileOpen(GtkWidget *w)
    {

	gtk_widget_show(SFE_Globals.OpenDialog);

    return;
    }


void
sfe_ui_FileNew(GtkWidget *w)
    {

	strcpy(SFE_Globals.Filename, "untitled.struct");
	SFE_Globals.Data = stCreateStruct("new","x-unknown/x-unknown");
	SFE_Globals.Modified = 0;
	sfeSetTitle(GTK_WINDOW(SFE_Globals.Window), SFE_Globals.Filename);

	/** Rebuild the ui **/
	sfeRebuildUI(SFE_Globals.Data, GTK_TREE(SFE_Globals.TreeView));

    return;
    }


void
sfe_ui_FileExit(GtkWidget *w)
    {
    gtk_main_quit();
    return;
    }

void
sfe_ui_FileOpenCancel(GtkWidget *w, GtkWidget *dialogbox)
    {
    gtk_widget_hide(dialogbox);
    return;
    }

void
sfe_ui_FileOpenOk(GtkWidget *w, GtkWidget *dialogbox)
    {
    gchar* filename;
    
	filename = gtk_file_selection_get_filename(GTK_FILE_SELECTION(dialogbox));
	if (access(filename, R_OK) < 0 || sfeLoadFile(filename) < 0)
	    {
	    printf("\07");
	    fflush(stdout);
	    }
	else
	    {
	    gtk_widget_hide(dialogbox);
	    }

    return;
    }

void
sfe_ui_TitleToggle(GtkWidget *w, GtkWidget *menuitem)
    {
    SFE_Globals.HideColTitles = !SFE_Globals.HideColTitles;
    if (SFE_Globals.HideColTitles)
	{
	gtk_clist_column_titles_hide(GTK_CLIST(SFE_Globals.AttrsCList));
	}
    else
	{
	gtk_clist_column_titles_show(GTK_CLIST(SFE_Globals.AttrsCList));
	}
    return;
    }


/*** menu definitions ***/
static GtkItemFactoryEntry menu_items[] =
    {
	{ "/_File",		NULL,		NULL,			0, "<Branch>" },
	{ "/File/_New",		"<control>N",	sfe_ui_FileNew,		0, NULL },
	{ "/File/_Open File",	"<control>O",	sfe_ui_FileOpen,	0, NULL },
	{ "/File/_Save",	"<control>S",	NULL,			0, NULL },
	{ "/File/Save _As File",NULL,		NULL,			0, NULL },
	{ "/File/sep1",		NULL,		NULL,			0, "<Separator>" },
	{ "/File/Open Via RCP",	NULL,		NULL,			0, NULL },
	{ "/File/Save Via RCP",	NULL,		NULL,			0, NULL },
	{ "/File/sep2",		NULL,		NULL,			0, "<Separator>" },
	{ "/File/E_xit",	"<control>Q",	sfe_ui_FileExit,	0, NULL },
	{ "/_Edit",		NULL,		NULL,			0, "<Branch>" },
	{ "/Edit/_Delete",	NULL,		NULL,			0, NULL },
	{ "/Edit/Cu_t",		"<control>X",	NULL,			0, NULL },
	{ "/Edit/_Copy",	"<control>C",	NULL,			0, NULL },
	{ "/Edit/_Paste",	"<control>V",	NULL,			0, NULL },
	{ "/_View",		NULL,		NULL,			0, "<Branch>" },
	{ "/View/Show _Source",	"<control>U",	NULL,			0, NULL },
	{ "/View/sep3",		NULL,		NULL,			0, "<Separator>" },
	{ "/View/Hide Column _Titles", NULL,	sfe_ui_TitleToggle,	0, "<CheckItem>" },
	{ "/_Help",		NULL,		NULL,			0, "<LastBranch>" },
	{ "/Help/_About sfedit", NULL,		NULL,			0, NULL },
    };

static gchar* props_clist_titles[] =
    {
    "Attribute",
    "Value",
    };


/* Note that this is never called */
static void 
cb_unselect_child( GtkWidget *root_tree, GtkWidget *child, GtkWidget *subtree )
    {
    return;
    }


/* Note that this is called every time the user clicks on an item,
   whether it is already selected or not. */
static void 
cb_select_child (GtkWidget *root_tree, GtkWidget *child, GtkWidget *subtree)
    {
    return;
    }


static void
sfe_ui_CListAttrSelected(GtkWidget* clist, gint row, gint col, GdkEventButton *event, void* d)
    {
	
	if (event->type == GDK_2BUTTON_PRESS)
	    {
	    gtk_widget_show(SFE_Globals.AttrEditWindow);
	    gtk_window_set_title(GTK_WINDOW(SFE_Globals.AttrEditWindow), "Edit attribute...");
	    }

    return;
    }


static void 
sfe_ui_TreeSelectionChanged( GtkWidget *tree )
    {
    GList *itemlist;
    gchar *name;
    GtkBox *hbox;
    GtkLabel *label;
    GtkWidget *item;
    pStructInf infptr, subinf;
    gchar* annotation;
    int i;
    gchar* rowtext[2];
    gchar intbuf[32];
    char* strval;
    int intval;

	/** Get the hidden label which contains the pointer to the inf **/
	if (!tree) return;
	itemlist = GTK_TREE_SELECTION(tree);
	if (!itemlist) return;
	item = GTK_WIDGET (itemlist->data);
	if (!item) return;
	hbox = GTK_BOX (GTK_BIN (item)->child);
	label = GTK_LABEL (((GtkBoxChild*)(hbox->children->next->next->data))->widget);
	gtk_label_get (label, &name);
	infptr = (pStructInf)(strtol(name, NULL, 16));
	if (!infptr) return;

	/** Show the info on the right side of the window **/
	gtk_entry_set_text(GTK_ENTRY(SFE_Globals.NameEdit), infptr->Name);
	gtk_entry_set_text(GTK_ENTRY(GTK_COMBO(SFE_Globals.TypeCombo)->entry), infptr->UsrType);
	gtk_text_set_point(GTK_TEXT(SFE_Globals.AnnotText), 0);
	gtk_text_forward_delete(GTK_TEXT(SFE_Globals.AnnotText), gtk_text_get_length(GTK_TEXT(SFE_Globals.AnnotText)));
	annotation="";
	stAttrValue(stLookup(infptr,"annotation"), NULL, &annotation, 0);
	gtk_text_insert(GTK_TEXT(SFE_Globals.AnnotText), NULL, NULL, NULL, annotation, strlen(annotation));

	/** Build the attributes listing **/
	gtk_clist_clear(GTK_CLIST(SFE_Globals.AttrsCList));
	for(i=0;i<infptr->nSubInf;i++)
	    {
	    subinf = infptr->SubInf[i];
	    if (stStructType(subinf) == ST_T_ATTRIB)
		{
		strval = NULL;
		stAttrValue(subinf, &intval, &strval, 0);
		rowtext[0] = subinf->Name;
		if (strval)
		    {
		    rowtext[1] = strval;
		    }
		else
		    {
		    snprintf(intbuf, 32, "%d", intval);
		    rowtext[1] = intbuf;
		    }
		gtk_clist_append(GTK_CLIST(SFE_Globals.AttrsCList), rowtext);
		}
	    }

    return;
    }


void
sfe_ui_AttrDialogCancel(GtkWidget* dialog)
    {
    gtk_widget_hide(dialog);
    return;
    }


GtkWidget *
sfe_ui_CreateTabPage(GtkWidget* tabcontrol, char* labeltext)
    {
    GtkWidget* frame;
    GtkWidget* label;

	label = gtk_label_new(labeltext);
	gtk_widget_show(label);
	frame = gtk_frame_new(labeltext);
	gtk_widget_show(frame);
	gtk_container_set_border_width(GTK_CONTAINER(frame), 10);
	gtk_widget_set_usize(frame, 350, 220);
	gtk_notebook_append_page(GTK_NOTEBOOK(tabcontrol), frame, label);

    return frame;
    }


GtkWidget *
sfe_ui_CreateAttrDialog()
    {
    GtkWidget *dialog;
    GtkWidget *ok_button, *cancel_button;
    GtkWidget *types_tabcontrol;
    GtkWidget *tabcontrol;

	dialog = gtk_dialog_new();
	gtk_widget_set_usize(dialog, 400, 300);
	gtk_signal_connect(GTK_OBJECT(dialog), "delete_event", 
		GTK_SIGNAL_FUNC(sfe_ui_AttrDialogCancel), dialog);
	ok_button = gtk_button_new_with_label("OK");
	cancel_button = gtk_button_new_with_label("Cancel");
	gtk_container_add(GTK_CONTAINER(GTK_DIALOG(dialog)->action_area), ok_button);
	gtk_widget_show(ok_button);
	gtk_container_add(GTK_CONTAINER(GTK_DIALOG(dialog)->action_area), cancel_button);
	gtk_widget_show(cancel_button);

	tabcontrol = gtk_notebook_new();
	gtk_widget_set_usize(tabcontrol, 370,240);
	sfe_ui_CreateTabPage(tabcontrol, "Integer");
	sfe_ui_CreateTabPage(tabcontrol, "String");
	sfe_ui_CreateTabPage(tabcontrol, "String List");
	gtk_widget_show(tabcontrol);
	gtk_box_pack_start(GTK_BOX(GTK_DIALOG(dialog)->vbox), tabcontrol, FALSE, FALSE, 0);

    return dialog;
    }


void
start(void* v)
    {
    GtkWidget *scrolled_win, *tree, *hpanes, *vbox, *menu, *list;
    /*static gchar *itemnames[] = {"One", "Two", "Three", "Four", "Five"};*/
    GtkItemFactory *item_factory;
    GtkAccelGroup *accel_group;
    gint nmenu_items;
    gint i;
    GtkWidget *table;
    GtkWidget *name_label, *info_vbox;
    GtkWidget *type_label;
    GtkWidget *annot_label, *annot_hbox, *annot_vscroll;
    GtkWidget *sep1;
    GtkWidget *props_hbox, *props_scrollwin;
    GtkWidget *menu_item;

	gtk_init (&SFE_Globals.ArgC, &SFE_Globals.ArgV);
	SFE_Globals.Data = stCreateStruct("new","x-unknown/x-unknown");
	SFE_Globals.Modified = 0;
	SFE_Globals.HideColTitles = 0;

	/* a generic toplevel window */
	SFE_Globals.Window = gtk_window_new (GTK_WINDOW_TOPLEVEL);
	gtk_window_set_title(GTK_WINDOW(SFE_Globals.Window), "Centrallix Structure File Editor");
	gtk_signal_connect (GTK_OBJECT(SFE_Globals.Window), "delete_event", GTK_SIGNAL_FUNC (gtk_main_quit), NULL);
	gtk_widget_set_usize(SFE_Globals.Window, 600, 350);

	/** Build the Open File... dialog box **/
	SFE_Globals.OpenDialog = gtk_file_selection_new("Open File...");
	gtk_signal_connect(GTK_OBJECT(GTK_FILE_SELECTION(SFE_Globals.OpenDialog)->cancel_button),
		"clicked", (GtkSignalFunc)sfe_ui_FileOpenCancel, GTK_OBJECT(SFE_Globals.OpenDialog));
	gtk_signal_connect(GTK_OBJECT(GTK_FILE_SELECTION(SFE_Globals.OpenDialog)->ok_button),
		"clicked", (GtkSignalFunc)sfe_ui_FileOpenOk, GTK_OBJECT(SFE_Globals.OpenDialog));

	/* vertical box organizing the menu vs. rest of app */
	vbox = gtk_vbox_new(FALSE,1);
	gtk_container_add(GTK_CONTAINER(SFE_Globals.Window), vbox);
	gtk_widget_show(vbox);

	/* menu */
	nmenu_items = sizeof(menu_items) / sizeof(menu_items[0]);
	accel_group = gtk_accel_group_new();
	item_factory = gtk_item_factory_new(GTK_TYPE_MENU_BAR, "<main>", accel_group);
	gtk_item_factory_create_items(item_factory, nmenu_items, menu_items, NULL);
	gtk_window_add_accel_group(GTK_WINDOW(SFE_Globals.Window), accel_group);
	menu = gtk_item_factory_get_widget(item_factory, "<main>");
	gtk_box_pack_start(GTK_BOX(vbox), menu, FALSE, TRUE, 0);
	/*menu_item = gtk_item_factory_get_widget(GTK_ITEM_FACTORY(item_factory),"/View/Column Titles");
	gtk_menu_item_activate(GTK_MENU_ITEM(menu_item));*/
	gtk_widget_show(menu);

	/* horizontal layout box organizing the treeview and the data view pane */
	hpanes = gtk_hpaned_new();
	gtk_container_add(GTK_CONTAINER(vbox), hpanes);
	gtk_container_set_border_width (GTK_CONTAINER(hpanes), 5);
	gtk_paned_set_gutter_size(GTK_PANED(hpanes), 16);
	gtk_widget_show(hpanes);

	/* A generic scrolled window - for the treeview. */
	scrolled_win = gtk_scrolled_window_new (NULL, NULL);
	gtk_scrolled_window_set_policy (GTK_SCROLLED_WINDOW (scrolled_win),
		GTK_POLICY_AUTOMATIC,
		GTK_POLICY_AUTOMATIC);
	gtk_widget_set_usize (scrolled_win, 150, 200);
	gtk_container_add (GTK_CONTAINER(hpanes), scrolled_win);
	gtk_widget_show (scrolled_win);
  
	/* Create the root tree and add it to the scrolled window */
	tree = gtk_tree_new();
	gtk_signal_connect (GTK_OBJECT(tree), "select_child",
		GTK_SIGNAL_FUNC(cb_select_child), tree);
	gtk_signal_connect (GTK_OBJECT(tree), "unselect_child",
		GTK_SIGNAL_FUNC(cb_unselect_child), tree);
	gtk_signal_connect (GTK_OBJECT(tree), "selection_changed",
		GTK_SIGNAL_FUNC(sfe_ui_TreeSelectionChanged), tree);
	gtk_scrolled_window_add_with_viewport(GTK_SCROLLED_WINDOW(scrolled_win), tree);
	gtk_tree_set_selection_mode (GTK_TREE(tree), GTK_SELECTION_SINGLE);
	gtk_tree_set_view_mode(GTK_TREE(tree), GTK_TREE_VIEW_ITEM);
	gtk_widget_show (tree);
	SFE_Globals.TreeView = tree;

	/** build the item name section **/
	info_vbox = gtk_vbox_new(FALSE,1);
	gtk_container_add(GTK_CONTAINER(hpanes), info_vbox);
	gtk_widget_show(info_vbox);
	table = gtk_table_new(3,2,FALSE);
	gtk_box_pack_start(GTK_BOX(info_vbox), table, FALSE, TRUE, 0);
	gtk_widget_show(table);
	name_label = gtk_label_new("Name:");
	gtk_label_set_justify(GTK_LABEL(name_label), GTK_JUSTIFY_LEFT);
	gtk_table_attach(GTK_TABLE(table), name_label, 0, 1, 0, 1, 0, 0, 0, 0);
	gtk_widget_show(name_label);
	SFE_Globals.NameEdit = gtk_entry_new_with_max_length(63);
	gtk_table_attach(GTK_TABLE(table), SFE_Globals.NameEdit, 1, 2, 0, 1, GTK_FILL | GTK_EXPAND | GTK_SHRINK, 0, 0, 0);
	gtk_widget_show(SFE_Globals.NameEdit);

	/** Item type **/
	type_label = gtk_label_new("Type:");
	gtk_label_set_justify(GTK_LABEL(type_label), GTK_JUSTIFY_LEFT);
	gtk_table_attach(GTK_TABLE(table), type_label, 0, 1, 1, 2, 0, 0, 0, 0);
	gtk_widget_show(type_label);
	SFE_Globals.TypeCombo = gtk_combo_new();
	gtk_table_attach(GTK_TABLE(table), SFE_Globals.TypeCombo, 1, 2, 1, 2, GTK_FILL | GTK_EXPAND | GTK_SHRINK, 0, 0, 8);
	gtk_widget_show(SFE_Globals.TypeCombo);

	/** Annotation/description/comments section **/
	annot_label = gtk_label_new("Desc:");
	gtk_label_set_justify(GTK_LABEL(annot_label), GTK_JUSTIFY_LEFT);
	gtk_table_attach(GTK_TABLE(table), annot_label, 0, 1, 2, 3, 0, 0, 0, 0);
	gtk_widget_show(annot_label);
	annot_hbox = gtk_hbox_new(FALSE,1);
	gtk_table_attach(GTK_TABLE(table), annot_hbox, 1, 2, 2, 3, GTK_FILL | GTK_EXPAND | GTK_SHRINK, 0, 0, 0);
	gtk_widget_show(annot_hbox);
	SFE_Globals.AnnotText = gtk_text_new(NULL,NULL);
	gtk_text_set_editable(GTK_TEXT(SFE_Globals.AnnotText), TRUE);
	gtk_widget_set_usize(SFE_Globals.AnnotText, 100, 48);
	gtk_container_add(GTK_CONTAINER(annot_hbox), SFE_Globals.AnnotText);
	gtk_widget_show(SFE_Globals.AnnotText);
	annot_vscroll = gtk_vscrollbar_new(GTK_TEXT(SFE_Globals.AnnotText)->vadj);
	gtk_box_pack_end(GTK_BOX(annot_hbox), annot_vscroll, FALSE, TRUE, 0);
	gtk_widget_show(annot_vscroll);
	sep1 = gtk_hseparator_new();
	gtk_box_pack_start(GTK_BOX(info_vbox), sep1, FALSE, TRUE, 8);
	gtk_widget_show(sep1);

	/** Add a columnar list box for the attributes **/
	props_scrollwin = gtk_scrolled_window_new(NULL,NULL);
	gtk_container_add(GTK_CONTAINER(info_vbox), props_scrollwin);
	gtk_widget_show(props_scrollwin);
	SFE_Globals.AttrsCList = gtk_clist_new_with_titles(2, props_clist_titles);
	gtk_clist_set_selection_mode(GTK_CLIST(SFE_Globals.AttrsCList), GTK_SELECTION_SINGLE);
	gtk_container_add(GTK_CONTAINER(props_scrollwin), SFE_Globals.AttrsCList);
	gtk_widget_show(SFE_Globals.AttrsCList);
	gtk_signal_connect (GTK_OBJECT(SFE_Globals.AttrsCList), "select_row",
		GTK_SIGNAL_FUNC(sfe_ui_CListAttrSelected), SFE_Globals.AttrsCList);

#if 0
	/** Put some cruft in the treeview **/
	for (i = 0; i < 5; i++)
	    {
	    GtkWidget *subtree, *item;
	    gint j;

	    /* Create a tree item */
	    item = gtk_tree_item_new_with_label (itemnames[i]);

	    /* Add it to the parent tree */
	    gtk_tree_append (GTK_TREE(tree), item);
	    gtk_widget_show (item);
	    subtree = gtk_tree_new();

	    /* This is still necessary if you want these signals to be called
	     * for the subtree's children.  Note that selection_change will be 
	     * signalled for the root tree regardless. 
	     */
	    gtk_signal_connect (GTK_OBJECT(subtree), "select_child",
			GTK_SIGNAL_FUNC(cb_select_child), subtree);
	    gtk_signal_connect (GTK_OBJECT(subtree), "unselect_child",
			GTK_SIGNAL_FUNC(cb_unselect_child), subtree);
    
	    /* Set this item's subtree - note that you cannot do this until
	     * AFTER the item has been added to its parent tree! 
	     */
	    gtk_tree_item_set_subtree (GTK_TREE_ITEM(item), subtree);

	    for (j = 0; j < 5; j++)
		{
		GtkWidget *subitem;

		/* Create a subtree item, in much the same way */
		subitem = gtk_tree_item_new_with_label (itemnames[j]);
		gtk_tree_append (GTK_TREE(subtree), subitem);
		gtk_widget_show (subitem);
		}
	    }
#endif

	/** Open the main window **/
	gtk_widget_show (SFE_Globals.Window);

	/** Load any file specified on the command line **/
	if (SFE_Globals.ArgC == 2 && SFE_Globals.ArgV[1]) 
	    sfeLoadFile(SFE_Globals.ArgV[1]);
	else
	    sfeRebuildUI(SFE_Globals.Data, GTK_TREE(tree));

	/** Create the attribute editing window **/
	SFE_Globals.AttrEditWindow = sfe_ui_CreateAttrDialog();

	/** Enter the event loop for GTK **/
	gtk_main();

    thExit();
    }

int
main(int argc, char* argv[])
    {
    SFE_Globals.ArgC = argc;
    SFE_Globals.ArgV = argv;
    mtInitialize(0,start);
    return 0;
    }

Index: centrallix/sfeditor/smtpguard-config.domain.xpm
+++ centrallix/sfeditor/smtpguard-config.domain.xpm
/* XPM */
static char * smtpguard_config_domain_xpm[] = {
"16 16 4 1",
" 	c None",
".	c #3D6DFF",
"+	c #00AF2E",
"@	c #FF0000",
"                ",
" ... ... .....  ",
" .   . . . . .  ",
" .   . . .   .  ",
" ... ... .   .  ",
"                ",
" .  . ... ...   ",
" .. . ..   .    ",
" . .. .    .    ",
" .  . .+. @.  @ ",
"      ++  @@ @@ ",
" +.. ++. ..@@@  ",
" ++.++ . . @@@  ",
" .+++..  .@@ @@ ",
" ..+ . . .@.  @ ",
"                "};

Index: centrallix/sfeditor/smtpguard-config.domaincontrol.xpm
+++ centrallix/sfeditor/smtpguard-config.domaincontrol.xpm
/* XPM */
static char * smtpguard_config_domaincontrol_xpm[] = {
"16 16 2 1",
" 	c None",
".	c #3D6DFF",
"                ",
" ... ... .....  ",
" .   . . . . .  ",
" .   . . .   .  ",
" ... ... .   .  ",
"                ",
" .  . ... ...   ",
" .. . ..   .    ",
" . .. .    .    ",
" .  . ...  .    ",
"                ",
" ... ... ...    ",
" . . . . .      ",
" . . ..  . .    ",
" ... . . ...    ",
"                "};

Index: centrallix/sfeditor/smtpguard-config.ip.xpm
+++ centrallix/sfeditor/smtpguard-config.ip.xpm
/* XPM */
static char * smtpguard_config_ip_xpm[] = {
"16 16 29 1",
" 	c None",
".	c #840000",
"+	c #DCDCDC",
"@	c #D4D4D4",
"#	c #CCCCCC",
"$	c #C4C4C4",
"%	c #BCBCBC",
"&	c #B4B4B4",
"*	c #D6D6D6",
"=	c #CECECE",
"-	c #C6C6C6",
";	c #BEBEBE",
">	c #B6B6B6",
",	c #AFAFAF",
"'	c #D1D1D1",
")	c #C9C9C9",
"!	c #C1C1C1",
"~	c #B9B9B9",
"{	c #B1B1B1",
"]	c #A9A9A9",
"^	c #CBCBCB",
"/	c #C3C3C3",
"(	c #BBBBBB",
"_	c #B3B3B3",
":	c #ABABAB",
"<	c #A3A3A3",
"[	c #00AF2E",
"}	c #FF0000",
"|	c #FFFFFF",
"                ",
"                ",
"                ",
"    ........    ",
"    .+@#$%&.    ",
"    .*=-;>,.    ",
"    .')!~{].    ",
"    .^/(_:<.    ",
"    ........    ",
"      .[..}   } ",
"    ..[[..}} }} ",
" [ ..[[||||}}}  ",
" [[.[[.....}}}  ",
"  [[[     }} }} ",
"   [      }   } ",
"                "};

Index: centrallix/sfeditor/smtpguard-config.ipcontrol.xpm
+++ centrallix/sfeditor/smtpguard-config.ipcontrol.xpm
/* XPM */
static char * smtpguard_config_ipcontrol_xpm[] = {
"16 16 27 1",
" 	c None",
".	c #840000",
"+	c #DCDCDC",
"@	c #D4D4D4",
"#	c #CCCCCC",
"$	c #C4C4C4",
"%	c #BCBCBC",
"&	c #B4B4B4",
"*	c #D6D6D6",
"=	c #CECECE",
"-	c #C6C6C6",
";	c #BEBEBE",
">	c #B6B6B6",
",	c #AFAFAF",
"'	c #D1D1D1",
")	c #C9C9C9",
"!	c #C1C1C1",
"~	c #B9B9B9",
"{	c #B1B1B1",
"]	c #A9A9A9",
"^	c #CBCBCB",
"/	c #C3C3C3",
"(	c #BBBBBB",
"_	c #B3B3B3",
":	c #ABABAB",
"<	c #A3A3A3",
"[	c #FFFFFF",
"                ",
"                ",
"                ",
"    ........    ",
"    .+@#$%&.    ",
"    .*=-;>,.    ",
"    .')!~{].    ",
"    .^/(_:<.    ",
"    ........    ",
"      ....      ",
"    ........    ",
"   ..[[[[[[..   ",
"  ............  ",
"                ",
"                ",
"                "};

Index: centrallix/sfeditor/system.smtpguard-config.xpm
+++ centrallix/sfeditor/system.smtpguard-config.xpm
/* XPM */
static char * system_smtpguard_config_xpm[] = {
"16 16 3 1",
" 	c None",
".	c #595959",
"+	c #000000",
"                ",
"                ",
"                ",
"                ",
"    .           ",
"    .       .   ",
"   .++     .    ",
"  .+++.....     ",
"    ++++++++    ",
"     +++++++    ",
"     +     +    ",
"     +     +    ",
"                ",
"                ",
"                ",
"                "};

Index: centrallix/sfeditor/x-unknown.unknown.xpm
+++ centrallix/sfeditor/x-unknown.unknown.xpm
/* XPM */
static char * x_unknown_unknown_xpm[] = {
"16 16 4 1",
" 	c None",
".	c #7C90FF",
"+	c #0022FF",
"@	c #001C8E",
"                ",
"                ",
"                ",
"                ",
"     ....       ",
"    .++++@      ",
"   .++++++@     ",
"   .++++++@     ",
"   .++++++@     ",
"   .++++++@     ",
"    .++++@      ",
"     @@@@       ",
"                ",
"                ",
"                ",
"                "};

--gbeeley1034880029--



-------------------------------------------------------
This sf.net email is sponsored by: viaVerio will pay you up to
$1,000 for every account that you consolidate with us.
http://ad.doubleclick.net/clk;4749864;7604308;v?
http://www.viaverio.com/consolidator/osdn.cfm
_______________________________________________
Centrallix-cvsinfo mailing list
Centrallix-cvsinfo@lists.sourceforge.net
https://lists.sourceforge.net/lists/listinfo/centrallix-cvsinfo

From jorupp@css.tayloru.edu  Tue Oct 22 19:13:26 2002
Return-Path: <jorupp@css.tayloru.edu>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (mary.css.tayloru.edu [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP
	id BBBE61A93D; Tue, 22 Oct 2002 19:13:25 -0500 (EST)
Received: from css.tayloru.edu (gabriel.css.tayloru.edu [192.195.249.26])
	by smtp1.css.tayloru.edu (Postfix) with SMTP
	id 611211A93B; Tue, 22 Oct 2002 19:13:23 -0500 (EST)
Received: from 172.30.14.9
        (SquirrelMail authenticated user jorupp)
        by www.css.tayloru.edu with HTTP;
        Tue, 22 Oct 2002 19:13:22 -0500 (EST)
Message-ID: <3532.172.30.14.9.1035332002.squirrel@www.css.tayloru.edu>
Date: Tue, 22 Oct 2002 19:13:22 -0500 (EST)
Subject: matrix thing
From: <jorupp@css.tayloru.edu>
To: <jorupp@css.tayloru.edu>, <dstanley@css.tayloru.edu>
X-Priority: 3
Importance: Normal
X-Mailer: SquirrelMail (version 1.2.8)
MIME-Version: 1.0
Content-Type: multipart/mixed; boundary="----=_20021022191322_86625"
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: RO
X-Status: 
X-Keywords:
X-UID: 1662

------=_20021022191322_86625
Content-Type: text/plain; charset=iso-8859-1
Content-Transfer-Encoding: 8bit

here's that matrix thing


------=_20021022191322_86625
Content-Type: application/vnd.ms-excel; name="matrix.xls"
Content-Disposition: attachment; filename="matrix.xls"
Content-Transfer-Encoding: base64

0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAIwAAAAAAAAAA
EAAA/v///wAAAAD+////AAAAACIAAAD/////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////8J
CBAAAAYFAMIbzQfJgAAABgIAAOEAAgCwBMEAAgAAAOIAAABcAHAABgAAam9ydXBwICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEIAAgCwBGEBAgAAAMABAAA9AQQA
AQACAJwAAgAOABkAAgAAABIAAgAAABMAAgAAAK8BAgAAALwBAgAAAD0AEgDgAWkADE5oPTgAAQAA
AAEAWAJAAAIAAACNAAIAAAAiAAIAAAAOAAIAAQC3AQIAAADaAAIAAAAxABoAyAAAAP9/kAEAAAAA
AAAFAUEAcgBpAGEAbAAxABoAyAAAAP9/kAEAAAAAAAAFAUEAcgBpAGEAbAAxABoAyAAAAP9/kAEA
AAAAAAAFAUEAcgBpAGEAbAAxABoAyAAAAP9/kAEAAAAAAAAFAUEAcgBpAGEAbAAxABoAyAAFAP9/
vAIAAAECAAAFAUEAcgBpAGEAbAAxABoAyAAEAAwAkAEAAAEAAAAFAUEAcgBpAGEAbAAxABoAyAAE
ACQAkAEAAAEAAAAFAUEAcgBpAGEAbAAxABoAoAAAAP9/kAEAAAAAAAAFAUEAcgBpAGEAbAAeBBwA
BQAXAAAiJCIjLCMjMF8pO1woIiQiIywjIzBcKR4EIQAGABwAACIkIiMsIyMwXyk7W1JlZF1cKCIk
IiMsIyMwXCkeBCIABwAdAAAiJCIjLCMjMC4wMF8pO1woIiQiIywjIzAuMDBcKR4EJwAIACIAACIk
IiMsIyMwLjAwXyk7W1JlZF1cKCIkIiMsIyMwLjAwXCkeBDcAKgAyAABfKCIkIiogIywjIzBfKTtf
KCIkIiogXCgjLCMjMFwpO18oIiQiKiAiLSJfKTtfKEBfKR4ELgApACkAAF8oKiAjLCMjMF8pO18o
KiBcKCMsIyMwXCk7XygqICItIl8pO18oQF8pHgQ/ACwAOgAAXygiJCIqICMsIyMwLjAwXyk7Xygi
JCIqIFwoIywjIzAuMDBcKTtfKCIkIiogIi0iPz9fKTtfKEBfKR4ENgArADEAAF8oKiAjLCMjMC4w
MF8pO18oKiBcKCMsIyMwLjAwXCk7XygqICItIj8/Xyk7XyhAXyngABQAAAAAAPX/IAAAAAAAAAAA
AAAAwCDgABQAAQAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAQAAAPX/IAAA9AAAAAAAAAAAwCDgABQA
AgAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAgAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA
9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA9AAAAAAAAAAA
wCDgABQAAAAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAAAA
APX/IAAA9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA9AAA
AAAAAAAAwCDgABQAAAAAAPX/IAAA9AAAAAAAAAAAwCDgABQAAAAAAPX/IAAA9AAAAAAAAAAAwCDg
ABQAAAAAAAEAIAAAAAAAAAAAAAAAwCDgABQAAQArAPX/IAAA+AAAAAAAAAAAwCDgABQAAQApAPX/
IAAA+AAAAAAAAAAAwCDgABQAAQAsAPX/IAAA+AAAAAAAAAAAwCDgABQAAQAqAPX/IAAA+AAAAAAA
AAAAwCDgABQABwAAAPT/AAAA9AAAAAAAAAAAwCDgABQABgAAAPT/AAAA9AAAAAAAAAAAwCDgABQA
AQAJAPX/IAAA+AAAAAAAAAAAwCDgABQABQAAAAEAIAAAKBERQCBAIAAAwCDgABQAAAAAAAEAIgAA
MAAQAAAAIAAAwCCTAgQAEIAD/5MCBAARgAb/kwIEABKABP+TAgQAE4AH/5MCBAAUgAn/kwIEABWA
CP+TAgQAAIAA/5MCBAAWgAX/YAECAAAAhQASAHkIAAAAAAoAUHJpbmNpcGxlc4UAHQB4HQAAAAAV
AE1hbmFnZW1lbnQgQWN0aXZpdGllc4wABAABAAEAwQEIAMEBAABUjQEA/ADkAV0AAAAdAAAADAAA
VG9vbHMgdG8gVXNlHQAAUHJvamVjdCBNYW5hZ2VtZW50IEFjdGl2aXRpZXMIAABQbGFubmluZwgA
AFN0YWZmaW5nCgAAT3JnYW5pemluZwwAAENvb3JkaW5hdGluZwsAAFN1cGVydmlzaW5nCgAATW9u
aXRvcmluZwsAAENvbnRyb2xsaW5nDAAAVG9vbHMgVG8gVXNlAQAAWAcAAG1ldHJpY3MPAABwcml2
YXRlIG1ldHJpY3MZAABwZXJzb25hbCBzb2Z0d2FyZSBwcm9jZXNzDgAAcHVibGljIG1ldHJpY3ME
AABTU1BJDwAAcHJvY2VzcyBtZXRyaWNzDwAAcHJvamVjdCBtZXRyaWNzDAAAc2l6ZSBtZXRyaWNz
HQAAR29hbHMgb2YgU29mdHdhcmUgRW5naW5lZXJpbmcNAABNb2RpZmlhYmlsaXR5CgAARWZmaWNp
ZW5jeQsAAFJlbGlhYmlsaXR5EQAAVW5kZXJzdGFuZGFiaWxpdHkLAABQb3J0YWJpbGl0eQsAAFJl
dXNhYmlsaXR5EgAAQ29udHJvbGxlZCBQcm9jZXNzDgAAZnVuY3Rpb24gcG9pbnQYAABkZWZlY3Qg
cmVtb3ZhbCBlZmZpY2VuY3n/ACIACABzBgAADAAAAO8GAACIAAAAYAcAAPkAAADyBwAAiwEAAAoA
AAAJCBAAAAYQAMIbzQfJgAAABgIAAAsCFAAAAAAAAAAAABEAAAA7GQAAER0AAA0AAgABAAwAAgBk
AA8AAgABABEAAgAAABAACAD8qfHSTWJQP18AAgABACoAAgAAACsAAgAAAIIAAgABAIAACAAAAAAA
AAAAACUCBAAAAP8AgQACAMEEFAAAABUAAACDAAIAAACEAAIAAABNAAIQAABcAFwAbABwADAAMAAx
AC0AaABvAHMAdABcAGwAcAAwADAAMQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQQCBdwA
JA9T/wACAQABAOoKbwhkAAEADwBYAgEAAQBYAgMAAQBMAGUAdAB0AGUAcgAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAA
AAAAAAEAAAACAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAUFJJVuIwAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAABgAAAAAABAnECcQJwAAECcAAAAAAAAAAAAAxAIAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAACAAAAAAAAAGAMEABcSwMAaEMEAAAAAAAAAAAAAQABAAAAAAAAAAAAAAAAAAAAAADvHchw
DwAAAAAAAQAAAAAAAAAAAAAAAAD/AP8AAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAVAYAAFJKUEhBQYKCAAAAAAAAAAAAAAAAQQBEAE0ASQBOAEkAUwBUAFIAQQBUAE8AUgAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAYAAEJBUEhBQYKCAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAoQAiAAEAZAABAAEAAQACAFgCWAIA
AAAAAADgPwAAAAAAAOA/AQBVAAIACAB9AAwAAAAAAAAXDwAGAAIAfQAMAAEAAQAkDA8ABgACAH0A
DAACAAIAtgkPAAYAAgB9AAwAAwADACQKDwAGAAIAfQAMAAQABAAAEQ8ABgACAH0ADAAFAAUASQoP
AAYAAgB9AAwABgAGAAALDwAGAAIAfQAMAAcABwBJEg8ABgACAH0ADAAIAAgA2w0PAAYAAgAAAg4A
AAAAABEAAAAAAAgAAAAIAhAAAAAAAAgA/wAAAAAAAAEPAAgCEAABAAAACAD/AAAAAAAAAQ8ACAIQ
AAIAAAAIAP8AAAAAAAABDwAIAhAAAwAAAAgA/wAAAAAAAAEPAAgCEAAFAAAACAD/AAAAAAAAAQ8A
CAIQAAYAAAAIAP8AAAAAAAABDwAIAhAABwAAAAgA/wAAAAAAAAEPAAgCEAAIAAAACAD/AAAAAAAA
AQ8ACAIQAAkAAAAIAP8AAAAAAAABDwAIAhAACwAAAAgA/wAAAAAAAAEPAAgCEAANAAAACAD/AAAA
AAAAAQ8ACAIQAA4AAAAIAP8AAAAAAAABDwAIAhAAEAAAAAQA/wAAAAAAAAEPAP0ACgAAAAEAGAAT
AAAAvgASAAAAAgAYABgAGAAYABgAGAAHAP0ACgABAAEAFwAUAAAA/QAKAAEAAgAXABUAAAD9AAoA
AQADABcAFgAAAP0ACgABAAQAFwAXAAAA/QAKAAEABQAXABgAAAD9AAoAAQAGABcAGQAAAP0ACgAB
AAcAFwAaAAAA/QAKAAIAAAAPAAAAAAD9AAoAAwAAAA8ACwAAAP0ACgADAAMADwAKAAAA/QAKAAMA
BwAPAAoAAAD9AAoABQAAAA8AEAAAAP0ACgAFAAMADwAKAAAA/QAKAAUABwAPAAoAAAD9AAoABgAA
AA8ADAAAAP0ACgAGAAMADwAKAAAA/QAKAAYABAAPAAoAAAD9AAoABwAAAA8ADQAAAP0ACgAHAAIA
DwAKAAAA/QAKAAcAAwAPAAoAAAD9AAoACAAAAA8ADgAAAP0ACgAIAAMADwAKAAAA/QAKAAgABwAP
AAoAAAD9AAoACQAAAA8ADwAAAP0ACgAJAAcADwAKAAAA/QAKAAsAAAAPABEAAAD9AAoACwADAA8A
CgAAAP0ACgALAAcADwAKAAAA/QAKAA0AAAAPABIAAAD9AAoADQADAA8ACgAAAP0ACgANAAQADwAK
AAAA/QAKAA0ABwAPAAoAAAD9AAoADgAAAA8AGwAAAP0ACgAOAAcADwAKAAAA/QAKABAAAAAPABwA
AAD9AAoAEAACAA8ACgAAAP0ACgAQAAMADwAKAAAA1wAeAC4DAADwACQAYgAOACoAKgAqACoAKgAc
ACoAOAAcAD4CEgC2AAAAAABAAAAAAAAAAAAAAAAdAA8AAxEAAAAAAAEAEQARAAAA5QAKAAEAAAAA
AAEABwDvAAYACAA3AAAACgAAAAkIEAAABhAAwhvNB8mAAAAGAgAACwIUAAAAAAAAAAAAEQAAADQe
AADYIgAADQACAAEADAACAGQADwACAAEAEQACAAAAEAAIAPyp8dJNYlA/XwACAAEAKgACAAAAKwAC
AAAAggACAAEAgAAIAAAAAAAAAAAAJQIEAAAA/wCBAAIAwQQUAAAAFQAAAIMAAgAAAIQAAgAAAKEA
IgAAAP8AAQABAAEABAEAAAAAAAAAAAAA4D8AAAAAAADgPwEAVQACAAgAfQAMAAAAAABJEA8ABgAE
AX0ADAABAAEA2wsPAAYABAF9AAwAAwADAAALDwAGAAQBfQAMAAQABQC2DA8ABgAEAX0ADAAGAAYA
tgsPAAYABAF9AAwABwAHALYKDwAGAAQBfQAMAAgACAAACw8ABgAEAQACDgAAAAAAEQAAAAAACAAA
AAgCEAAAAAAACAD/AAAAAAAAAQ8ACAIQAAEAAAAIAP8AAAAAAAABDwAIAhAAAgAAAAgA/wAAAAAA
AAEPAAgCEAADAAAACAD/AAAAAAAAAQ8ACAIQAAUAAAAIAP8AAAAAAAABDwAIAhAABgAAAAgA/wAA
AAAAAAEPAAgCEAAHAAAACAD/AAAAAAAAAQ8ACAIQAAgAAAAIAP8AAAAAAAABDwAIAhAACQAAAAgA
/wAAAAAAAAEPAAgCEAALAAAACAD/AAAAAAAAAQ8ACAIQAA0AAAAIAP8AAAAAAAABDwAIAhAADgAA
AAgA/wAAAAAAAAEPAAgCEAAQAAAABwD/AAAAAAAAAQ8A/QAKAAAAAQAYAAEAAAC+ABIAAAACABgA
GAAYABgAGAAYAAcA/QAKAAEAAQAXAAIAAAD9AAoAAQACABcAAwAAAP0ACgABAAMAFwAEAAAA/QAK
AAEABAAXAAUAAAD9AAoAAQAFABcABgAAAP0ACgABAAYAFwAHAAAA/QAKAAEABwAXAAgAAAD9AAoA
AgAAAA8ACQAAAP0ACgADAAAADwALAAAA/QAKAAMAAQAPAAoAAAD9AAoAAwACAA8ACgAAAP0ACgAD
AAMADwAKAAAA/QAKAAMABQAPAAoAAAD9AAoAAwAGAA8ACgAAAP0ACgADAAcADwAKAAAA/QAKAAUA
AAAPABAAAAD9AAoABQABAA8ACgAAAP0ACgAFAAYADwAKAAAA/QAKAAYAAAAPAAwAAAD9AAoABgAC
AA8ACgAAAP0ACgAGAAUADwAKAAAA/QAKAAcAAAAPAA0AAAD9AAoABwAGAA8ACgAAAP0ACgAIAAAA
DwAOAAAA/QAKAAgAAQAPAAoAAAD9AAoACAACAA8ACgAAAP0ACgAIAAMADwAKAAAA/QAKAAgABQAP
AAoAAAD9AAoACAAGAA8ACgAAAP0ACgAIAAcADwAKAAAA/QAKAAkAAAAPAA8AAAD9AAoACQABAA8A
CgAAAP0ACgAJAAIADwAKAAAA/QAKAAkABQAPAAoAAAD9AAoACQAGAA8ACgAAAP0ACgALAAAADwAR
AAAA/QAKAAsAAQAPAAoAAAD9AAoACwACAA8ACgAAAP0ACgALAAUADwAKAAAA/QAKAAsABgAPAAoA
AAD9AAoACwAHAA8ACgAAAP0ACgANAAAADwASAAAA/QAKAA0AAQAPAAoAAAD9AAoADQACAA8ACgAA
AP0ACgANAAUADwAKAAAA/QAKAA0ABgAPAAoAAAD9AAoADQAHAA8ACgAAAP0ACgAOAAAADwAbAAAA
/QAKAA4AAQAPAAoAAAD9AAoADgACAA8ACgAAAP0ACgAQAAAADwAcAAAA/QAKABAAAQAPAAoAAAD9
AAoAEAAFAA8ACgAAAP0ACgAQAAYADwAKAAAA1wAeABwEAADwACQAYgAOAGIAKgAqABwAYgBGAFQA
VAAqAD4CEgC2BgAAAABAAAAAAAAAAAAAAAAdAA8AAxEAAAAAAAEAEQARAAAA5QAKAAEAAAAAAAEA
BwDvAAYACAA3AAAACgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD+/wAABQECAAAAAAAAAAAAAAAA
AAAAAAABAAAA4IWf8vlPaBCrkQgAKyez2TAAAACkAAAABwAAAAEAAABAAAAABAAAAEgAAAAIAAAA
XAAAABIAAABsAAAADAAAAIQAAAANAAAAkAAAABMAAACcAAAAAgAAAOQEAAAeAAAACQAAAGRzdGFu
bGV5AAAgAB4AAAAHAAAAam9ydXBwAHkeAAAAEAAAAE1pY3Jvc29mdCBFeGNlbABAAAAAgIK7NbxZ
wgFAAAAAANs2zSh6wgEDAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/v8AAAUBAgAAAAAAAAAAAAAAAAAAAAAAAQAA
AALVzdWcLhsQk5cIACss+a4wAAAA8AAAAAkAAAABAAAAUAAAAA8AAABYAAAAFwAAAHQAAAALAAAA
fAAAABAAAACEAAAAEwAAAIwAAAAWAAAAlAAAAA0AAACcAAAADAAAAM0AAAACAAAA5AQAAB4AAAAS
AAAAVGF5bG9yIFVuaXZlcnNpdHkAdAADAAAArQ0KAAsAAAAAAAAACwAAAAAAAAALAAAAAAAAAAsA
AAAAAAAAHhAAAAIAAAALAAAAUHJpbmNpcGxlcwAWAAAATWFuYWdlbWVudCBBY3Rpdml0aWVzAAwQ
AAACAAAAHgAAAAsAAABXb3Jrc2hlZXRzAAMAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAACAAAAAwAAAAQAAAAFAAAABgAAAAcAAAAIAAAACQAA
AAoAAAALAAAADAAAAA0AAAAOAAAADwAAABAAAAARAAAA/v///xMAAAAUAAAAFQAAABYAAAAXAAAA
GAAAABkAAAD+////GwAAABwAAAAdAAAAHgAAAB8AAAAgAAAAIQAAAP7////9/////v//////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////
////////////////////////////UgBvAG8AdAAgAEUAbgB0AHIAeQAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYABQH//////////wIAAAAgCAIAAAAAAMAAAAAA
AABGAAAAAAAAAAAAAAAAAAAAAAAAAAD+////AAAAAAAAAABXAG8AcgBrAGIAbwBvAGsAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgACAf//////////////
/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA/IwAAAAAAAAUAUwB1AG0A
bQBhAHIAeQBJAG4AZgBvAHIAbQBhAHQAaQBvAG4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAo
AAIBAQAAAAMAAAD/////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAAAAQ
AAAAAAAABQBEAG8AYwB1AG0AZQBuAHQAUwB1AG0AbQBhAHIAeQBJAG4AZgBvAHIAbQBhAHQAaQBv
AG4AAAAAAAAAAAAAADgAAgH///////////////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAaAAAAABAAAAAAAAA=

------=_20021022191322_86625--

From Jon_Rupp@TAYLORU.EDU  Tue Nov  5 11:37:35 2002
Return-Path: <Jon_Rupp@TAYLORU.EDU>
Delivered-To: jorupp@css.tayloru.edu
Received: from localhost (mary.css.tayloru.edu [127.0.0.1])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP id 385D91A94D
	for <jorupp@css.tayloru.edu>; Tue,  5 Nov 2002 11:37:35 -0500 (EST)
Received: from mailsrv1.campus.tayloru.edu (mailsrv1.tayloru.edu [192.195.234.16])
	by smtp1.css.tayloru.edu (Postfix) with ESMTP id 6C1E81A94C
	for <jorupp@css.tayloru.edu>; Tue,  5 Nov 2002 11:37:33 -0500 (EST)
Received: from mailsrv2.campus.tayloru.edu ([192.195.234.17]) by mailsrv1.campus.tayloru.edu with Microsoft SMTPSVC(5.0.2195.4905);
	 Tue, 5 Nov 2002 11:37:32 -0500
X-MimeOLE: Produced By Microsoft Exchange V6.0.5762.3
content-class: urn:content-classes:message
MIME-Version: 1.0
Content-Type: text/plain;
	charset="utf-8"
Content-Transfer-Encoding: base64
Subject: GPS project
Date: Tue, 5 Nov 2002 11:37:32 -0500
Message-ID: <DE4E6A4A0F62BE47BCF00E469D0F9F100E8E11@mailsrv2.campus.tayloru.edu>
X-MS-Has-Attach: 
X-MS-TNEF-Correlator: 
Thread-Topic: Specifications
Thread-Index: AcKAgWR9Y+4Sc4e/TYe96z5ZRmOGbAEZ/alQ
From: "Rupp, Jon" <Jon_Rupp@TAYLORU.EDU>
To: "Chapman, Joshua" <joshua_chapman@TAYLORU.EDU>,
	"Carl, Brandon" <brandon_carl@TAYLORU.EDU>, <jorupp@css.tayloru.edu>
X-OriginalArrivalTime: 05 Nov 2002 16:37:33.0198 (UTC) FILETIME=[A3E8BAE0:01C284E9]
X-Virus-Scanned: by AMaViS snapshot-20020300
Status: O
X-Status: 
X-Keywords:
X-UID: 1689

SGV5IGd1eXMsDQogDQpJIGZvcmdvdCB3aGljaCBuaWdodCB3ZSBkZWNpZGVkIHRvIHdvcmsgb24g
dGhlIEdQUyBwcm9qZWN0LiAgSSB0aG91Z2h0IGl0IHdhcyBlaXRoZXIgdG9uaWdodCBvciBUaHVy
c2RheSBuaWdodCwgYnV0IEkgY291bGRuJ3QgcmVtZW1iZXIuICBJIGp1c3QgY2hlY2tlZCB0aGUg
b25saW5lIHJlc2VydmF0aW9uIHN5c3RlbSBmb3IgdGhlIEdQUyB1bml0LCBhbmQgZm91bmQgdGhh
dCBUaHVyc2RheSB3YXMgc3RpbGwgZnJlZSwgc28gSSBncmFiYmVkIGl0LiAgSWYgdGhpcyBpcyBu
b3Qgd2hhdCB3ZSBkZWNpZGVkIGluIGNsYXNzIChzaW5jZSBJIGRvbid0IHJlbWVtYmVyIDopIGxl
dCBtZSBrbm93IGFuZCByZXNlcnZlIGl0IGZvciB0aGUgdGltZSB3ZSBhZ3JlZWQgb24uDQogDQpK
b25hdGhhbg0K

