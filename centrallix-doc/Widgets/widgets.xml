<?xml version='1.0'?>
<widgets>
	<widget name="checkbox" type="widget/checkbox">
		<overview>
			<p>The checkbox widget is used to display a value that can be either true or false (or on/off, yes/no, etc.).It displays as a simple clickable check box.</p>
		</overview>
		<usage>
			<p>The checkbox widget can be placed inside of any visual container, and will attach itself to any form widget that contains it (whether directly or indirectly).=  Checkboxes may not contain visual widgets.</p>
			<p>Note: form widget interaction was not yet implemented as of the time of writing of this document.</p>
		</usage>
		<properties>
			<property name="x" type="integer">x-coordinate of the upper left corner of the checkbox, default is 0.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the checkbox, default is 0.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here are two checkboxes.
checkbox_test "widget/page"
	{
	background="/sys/images/slate2.gif";
	testcheck2 "widget/checkbox"
		{
		x = 20; y = 40;
		}
	testcheck "widget/checkbox"
		{
		x = 20; y = 20;
		}
	}
		]]>
		</sample>
	</widget>
	<widget name="connector" type="widget/connector">
		<overview>
			<p>Each widget can have events and actions associated with it. The events occur when certain things occur via the user interface, via timers, or even as a result of data being loaded from the server.=  Actions cause certain things to happen to or within a certain widget, for example causing an HTML layer to reload with a new page, or causing a scrollable area to scroll up or down.</p>
			<p>The connector widget allows an event to be linked with an action without actually writing any JavaScript code to do so -- the connector object is created, and given an event to trigger it and an action to perform when it is triggered.</p>
			<p>Events and actions can have parameters, which specify more information about the occurrence of an event, or which specify more information about how to perform the action.Such parameters from events can be linked into parameters for actions via the connector widget as well.</p>
		</overview>
		<usage>
			<p>The connector object should be a sub-object of the widget which will trigger the event.=  Any widget with events can contain connectors as subwidgets.More than one connector may be attached to another widget's event.</p>
			<p>An example connector would link the click of a URL in a treeview with the loading of a new page in an HTML area.See the Example source code at the end of this document to see how this is done.</p>
		</usage>
		<properties>
			<property name="action" type="string">The name of the action which will be activated on another widget on the page.</property>
			<property name="event" type="string">The name of the event that this connector will act on.</property>
			<property name="target" type="string">The name of another widget on the page whose action will be called by this connector.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here's our connector.Imagine that this is embedded within a treeview
// and references an 'html' control called 'ht1' somewhere else on the page.
//
cn1 "widget/connector"
	{
	// Triggered by ClickItem from the treeview.
	event = "ClickItem";

	// Causes the LoadPage action on html area 'ht1'
	target = "ht1";
	action = "LoadPage";

	// The Source for LoadPage is the Pathname from ClickItem.
	Source = "Pathname";
	}
		]]>
		</sample>
	</widget>
	<widget name="editbox" type="widget/editbox">
		<overview>
			<p>An editbox form element widget allows the display and data entry of a single line of text (or a numeric value).When the editbox is clicked (and thus receives keyboard focus), the user can type and erase data inside the widget.Data which does not fit will cause the text to scroll. When it receives keyboard focus, the editbox displays a flashing I-beam cursor.The cursor color uses the data focus color for the page (default is '#000080', or dark blue).</p>
		</overview>
		<usage>
			<p>The editbox can be placed within any visual widget (or within a form widget).=  Editboxes automatically attach themselves to the form which contains them (whether directly or indirectly).=  Editboxes can contain no visual widgets.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the contents of the editbox.</property>
			<property name="bgcolor" type="string">A color, RGB or named, for the editbox contents. If neither bgcolor nor background transparent.</property>
			<property name="height" type="integer">height, in pixels, of the editbox.</property>
			<property name="maxchars" type="integer">number of characters to accept from the user.</property>
			<property name="style" type="string">Either "raised" or "lowered", and determines the style of the border drawn around the "raised".</property>
			<property name="width" type="integer">width, in pixels, of the editbox.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the editbox, default is 0.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the editbox, default is 0.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here is a single lonely edit box.
my_editbox "widget/editbox"
	{
	style = "lowered";
	bgcolor = "white";
	x = 10; y = 10; width=100; height=19;
	}
		]]>
		</sample>
	</widget>
	<widget name="execmethod" type="widget/execmethod">
		<overview>
			<p>The execmethod widget is a nonvisual widget which is used to call ObjectSystem methods on objects on the server.This widget may become deprecated in the future when more advanced OSML API widgets become available.</p>
			<p>These widgets are used via the activation of their "ExecuteMethod" action.</p>
		</overview>
		<usage>
			<p>The execmethod widget, since it is nonvisual, can be placed almost anywhere but is typically placed at the top-level (within an object of type "widget/page") for clarity's sake. It has no effect on its container.These widgets cannot contain visual widgets, and since they have no Events, normally contain no connector widgets either.</p>
		</usage>
		<properties>
			<property name="method" type="string">The name of the method to invoke.</property>
			<property name="object" type="string">The ObjectSystem pathname of the object on which the method is to be run.</property>
			<property name="parameter" type="string">A string parameter to pass to the method being invoked.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
			<action name="ExecuteMethod">action causes the widget to execute the method on the server. It can take three parameters, which default to those provided in this widget's properties: "Objname", the object path, "Method", the method to invoke, and "Parameter", the parameter to pass to the method being invoked.</action>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// This execmethod widget is set up to play a sound file (on the server).
mySoundPlayer "widget/execmethod"
	{
	object = "/sys/ossdsp.aud";
	method = "Play";
	parameter = "/data/Welcome.wav";
	}
		]]>
		</sample>
	</widget>
	<widget name="form" type="widget/form">
		<overview>
			<p>The form widget is used as a high-level container for form elements.=  Essentially, a form widget represents a single record of data, or the attributes of a single object in the objectsystem (or of a single query result set object). Form widgets must be used in conjunction with an ObjectSource widget, which does the actual transferring of data to and from the server.</p>
			<p>Forms have five different "modes"of operation, each of which can be specifically allowed or disallowed for the form.</p>
		<ol>
		<li> No Data - form inactive/disabled, no data viewed/edited.</li>
		<li> View - data being viewed readonly.</li>
		<li> Modify - existing data being modified.</li>
		<li> Query - query criteria being entered (used for query-by-form applications)</li>
		<li> New - new object being entered/created.</li>
		</ol>
			<p>Note: at the time of this writing, the form widget was in its design phase and had not yet been implemented.</p>
		</overview>
		<usage>
			<p>Although the form widget itself is nonvisual in nature, it can contain visual widgets, including other containers, which may then in turn contain form elements as well.=  The form widget may be contained within any widget with a visual container (otherwise, the form elements would not show up on the page).</p>
		</usage>
		<properties>
			<property name="AllowQuery" type="integer"><ni/>Allow query by form</property>
			<property name="AllowNew" type="integer"><ni/>Allow creation of new records</property>
			<property name="AllowModify" type="integer"><ni/>Allow modification of existing records</property>
			<property name="AllowView" type="integer"><ni/>Allow viewing of existing data</property>
			<property name="AllowNoData" type="integer"><ni/>Allow the 'no data' state</property>
			<property name="MultiEnter" type="integer"><ni/>Enable MultiEnter</property>
			<property name="TabMode" type="string"><ni/>How to react to a tab in a control</property>
			<property name="ReadOnly" type="integer"><ni/>Allow changes</property>
			<property name="_3bconfirmwindow" type="string">The name of the window to use for all 3-way confirm operations (save/discard/cancel)</property>
		</properties>
		<children>
			<child type="formelement">
				<childproperty name="fieldname" type="string"><ni/>Fieldname (from the dataset) to bind this element to</childproperty>
			</child>
			<child type="formstatus">
			</child>
		</children>
		<events>
		</events>
		<actions>
			<action name="Clear"><ni/>Clears the form to a 'no data'state.</action>
			<action name="Delete"><ni/>Deletes the current object displayed.</action>
			<action name="Discard">Cancels an edit of form contents.</action>
			<action name="Edit">Allows editing of form's contents.</action>
			<action name="First">Moves the form to the first object in the objectsource.</action>
			<action name="Last">Moves the form to the last object in the objectsource.</action>
			<action name="New"><ni/>Allows creation of new form contents.</action>
			<action name="Next">Moves the form to the next object in the objectsource.</action>
			<action name="Prev">Moves the form to the previous object in the objectsource.</action>
			<action name="Query">Allows entering of query criteria.</action>
			<action name="QueryExec">the query and returns data.</action>
			<action name="Save">Saves the form's contents.</action>
		</actions>
		<sample>
		<![CDATA[
		]]>
		</sample>
	</widget>
	<widget name="formstatus" type="widget/formstatus">
		<overview>
			<p>Many times with multi-mode forms like those offered by Centrallix, the end-user can become confused as to what the form is currently "doing" (for instance, is a blank form with a blinking cursor in a "new" state or "enter query" state?).This issue is addressed by the form status widget. A form status widget displays the current mode of operation that a form is in, as well as whether the form is busy processing a query, save, or delete operation.This clear presentation of the form's mode is intended to clear up any confusion created by a multi-mode form.=  This widget is a special-case form element.</p>
			<p>Note: at the time of this writing, the form status widget was in its design phase and had not yet been implemented.</p>
		</overview>
		<usage>
			<p>The form status widget can only be used either directly or indirectly within a form widget.It can contain no visual widgets.</p>
		</usage>
		<properties>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions></actions>
		<sample>
		<![CDATA[
		]]>
		</sample>
	</widget>
	<widget name="frameset" type="widget/frameset">
		<overview>
			<p>The frameset widget provides the ability to construct a page consisting of multiple (potentially resizeable) frames.It is one of two possible top-level widgets (the page widget is the other one).=  Framesets can consist of one or more frames, arranged either in rows or columns.</p>
		</overview>
		<usage>
			<p>The frameset can either be a top-level widget, or can be contained within a frameset (for subframes).The frameset widget should not be used anywhere else in an application. The frameset should contain only other framesets and/or pages.</p>
		</usage>
		<properties>
			<property name="borderwidth" type="integer">number of pixels wide the border(s) between the frame(s) are. Can be set to zero.</property>
			<property name="direction" type="string">Whether the frames are arranged in rows or columns.  Set this attribute to "rows" or "columns"respectively.</property>
		</properties>
		<children>
			<child type="any">
				<childproperty name="framesize" type="integer/string">large this frame will be.Can either be expressed as an integer, which represents "50%".</childproperty>
				<childproperty name="marginwidth" type="integer">width, in pixels, of the margins of the frame.</childproperty>
			</child>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Example of a page with three frames on it.
//
BigFrameset "widget/frameset"
	{
	direction = "rows";
	borderwidth = 3;
	TopFrameset "widget/frameset"
		{
		framesize = "40%";
		direction = "columns";
		borderwidth = 3;
		TopLeftDocument "widget/page"
			{
			framesize = "50%";
			}
		TopRightDocument "widget/page"
			{
			framesize = "50%";
			}
		}
	BottomDocument "widget/page"
		{
		framesize = "60%";
		}
	}
		]]>
		</sample>
	</widget>
	<widget name="html" type="widget/html">
		<overview>
			<p>The HTML area widget provides a way to insert a plain HTML document into a Centrallix generated page, either in-flow (static) or in its own separate layer that can be reloaded at will (dynamic). The HTML document can either be given in a property of the widget or can be referenced so that the HTML is read from an external document.</p>
			<p>The HTML area widget also can act as a mini-browser -- clicking on hyper-text links in the visible document will by default cause the link to be followed, and the new document to be displayed in the HTML area (if the HTML area is dynamic).</p>
			<p>Dynamic HTML areas do double-buffering and allow for transitions of various types.</p>
		</overview>
		<usage>
			<p>The HTML area widget can be placed within any other widget that has a visible container (such as panes, pages, tab pages, etc.).</p>
		</usage>
		<properties>
			<property name="content" type="string">Static contents for the HTML area. Usually used in lieu of "source" (see below).</property>
			<property name="epilogue" type="string">HTML source to be inserted at the end of the HTML document.</property>
			<property name="height" type="integer">height, in pixels, of the HTML area as a whole.</property>
			<property name="mode" type="string">Either "static" or "dynamic", and determines whether the HTML area is in-flow ("static") can be positioned and reloaded at-will.</property>
			<property name="prologue" type="string">HTML source to be inserted at the beginning of the HTML document.</property>
			<property name="source" type="string">The objectsystem path or URL containing the document to be loaded into the HTML as  local server.</property>
			<property name="width" type="integer">width, in pixels, of the HTML area as a whole.</property>
			<property name="x" type="integer">dynamic HTML areas, the x coordinate on the container of its upper left corner.</property>
			<property name="y" type="integer">dynamic HTML areas, the y coordinate on the container of its upper left corner.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
			<action name="LoadPage">loadpage action takes two parameters. "Source" contains the URL for the new page to be loaded into the HTML area.The optional parameter "Transition" indicates the type of fade to be used between one page and the next.Currently supported values are "pixelate", "rlwipe", and "lrwipe".</action>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
HTMLArea "widget/html"
	{
	mode = "dynamic";
	x = 2; y = 2;
	width = 478; height = 396;
	source = "http://localhost:800/index.html";
	}
		]]>
		</sample>
	</widget>
	<widget name="htmlwindow" type="widget/htmlwindow">
		<overview>
			<p>The htmlwindow provides the capability of creating a popup dialog or application window within a web page.The window is not actually a separate browser window, but rather a movable container that can appear "floating" above the rest of the Centrallix application.They can take on one of two styles;"dialog" and "window", which currently relate only to how the window border and titlebar are drawn.=  The windows support windowshading (double-clicking on the titlebar to "rollup" or "rolldown" the window contents).</p>
			<p>These "windows" currently do not support multiple instantiation.</p>
		</overview>
		<usage>
			<p>Htmlwindows are normally coded at the top-level of an application, since if they are placed within containers, the container limits where the window can be moved.These windows can contain other visual and nonvisual widgets.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the body of the window.</property>
			<property name="bgcolor" type="string">A color, RGB or named, to be used as the window body's background.If neither transparent.</property>
			<property name="hdr_background" type="string">A background image for the titlebar of the window.</property>
			<property name="hdr_bgcolor" type="string">A color, RGB or named, for the titlebar of the window.</property>
			<property name="height" type="integer">height, in pixels, of the window.</property>
			<property name="style" type="string">Either "dialog" or "window", and determines the style of the window's border.</property>
			<property name="textcolor" type=" (string">The color for the titlebar's text (window title).  Default "black".</property>
			<property name="titlebar" type="yes/no">whether the window will have a titlebar. Default "yes".</property>
			<property name="title" type="string">The window's title.</property>
			<property name="visible" type="true/false">the window is initially visible on screen. The window has an action which can "true".</property>
			<property name="width" type="integer">width, in pixels, of the window.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the window, relative to its container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the window, relative to its container.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
			<action name="SetVisibility">one parameter, "is_visible", which is set to 0 or 1 to hide or show the window, respectively.</action>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
MyButton "widget/htmlwindow"
	{
	x = 10; y = 10;
	width = 200; height = 200;
	style = "dialog";
	bgcolor = "#c0c0c0";
	hdr_background = "/sys/images/grey_gradient2.png";
	title = "An HTML Window";
	textcolor = "black";
	}
		]]>
		</sample>
	</widget>
	<widget name="imagebutton" type="widget/imagebutton">
		<overview>
			<p>The ImageButton widget provides a clickable button that is comprised of a set of two or three images.The first image is shown normally when the button is idle, the second when the button is pointed-to, and the third image is shown when the button is actually clicked.=  This provides a "tri-state" appearance much like that provided by buttons in modern user interfaces, although the button can be two-state, with just an "unclicked" and "clicked" version of the image.</p>
			<p>The images are automatically swapped out when the appropriate mouse events occur on the button.</p>
		</overview>
		<usage>
			<p>The ImageButton can be placed inside any visible container, but only nonvisual widgets can be placed within it.</p>
		</usage>
		<properties>
			<property name="clickimage" type="string">The ObjectSystem pathname of the image to be shown when the user clicks the specified.</property>
			<property name="image" type="string">The pathname of the image to be shown when the button is "idle".</property>
			<property name="pointimage" type="string">The pathname of the image to be shown when the button is pointed-to.Defaults to specified.</property>
			<property name="height" type="integer">height, in pixels, of the image button.</property>
			<property name="width" type="integer">width, in pixels, of the image button.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the button, relative to its container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the button, relative to its container.</property>
		</properties>
		<children>
		</children>
		<events>
			<event name="Click">This event occurs when the user clicks the button. No parameters are available from this event.</event>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
MyButton "widget/imagebutton"
	{
	x = 10; y = 10;
	width = 50;
	height = 20;

	// No pointimage for this one, thus not "tristate".
	image = "/images/default.png"
	clickimage = "/images/clicked.png"
	}
		]]>
		</sample>
	</widget>
	<widget name="menu" type="widget/menu">
		<overview>
			<p>The menu widget is used to create popup menus, drop-down menus, and menu bars.=  Menu widgets don't actually implement the selection of items on the menu; rather the items on a menu are typically textbuttons with tristate enabled.</p>
		</overview>
		<usage>
			<p>Menus can be placed inside of any visual container. However, be aware that the menu will be clipped by its container, so placing them at the top-level can be of an advantage. Menu widgets can contain other visual widgets, but typically only textbuttons are used.The widgets in a menu will be repositioned when the menu initializes, so their (x,y) coordinate positions aren't important to specify exactly.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the menu.</property>
			<property name="bgcolor" type="string">A color, RGB or named, to be used as the menu's background.  If neither bgcolor nor transparent.</property>
			<property name="orientation" type="string">Either "horizontal" or "vertical" (default), and determines whether the menu is a drop- a menubar (horizontal).</property>
			<property name="type" type="string">Either "popup" (default) or "fixed".Popup menus disappear after an item on them is not.</property>
			<property name="width" type="integer">width, in pixels, of the menu.The height is dynamically determined based on the contents.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the menu, relative to its container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the menu, relative to its container.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
			<action name="Activate">This action causes a popup-type menu to become visible and appear at a selected (x,y) position on the page.When the user selects an item on the menu or clicks elsewhere on the page, the menu then disappears.Two parameters - X and Y, the (integer) positions on the page for the menu to appear.</action>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here's a sample menu with three buttons.
myMenu "widget/menu"
	{
	x = 10; y = 10; width = 72;
	orientation = "vertical"; type = "popup";
	bgcolor="#808080";
	
	b1 "widget/textbutton" { x = 0; y = 0; width=70; height=24;text="One"; }
	b2 "widget/textbutton" { x = 0; y = 0; width=70; height=24;text="Two"; }
	b3 "widget/textbutton" { x = 0; y = 0; width=70; height=24;text="Three"; }
	}
		]]>
		</sample>
	</widget>
	<widget name="objectsource" type="widget/objectsource">
		<overview>
			<p>The objectsource widget lies at the core of Centrallix's ability to dynamically exchange data between the server and client. This widget implements a form of "replication" by maintaining a replica of a small segment of data in the user agent.</p>
			<p>Both form and dynamic table widgets interact with the objectsource nonvisual widget to acquire data, update data, create data, and delete data. In fact, it is possible for more than one form and/or table to be connected with a given objectsource, to perform a variety of functions.</p>
			<p>Note: at the time of this writing, the objectsource widget was in its design phase and had not yet been implemented.</p>
		</overview>
		<usage>
			<p>Objectsource widgets are normally used at the top-level of an application, within a "widget/page" object.A page may have more than one objectsource widget.</p>
		</usage>
		<properties>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions></actions>
		<sample>
		<![CDATA[
		]]>
		</sample>
	</widget>
	<widget name="page" type="widget/page">
		<overview>
			<p>The page widget represents the HTML application (or subapplication) as a whole and serves as a top-level container for other widgets in the application.=  The page widget also implements some important functionality regarding the management of keypresses, focus, widget resizing, and event management. When creating an application, the top-level object in the application must either be "widget/page" or "widget/frameset", where the latter is used to create a multi-framed application.</p>
		</overview>
		<usage>
			<p>The page widget cannot be embedded within other widgets on a page. There must only be one per page, unless a frameset is used, in which case page widgets may be added within a frameset widget.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the page.</property>
			<property name="bgcolor" type="string">The background color for the page. Can either be a recognized color (such as "red", an RGB color (such as "#C0C0C0").</property>
			<property name="datafocus1" type="string">A color, RGB or named, for the top and left edges of rectangles drawn to indicate data blue).</property>
			<property name="datafocus2" type="string">A color, RGB or named, for the bottom and right edges of rectangles drawn to indicate blue).</property>
			<property name="kbdfocus1" type="string">A color, RGB or named, to be used for the top and left edges of rectangles drawn to  "white".</property>
			<property name="kbdfocus2" type="string">A color, RGB or named, for the bottom and right edges of rectangles drawn to indicate grey).</property>
			<property name="mousefocus1" type="string">A color, RGB or named, to be used for the top and left edges of rectangles drawn to  "black".</property>
			<property name="mousefocus2" type="string">A color, RGB or named, for the bottom and right edges of rectangles drawn to indicate "black".</property>
			<property name="textcolor" type=" (string">The default color for text which appears on the page.  Can either be a named color or color.</property>
			<property name="title" type="string">The title which will appear in the browser's window title bar.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// A really simple application.Just a blank page with a title.
//
MyPage "widget/page"
	{
	title = "This is an example page.";
	bgcolor = "white";
	textcolor = "black";
	}
		]]>
		</sample>
	</widget>
	<widget name="pane" type="widget/pane">
		<overview>
			<p>The pane is Centrallix's simplest container. It consists only of a background and a border, which can either have a "raised" edge or "lowered" edge style.</p>
		</overview>
		<usage>
			<p>This container can be placed inside any widget having a visible container.=  Visual or nonvisual widgets may be placed inside a pane.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the pane.</property>
			<property name="bgcolor" type="string">A color, RGB or named, to be used as the pane's background.  If neither bgcolor nor transparent.</property>
			<property name="height" type="integer">height, in pixels, of the pane.</property>
			<property name="style" type="string">Either "raised" or "lowered", and determines the style of the pane's border.</property>
			<property name="width" type="integer">width, in pixels, of the pane.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the pane, relative to its container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the pane, relative to its container.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
mypane "widget/pane"
	{
	x=100; y=100; width=300; height=300;
	style = "raised";
	bgcolor = "#c0c0c0";
	}
		]]>
		</sample>
	</widget>
	<widget name="radiobuttonpanel" type="widget/radiobuttonpanel">
		<overview>
			<p>A radio button panel widget is a form element used to create a set of radio buttons on screen.Only one radio button may be selected at a time.</p>
		</overview>
		<usage>
			<p>The radio button panel can be placed inside of any visual container, and will automatically attach itself to a form widget if it is inside of one (directly or indirectly).The "widget/radiobuttonpanel" is the main widget, and can contain any number of "widget/radiobutton" widgets which specify the choices which will be present on the panel.No other visual widgets can be contained within a radio button panel.</p>
			<p>Note: form widget interaction was not yet implemented as of the time of writing of this document.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the radio button panel.</property>
			<property name="bgcolor" type="string">A color, RGB or named, for the panel background. If neither bgcolor nor background transparent.</property>
			<property name="height" type="integer">height, in pixels, of the panel.</property>
			<property name="outlinecolor" type="string">The color, RGB or named, of the rectangular border drawn around the radio buttons.</property>
			<property name="textcolor" type=" (string">The color, RGB or named, of the text within the panel.  Default: "black".</property>
			<property name="title" type="string">The title for the radio button panel, which appears superimposed on the rectangular   border around the radio buttons.</property>
			<property name="width" type="integer">width, in pixels, of the panel.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the panel, default is 0.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the panel, default is 0.</property>
		</properties>
		<children>
			<child type="widget/radiobutton">
				<childproperty name="label" type="string">The text label to appear beside the radio button.</childproperty>
				<childproperty name="selected" type="true/false">the radio button is initially selected or not. Should only be set on one radio Default;"false".</childproperty>
			</child>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here are some radio buttons...
testradio "widget/radiobuttonpanel" 
	{
	x=20; y=20;
	width=150; height=80;
	title="test";
	bgcolor="#ffffff";

	label1 "widget/radiobutton" { label="basketball";selected="true"; }
	label2 "widget/radiobutton" { label="is fun"; }
	}
		]]>
		</sample>
	</widget>
	<widget name="remotectl" type="widget/remotectl">
		<overview>
			<p>The remote control nonvisual widget allows for one application (or instance of an application) to activate Actions in another running application, even if those applications are on two separate client computer systems. This is done by passing the event/action information through a remote control channel on the server.</p>
			<p>Two remote control widgets are required: a master and slave. This widget is the slave widget, which receives remote control events via the Centrallix server. When a master widget (remotemgr) sends an event through the channel, this slave widget is automatically activated and can then trigger the appropriate action on another widget on the page.</p>
			<p>In order for the remote control event to be passed through Centrallix, the master and slave widgets must both be using the same channel id and be logged in with the same username.They need not be a part of the same session on the server.</p>
			<p>Note: at the time of this writing, the remotectl widget was not yet operational.</p>
		</overview>
		<usage>
			<p>The remote control widget is a nonvisual widget and thus cannot contain visual widgets.=  It is normally located at the top-level of an application, within a "widget/page" object.</p>
		</usage>
		<properties>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions></actions>
		<sample>
		<![CDATA[
		]]>
		</sample>
	</widget>
	<widget name="remotemgr" type="widget/remotemgr">
		<overview>
			<p>The remote control manager nonvisual widget allows for one application (or instance of an application) to activate Actions in another running application, even if those applications are on two separate client computer systems. This is done by passing the event/action information through a remote control channel on the server.</p>
			<p>Two remote control widgets are required: a master and slave. This widget is the master widget, which sends remote control events via the Centrallix server. When a this widget sends an event through the channel, the slave widget (remotectl) is automatically activated and can then trigger the appropriate action on another widget on the remote application's page.</p>
			<p>In order for the remote control event to be passed through Centrallix, the master and slave widgets must both be using the same channel id and be logged in with the same username.They need not be a part of the same session on the server.</p>
			<p>Note: at the time of this writing, the remotemgr widget was not yet written.</p>
		</overview>
		<usage>
			<p>The remote control manager widget is a nonvisual widget and thus cannot contain visual widgets.It is normally located at the top-level of an application, within a "widget/page" object.</p>
		</usage>
		<properties>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions></actions>
		<sample>
		<![CDATA[
		]]>
		</sample>
	</widget>
	<widget name="scrollpane" type="widget/scrollpane">
		<overview>
			<p>The scrollpane widget provides a container and a scrollbar. The scrollbar can be used to move up and down in the container, so more content can be placed in the container than can be normally viewed at one time.</p>
			<p>The scrollbar includes a draggable thumb as well as up and down arrows at the top and bottom.Clicking the arrows scrolls the content of the container up or down by a small amount, whereas clicking on the scrollbar itself above or below the thumb will scroll the area by a large amount.</p>
		</overview>
		<usage>
			<p>Scrollpane widgets can be placed inside any other container, but are usually placed inside a pane or a tab page.Almost any content can be placed inside a scrollpane, but most commonly tables, treeviews, and html areas appear there.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image to be placed behind the scrollpane.</property>
			<property name="bgcolor" type="string">A color, RGB or named, to be used as the scrollpane background.If neither bgcolor transparent.</property>
			<property name="height" type="integer">height, in pixels, of the scrollpane's visible area. Due to the nature of the  can time.</property>
			<property name="width" type="integer">width, in pixels, of the scrollpane, including the scrollbar area on the right side.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the scrollpane, relative to its container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the scrollpane, relative to its container.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
MyScrollPane "widget/scrollpane"
	{
	// Visible scrollpane geometries...
	x = 0; y = 0;
	width = 600; height = 300;

	// This treeview is inside the scrollpane.
	MyTreeView "widget/treeview"
		{
		x = 1; y = 1;
		// Leave room for the scrollbar, (600 - 20 = 580)
		width = 580;

		// The source for the treeview.
		source = "/";
		}
	}
		]]>
		</sample>
	</widget>
	<widget name="tab" type="widget/tab">
		<overview>
			<p>The TabControl widget provides a DHTML tab control within Centrallix. The widget behaves in the same way as tab controls in other GUI environments, providing a set of tab pages, layered one on top of the other, which can be selected (brought to the foreground) by clicking the mouse on the respective visible tab at the top of the tab control.</p>
			<p>To further distinguish which tab at the top of the tab control is active, this widget slightly modifies the X/Y position of the tab as well as changing a thumbnail image (on the left edge of the tab) to further enhance the distinction between selected and inactive tab pages.</p>
		</overview>
		<usage>
			<p>The tab pages are containers, and as such, controls of various kinds, including other tab controls, can be placed inside the tab pages.</p>
			<p>Tab pages are added to a tab control by including widgets of type "widget/tabpage" within the "widget/tab" widget in the structure file that defines the application. Any controls to appear inside a particular tab page should be placed inside their respective "widget/tabpage" widgets in the structure file.Only widgets of type "widget/tabpage" should be placed inside a "widget/tab", with the exception of nonvisuals such as connectors.</p>
		</usage>
		<properties>
			<property name="background" type="string">An image to be used as the background of the tab control.This is useful for adding control.</property>
			<property name="bgcolor" type="string">As an alternate to "background", "bgcolor" can specify a color, either named or RGB, control.</property>
			<property name="height" type="integer">the height, in pixels, of the entire tab control, including the tabs and pages.</property>
			<property name="selected" type="string">The name of the tab page that should be initially selected.</property>
			<property name="textcolor" type=" (string">The color of the text to be used on the tabs to identify them.</property>
			<property name="width" type="integer">width, in pixels, of the entire tab control.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the tab control, relative to the container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the control, relative to its container.</property>
		</properties>
		<children>
			<child type="any">
				<childproperty name="title" type="string">The name of the tab page, which appears in the tab at the top of the control.</childproperty>
			</child>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here's a tab control with two tab pages.
myTabControl "widget/tab"
	{
	x = 20; y = 100; width=360; height=200;
	bgcolor="#c0c0c0";
	selected = "FirstPage";

	FirstPage "widget/tabpage" { title = "TheFirstPage";}
	SecondPage "widget/tabpage" { title = "TheSecondTabPage"; }
	}
		]]>
		</sample>
	</widget>
	<widget name="table" type="widget/table">
		<overview>
			<p>A table widget is used to display data in a tabular format. It consists of a header row with column labels, followed by any number of rows containing data.The header may have a different color or image scheme than the rows, and the rows may or may not be configured to alternate between two colors or background images.</p>
		<span class='__TEXT__'>Table widgets come in three different flavors: static, dynamicpage, and dynamicrow.Static table widgets are built on the server and write their data directly into the container in which they reside, which is usually a scrollpane widget.=  Dynamicpage table widgets load their data once they initialize on the client, by activating a query through an ObjectSource nonvisual widget.Dynamicpage table widgets do not support modification, but can be reloaded through an ObjectSource at will.Dynamicrow table widgets, on the other hand, display each row as an individual layer, and thus are modifiable on the client. Dynamicrow table widgets also load their contents through an ObjectSource widget query.As of the time of writing of this document, only s<i>tatic</i> mode was supported.</span>
			<p>Table widgets allow the selection (keyboard, mouse, and data focus) of individual rows.</p>
		</overview>
		<usage>
			<p>Table widgets are normally placed inside of a scrollpane so that any rows which don't fit int the container can still be viewed. Table columns are created via "widget/table-column" child widgets within the table widget.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the table. This "shows through" between table cells.</property>
			<property name="bgcolor" type="string">A color, RGB or named, to be used between table cells and rows.If neither transparent.</property>
			<property name="hdr_background" type="string">A background image for the header row cells.</property>
			<property name="hdr_bgcolor" type="string">A color, RGB or named, for the header row cells.</property>
			<property name="inner_border" type="integer">width of the inner spacing between cells in a table. Default0.</property>
			<property name="inner_padding" type="integer">margins within each cell, in pixels.  Default is 0 pixels.</property>
			<property name="outer_border" type="integer">width of the outer spacing around the outside of the table, in pixels.  Default0.</property>
			<property name="row_background1" type="string">A background image for the table row cells.</property>
			<property name="row_bgcolor1" type="string">A color, RGB or named, for the table row cells.</property>
			<property name="row_background2" type="string">A background image for the table row cells.  If this is specified, rows will alternate in "row_background2".</property>
			<property name="row_bgcolor2" type="string">A color, RGB or named, for the table row cells.  If this is specified, rows will alternate "row_bgcolor2".</property>
			<property name="sql" type="string">The SQL query to be used for obtaining the data for the table.This query's result set child widgets.</property>
			<property name="textcolor" type=" (string">A color, RGB or named, of the text in the normal data rows.</property>
			<property name="titlecolor" type=" (string">A color, RGB or named, of the text in the header row.  If unset, defaults to textcolor.</property>
			<property name="width" type="integer">width, in pixels, of the table.The height is determined dynamically.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the table. Default is 0.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the table. Default is 0.</property>
		</properties>
		<children>
			<child type="any">
				<childproperty name="title" type="string">The title of the column to be displayed in the header row.</childproperty>
				<childproperty name="width" type="integer">width of the column.</childproperty>
			</child>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Here is a simple table.
tblFileList "widget/table"
	{
	sql = "select :name,annotation=condition(:annotation=='','-none-',:annotation)
				from /samples";
	mode="static";
	width=408;
	inner_border=2;
	inner_padding=1;
	bgcolor="#c0c0c0";
	row_bgcolor1="#e0e0e0";
	hdr_bgcolor="white";
	textcolor="black";

	name "widget/table-column" { title="Object Name";width=20; }
	annotation "widget/table-column" { title="Annotation"; width=25; }
	}
		]]>
		</sample>
	</widget>
	<widget name="textbutton" type="widget/textbutton">
		<overview>
			<p>A textbutton provides similar functionality to the imagebutton. However, the programmer need not create two or three graphics images in order to use a textbutton; rather simply specifying the text to appear on the button is sufficient.</p>
			<p>Textbuttons, like imagebuttons, can either have two or three states. A three-state textbutton doesn't have a "raised" border until the user points to it, whereas a two-state textbutton retains its raised border whether pointed to or not.</p>
		</overview>
		<usage>
			<p>The TextButton can be placed inside any visible container, but only nonvisual widgets can be placed within it.</p>
		</usage>
		<properties>
			<property name="background" type="string">A background image for the button.</property>
			<property name="bgcolor" type="string">A color, RGB or named, to be used as the button's background.If neither bgcolor transparent.</property>
			<property name="fgcolor1" type=" (string">A color, RGB or named, for the text on the button.  Default "white".</property>
			<property name="fgcolor2" type=" (string">A color, RGB or named, for the text's 1-pixel drop-shadow.  Default "black".</property>
			<property name="height" type="integer">height, in pixels, of the text button.</property>
			<property name="text" type="string">The text to appear on the button.</property>
			<property name="tristate" type="yes/no">or not the button is tri-state. Default is yes.</property>
			<property name="width" type="integer">width, in pixels, of the text button.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the button, relative to its container.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the button, relative to its container.</property>
		</properties>
		<children>
		</children>
		<events>
			<event name="Click">This event occurs when the user clicks the button. No parameters are available from this event.</event>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
MyButton "widget/textbutton"
	{
	x = 10; y = 10;
	width = 50;
	height = 20;

	tristate = "no";
	background = "/sys/images/grey_gradient.png";
	text = "OK";
	}
		]]>
		</sample>
	</widget>
	<widget name="timer" type="widget/timer">
		<overview>
			<p>A timer widget is used to schedule an Event to occur after a specified amount of time.=  Timers can be set to expire a set amount of time after the page is loaded, or they can be triggered into counting down via activating an Action on the timer. Timers can be used to create animations, delayed effects, and more.</p>
		</overview>
		<usage>
			<p>Timers are nonvisual widgets which can be placed almost anywhere in an application.=  They are most commonly found at the top-level of the application, however. Timers have no direct effects on the object in which they are placed.=  Timers can only contain Connector widgets.</p>
		</usage>
		<properties>
			<property name="auto_reset" type="int;0 or 1">the timer starts counting down again immediately after it expires.</property>
			<property name="auto_start" type="int;0 or 1">the timer starts counting down immediately after the page loads.</property>
			<property name="msec" type="integer">of milliseconds (1/1000th of a second) before the timer expires.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
			<action name="SetTimer">action takes two parameters: "Time" (integer in milliseconds) and "AutoReset" (integer 0 or 1). It causes a timer to begin counting down towards an Expire event.</action>
			<action name="CancelTimer">actions causes a timer to stop counting down, and thus no Expire event will occur until another countdown sequence is initiated by a SetTimer action.</action>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// These timers trigger each other!You can make this app do something
// more interesting by putting other connectors on the Expire events of
// the timers as well :)
//
mytimerOne "widget/timer"
	{
	msec = 500; // half a second
	auto_start = 1;
	auto_reset = 0;
	cnOne "widget/connector"
		{ 
		event="Expire"; target="mytimerTwo";action="SetTimer";
		Time="500"; AutoReset="0";
		}  }
mytimerTwo "widget/timer"
	{
	msec = 500;
	auto_start = 0;
	auto_reset = 0;
	cnTwo "widget/connector"
		{ 
		event="Expire"; target="mytimerOne";action="SetTimer";
		Time="500"; AutoReset="0";
		}
	}
		]]>
		</sample>
	</widget>
	<widget name="treeview" type="widget/treeview">
		<overview>
			<p>A treeview provides a way of viewing hierarchically-organized data via a "traditional" GUI point-and-click tree structure. A treeview has "branches" that can expand and collapse entire subtrees of data.</p>
			<p>Centrallix treeviews present a subtree of the ObjectSystem, with the data dynamically loaded, on demand, from the server as the widget is used. The treeview widget thus has no intelligence in and of itself in determining what kinds of objects are presented at each level of the tree.Many times, this is exactly what is desired because the treeview is being used to simply browse objects in the ObjectSystem, such as directories and files. In other cases, the treeview is teamed up with a special ObjectSystem object called a "querytree"(QYT) object. The querytree object creates a hierarchical view from other potentially non-hierarchical data in the ObjectSystem, such as that from different database tables and so forth.</p>
		</overview>
		<usage>
			<p>Treeviews can be placed inside of any visual container, but are usually placed inside of a scrollpane, since scrollpanes can expand to allow the user to view data that would not normally fit inside the desired container. Treeviews can contain only nonvisual widgets such as connectors.</p>
		</usage>
		<properties>
			<property name="source" type="string">The ObjectSystem path of the root of the treeview.</property>
			<property name="width" type="integer">width, in pixels, of the treeview.</property>
			<property name="x" type="integer">x-coordinate of the upper left corner of the treeview's root object.</property>
			<property name="y" type="integer">y-coordinate of the upper left corner of the treeview's root object.</property>
		</properties>
		<children>
		</children>
		<events>
			<event name="ClickItem">occurs when the user clicks on the clickable link for an item in the treeview. Its one parameter is "Pathname", or the ObjectSystem path to the object which was selected.</event>
			<event name="RightClickItem">to the above, but when the user right-clicks on an item in the treeview.</event>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// Example of a pane containing a scrollpane containing a treeview.
mypane "widget/pane"
	{
	x=100; y=100; width=300; height=300;
	style = "lowered";
	bgcolor = "#c0c0c0";
	
	myscroll "widget/scrollpane"
		{
		x=0; y=0; width=198; height=198;
		
		mytreeview "widget/treeview"
			{
			x=1; y=1; width=175;
			source="/";
			}
		}
	}
		]]>
		</sample>
	</widget>
	<widget name="variable" type="widget/variable">
		<overview>
			<p>The 'variable' nonvisual widget is used to create a global javascript scalar variable in the application.The variable can be an integer or string.</p>
		</overview>
		<usage>
			<p>This nonvisual widget is used at the top-level (within a "widget/page").=  Currently it has no events, and so shouldn't contain any visual or nonvisual widgets.</p>
		</usage>
		<properties>
			<property name="value" type="integer/string">initial value of the variable.</property>
		</properties>
		<children>
		</children>
		<events>
		</events>
		<actions>
		</actions>
		<sample>
		<![CDATA[
$Version=2$
// This creates a global variable.
counter "widget/variable"
	{
	value = 0;
	}
		]]>
		</sample>
	</widget>
</widgets>
