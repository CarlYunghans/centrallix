
*********************************

This file was created by Seth Bird (Thr4wn) to introduce people to how
the entire centrallix system as a whole works in a way that should
(hopefully), reduce the learning curve.

Please edit this file if there are any mistakes.

Also, online documentation can be found at http://www.centrallix.net/docs/docs.php

If there is some specific item you want documentation for, check
definitions.html, otherwise `rgrep term centrallix-doc/*` might help.

*********************************

= Centrallix =

The point of Centrallix is two-fold. each purpose is handled in a
separate layer:

    1) [Object System Management Layer (OSML)]: This layer provides a
       data-managment-system that can manage data that is stored in
       multiple formats (text files, csv files, email attachments, and
       others).

    2) [Widget Layer] This layer provides a minimal framework
       (language) for creation of simple GUI displays that allow live
       interaction with data stored in the OSML.

         * It's currently (2008-06-25) implemented by parsing a widget
           definition into internal C storage (centrallix/expression),
           then converted into javascript (?) which communicates to
           the OSML via http.

the HTTP implementation involves one other layer:

    3) [traffic handling layer] This layer deals with the overhad
       management of HTTP (multiple threading, handling of HTTP
       requests, etc). At the time of Centrallix's original creation,
       much of what this layer does had no standard. At this point, a
       major refactoring to something like becoming an apache module
       would not be opposed to (it's just that it would take a lot of
       time).


== The Object System Management Layer ==

The 'Object System' is the collection of data that users have access
to (create, read, update, delete, or some combo). The OSML treats
/var/centrallix/os as the root of the Object System (but that path is
editable during centrallix compilation)

Data in the Object System is referenced in one of two ways:

    1) using the OS-path syntax. (When the OSML is interacted with via
       http requests, it takes the requeted path and interprets it as
       an OS-path.)

    2) using OS-SQL.

One can directly access the Object System by doing `make test_install`
(note, this requires installation of the libreadline-dev
package). This will compile a program called test_obj. test_obj which
brings up a prompt from which you can navigate the Object System via
OS-pathnames or retrieve data via OS-SQL.

=== OS-path syntax ===

not documented yet.

=== OS-SQL ===

see SQL.txt as well as online documentation.

=== The HTTP implementation of the OSML ===

The HTTP OSML implementation contains multiple components:

    1) traffic handling

        * centrallix/include/stparse.h


( NOTE: Since the centrallix-os module is where all data is, that is
also where all js files are. They are in centrallix-os/sys/js. Please
read the README file located there for an explanation of how
centrallix handles javascript. )


== The Widget Layer ==

The Widget Layer is a higher-level layer which describes GUIs that
allow users to interact with the OSML. The Widget layer is independent
of any form of implementation. Widgets are described in widget
files.

There are mulitple supported syntaxes for widget files. As of
2008-07-09, the following are supported:

    * xml files

    * "Structure files" (See 'StructureFile.txt' for an explanation of
      Structure Files.)


NOTE: as of 2008-07-09, not all widgets are fully supported in the
HTTP implementation.


A widget can serve one of multiple purposes:

    1) Internal data management (the widget exists to help
       organize/contain other widgets)

    2) GUI display (checkbox, label, etc)

    3) Event handling (All events are handled via the 'connector'
       widget.

    4) Interaction with OSML (practically all interactions to OSML are
       handled via the 'objectsource' widget.) (in HTTP
       implementation, this is where most asynchronous requests
       originate.)


=== Components ===

"Components" are the means for defining/using re-usable widget
structures.

All widget structure definitions must be inside a page widget, or a
componentdecl widget (there generally can be only one page widget on
the client). To include that componentdecl in widget structre X, you
must place an actual "component" widget in X where the componentdecl
should appear.

information related to HTTP implementation of components can be found
in htdrv_component.js and htdrv_componentdecl.js .


=== Events in the Widget Layer ===

Here is an example of how events work (via the connector widget):

------------------
$Version=2$
index "widget/page"
  {
  title = "Event Example";
  x = 0;
  y = 0;
  width = 600;
  height = 560;

  tbtn1 "widget/textbutton"
    {
    text = "Press Me";
    x = 0;
    y = 0;
    width = 50;
    height = 50;

    con1 "widget/connector"
      {
      event = "Click"; // Centrallix looks for a "widget/textbutton" event named "Selected".
      target = "html1"; // This is where Centrallix will look for an action with the name specified by action property.
      action = "LoadPage"; // This is the name of the action that will run when said event is triggered.

      // Any other attributes besides event, target, and action are assumed to be parameters being passed to the action. THEY ARE CASE SENSETIVE.
      Source = '/samples/fade_test1.html';
      }
    }

  html1 "widget/html"
    {
    x = 0;
    y = 0;
    width = 398;
    hight = 398;

    mode = dynamic;
    }
  }
------------------




=== Javascript Implementation of Widget Layer ===

Items inside a Structure file can be one of the following Classes:
Value (something = value)
Action
Event
FormElement