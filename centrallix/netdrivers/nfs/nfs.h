/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _NFS_H_RPCGEN
#define _NFS_H_RPCGEN

#include <rpc/rpc.h>


#ifdef __cplusplus
extern "C" {
#endif

#define MAXDATA 8192
#define NFSMAXPATHLEN 1024
#define MAXNAMLEN 255
#define COOKIESIZE 4
#ifndef FHSIZE
#define FHSIZE 32
#endif

#ifndef FHANDLE
typedef char fhandle[FHSIZE];
#define FHANDLE
#endif

typedef char nfscookie[COOKIESIZE];

struct nfstimeval {
	u_int seconds;
	u_int useconds;
};
typedef struct nfstimeval nfstimeval;

enum nfsstat {
	NFS_OK = 0,
	NFSERR_PERM = 1,
	NFSERR_NOENT = 2,
	NFSERR_IO = 5,
	NFSERR_NXIO = 6,
	NFSERR_ACCES = 13,
	NFSERR_EXIST = 17,
	NFSERR_NODEV = 19,
	NFSERR_NOTDIR = 20,
	NFSERR_ISDIR = 21,
	NFSERR_FBIG = 27,
	NFSERR_NOSPC = 28,
	NFSERR_ROFS = 30,
	NFSERR_NAMETOOLONG = 63,
	NFSERR_NOTEMPTY = 66,
	NFSERR_DQUOT = 69,
	NFSERR_STALE = 70,
	NFSERR_WFLUSH = 99,
};
typedef enum nfsstat nfsstat;

enum ftype {
	NFNON = 0,
	NFREG = 1,
	NFDIR = 2,
	NFBLK = 3,
	NFCHR = 4,
	NFLNK = 5,
};
typedef enum ftype ftype;

struct fattr {
	ftype type;
	u_int mode;
	u_int nlink;
	u_int uid;
	u_int gid;
	u_int size;
	u_int blocksize;
	u_int rdev;
	u_int blocks;
	u_int fsid;
	u_int fileid;
	nfstimeval atime;
	nfstimeval mtime;
	nfstimeval ctime;
};
typedef struct fattr fattr;


struct sattr {
	u_int mode;
	u_int uid;
	u_int gid;
	u_int size;
	nfstimeval atime;
	nfstimeval mtime;
};
typedef struct sattr sattr;

typedef char *filename;

typedef char *path;

typedef struct {
	u_int nfsdata_len;
	char *nfsdata_val;
} nfsdata;

struct sattrargs {
	fhandle file;
	sattr attributes;
};
typedef struct sattrargs sattrargs;

struct diropargs {
	fhandle dir;
	filename name;
};
typedef struct diropargs diropargs;

struct readlinkres {
	nfsstat status;
	union {
		path data;
	} readlinkres_u;
};
typedef struct readlinkres readlinkres;

struct readargs {
	fhandle file;
	u_int offset;
	u_int count;
	u_int totalcount;
};
typedef struct readargs readargs;

struct read_ok {
	fattr attributes;
	nfsdata data;
};
typedef struct read_ok read_ok;

struct readres {
	nfsstat status;
	union {
		read_ok data;
	} readres_u;
};
typedef struct readres readres;

struct writeargs {
	fhandle file;
	u_int beginoffset;
	u_int offset;
	u_int totalcount;
	nfsdata data;
};
typedef struct writeargs writeargs;

struct createargs {
	diropargs where;
	sattr attributes;
};
typedef struct createargs createargs;

struct renameargs {
	diropargs from;
	diropargs to;
};
typedef struct renameargs renameargs;

struct linkargs {
	fhandle from;
	diropargs to;
};
typedef struct linkargs linkargs;

struct symlinkargs {
	diropargs from;
	path to;
	sattr attributes;
};
typedef struct symlinkargs symlinkargs;

struct readdirargs {
	fhandle dir;
	nfscookie cookie;
	u_int count;
};
typedef struct readdirargs readdirargs;

struct entry {
	u_int fileid;
	filename name;
	nfscookie cookie;
	struct entry *nextentry;
};
typedef struct entry entry;

struct direntries {
	entry *entries;
	bool_t eof;
};
typedef struct direntries direntries;

struct readdirres {
	nfsstat status;
	union {
		direntries readdirok;
	} readdirres_u;
};
typedef struct readdirres readdirres;

struct info_struct {
	u_int tsize;
	u_int bsize;
	u_int blocks;
	u_int bfree;
	u_int bavail;
};
typedef struct info_struct info_struct;

struct statfsres {
	nfsstat status;
	union {
		info_struct info;
	} statfsres_u;
};
typedef struct statfsres statfsres;

struct attrstat {
	nfsstat status;
	union {
		fattr attributes;
	} attrstat_u;
};
typedef struct attrstat attrstat;

struct diropok_struct {
	fhandle file;
	fattr attributes;
};
typedef struct diropok_struct diropok_struct;

struct diropres {
	nfsstat status;
	union {
		diropok_struct diropok;
	} diropres_u;
};
typedef struct diropres diropres;

#define NFS_PROGRAM 100003
#define NFS_VERSION 2

#define NFSPROC_NULL 0
#define NFSPROC_GETATTR 1
#define NFSPROC_SETATTR 2
#define NFSPROC_ROOT 3
#define NFSPROC_LOOKUP 4
#define NFSPROC_READLINK 5
#define NFSPROC_READ 6
#define NFSPROC_WRITECACHE 7
#define NFSPROC_WRITE 8
#define NFSPROC_CREATE 9
#define NFSPROC_REMOVE 10
#define NFSPROC_RENAME 11
#define NFSPROC_LINK 12
#define NFSPROC_SYMLINK 13
#define NFSPROC_MKDIR 14
#define NFSPROC_RMDIR 15
#define NFSPROC_READDIR 16
#define NFSPROC_STATFS 17

extern  bool_t xdr_fhandle (XDR *, fhandle);
extern  bool_t xdr_nfscookie (XDR *, nfscookie);
extern  bool_t xdr_sattr (XDR *, sattr*);
extern  bool_t xdr_filename (XDR *, filename*);
extern  bool_t xdr_path (XDR *, path*);
extern  bool_t xdr_nfsdata (XDR *, nfsdata*);
extern  bool_t xdr_sattrargs (XDR *, sattrargs*);
extern  bool_t xdr_diropargs (XDR *, diropargs*);
extern  bool_t xdr_readlinkres (XDR *, readlinkres*);
extern  bool_t xdr_readargs (XDR *, readargs*);
extern  bool_t xdr_read_ok (XDR *, read_ok*);
extern  bool_t xdr_readres (XDR *, readres*);
extern  bool_t xdr_writeargs (XDR *, writeargs*);
extern  bool_t xdr_createargs (XDR *, createargs*);
extern  bool_t xdr_renameargs (XDR *, renameargs*);
extern  bool_t xdr_linkargs (XDR *, linkargs*);
extern  bool_t xdr_symlinkargs (XDR *, symlinkargs*);
extern  bool_t xdr_readdirargs (XDR *, readdirargs*);
extern  bool_t xdr_entry (XDR *, entry*);
extern  bool_t xdr_direntries (XDR *, direntries*);
extern  bool_t xdr_readdirres (XDR *, readdirres*);
extern  bool_t xdr_info_struct (XDR *, info_struct*);
extern  bool_t xdr_statfsres (XDR *, statfsres*);
extern  bool_t xdr_nfsstat (XDR *, nfsstat*);
extern  bool_t xdr_ftype (XDR *, ftype*);
extern  bool_t xdr_nfstimeval (XDR *, nfstimeval*);
extern  bool_t xdr_fattr (XDR *, fattr*);
extern  bool_t xdr_attrstat (XDR *, attrstat*);
extern  bool_t xdr_diropok_struct (XDR *, diropok_struct*);
extern  bool_t xdr_diropres (XDR *, diropres*);

#ifdef __cplusplus
}
#endif

#endif /* !_NFS_H_RPCGEN */
