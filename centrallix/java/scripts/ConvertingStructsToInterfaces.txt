To convert a C struct to a Java interface, use the convert-struct.pl script.

Example: ./convert-struct.pl src/main/java org.lightsys.centrallix.objectsystem ../include/obj.h

To convert ALL C structs in many header files, run: ./convert-all.sh
The list of header files and the Java packages they belong to are listed in header-files.txt

There is a mapping between short struct names and their full names (e.g. _ET => Expression)
in the file struct-short-names.txt; this file is generated by get-struct-names.pl.

Known Issues / Limitations with struct converter:

- There are no parameters included in the method declarations. This information must be inferred
  by looking for a similarly-named function definition at the end of the header file. The link
  between the function pointer struct field names and the names of the functions are all in the
  C file that corresponds to the header file, generally in some sort of initialization function.
- Imports for Centrallix classes that are in different packages are not added automatically
- Methods with return types that are collections (List) do not include a generic type parameter
  for their elements (e.g. List<String>). This can be discerned their by looking at the return
  type of the C function definitions or, in some cases, by looking at what type of object is
  being constructed and returned within the function implementation.
- If the struct definition does not include a ", *pTheName", the struct ends up being ignored
- Unions within a struct are not handled correctly
- Nested structs are not handled correctly
